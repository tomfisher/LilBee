
/home/user/littebee/LilBee/Debug/LilBee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004814  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800499c  0800499c  0001499c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  080049f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ram2         00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  7 .bss          0000049c  20000008  20000008  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200004a4  200004a4  00020008  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   000218fb  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003b77  00000000  00000000  00041933  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001548  00000000  00000000  000454b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001398  00000000  00000000  000469f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a277  00000000  00000000  00047d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007ba8  00000000  00000000  00052007  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00059baf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005678  00000000  00000000  00059c2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004984 	.word	0x08004984

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08004984 	.word	0x08004984

080001c8 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08c      	sub	sp, #48	; 0x30
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	603b      	str	r3, [r7, #0]
 80001d0:	4603      	mov	r3, r0
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	460b      	mov	r3, r1
 80001d6:	71bb      	strb	r3, [r7, #6]
 80001d8:	4613      	mov	r3, r2
 80001da:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80001e0:	79bb      	ldrb	r3, [r7, #6]
 80001e2:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80001e4:	797b      	ldrb	r3, [r7, #5]
 80001e6:	75bb      	strb	r3, [r7, #22]
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 80001e8:	f107 030c 	add.w	r3, r7, #12
 80001ec:	2207      	movs	r2, #7
 80001ee:	2100      	movs	r1, #0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 ff8f 	bl	8001114 <Osal_MemSet>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	2218      	movs	r2, #24
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 ff88 	bl	8001114 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8000204:	233f      	movs	r3, #63	; 0x3f
 8000206:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8000208:	238a      	movs	r3, #138	; 0x8a
 800020a:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800020c:	f107 0314 	add.w	r3, r7, #20
 8000210:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8000212:	2303      	movs	r3, #3
 8000214:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8000216:	f107 030c 	add.w	r3, r7, #12
 800021a:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800021c:	2307      	movs	r3, #7
 800021e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8000220:	f107 0318 	add.w	r3, r7, #24
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f000 fcbe 	bl	8000ba8 <hci_send_req>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	da01      	bge.n	8000236 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8000232:	23ff      	movs	r3, #255	; 0xff
 8000234:	e014      	b.n	8000260 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8000236:	7b3b      	ldrb	r3, [r7, #12]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800023c:	7b3b      	ldrb	r3, [r7, #12]
 800023e:	e00f      	b.n	8000260 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8000240:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8000244:	b29a      	uxth	r2, r3
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800024a:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800024e:	b29a      	uxth	r2, r3
 8000250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000252:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8000254:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8000258:	b29a      	uxth	r2, r3
 800025a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800025c:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800025e:	2300      	movs	r3, #0
}
 8000260:	4618      	mov	r0, r3
 8000262:	3730      	adds	r7, #48	; 0x30
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b08e      	sub	sp, #56	; 0x38
 800026c:	af00      	add	r7, sp, #0
 800026e:	60b9      	str	r1, [r7, #8]
 8000270:	607a      	str	r2, [r7, #4]
 8000272:	603b      	str	r3, [r7, #0]
 8000274:	4603      	mov	r3, r0
 8000276:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8000278:	7bfb      	ldrb	r3, [r7, #15]
 800027a:	773b      	strb	r3, [r7, #28]
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 800027c:	f107 0314 	add.w	r3, r7, #20
 8000280:	2207      	movs	r2, #7
 8000282:	2100      	movs	r1, #0
 8000284:	4618      	mov	r0, r3
 8000286:	f000 ff45 	bl	8001114 <Osal_MemSet>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 800028a:	f107 0320 	add.w	r3, r7, #32
 800028e:	2218      	movs	r2, #24
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f000 ff3e 	bl	8001114 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8000298:	233f      	movs	r3, #63	; 0x3f
 800029a:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 800029c:	238a      	movs	r3, #138	; 0x8a
 800029e:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 80002a0:	f107 031c 	add.w	r3, r7, #28
 80002a4:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 80002a6:	2301      	movs	r3, #1
 80002a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 80002aa:	f107 0314 	add.w	r3, r7, #20
 80002ae:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 80002b0:	2307      	movs	r3, #7
 80002b2:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80002b4:	f107 0320 	add.w	r3, r7, #32
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fc74 	bl	8000ba8 <hci_send_req>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	da01      	bge.n	80002ca <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 80002c6:	23ff      	movs	r3, #255	; 0xff
 80002c8:	e014      	b.n	80002f4 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 80002ca:	7d3b      	ldrb	r3, [r7, #20]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 80002d0:	7d3b      	ldrb	r3, [r7, #20]
 80002d2:	e00f      	b.n	80002f4 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 80002d4:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80002d8:	b29a      	uxth	r2, r3
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80002de:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 80002e2:	b29a      	uxth	r2, r3
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80002e8:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80002ec:	b29a      	uxth	r2, r3
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80002f2:	2300      	movs	r3, #0
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	3738      	adds	r7, #56	; 0x38
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <aci_gap_set_non_discoverable>:

tBleStatus aci_gap_set_non_discoverable(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b088      	sub	sp, #32
 8000300:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 8000302:	f107 0308 	add.w	r3, r7, #8
 8000306:	2218      	movs	r2, #24
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f000 ff02 	bl	8001114 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8000310:	233f      	movs	r3, #63	; 0x3f
 8000312:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GAP_SET_NON_DISCOVERABLE;
 8000314:	2381      	movs	r3, #129	; 0x81
 8000316:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8000318:	1dfb      	adds	r3, r7, #7
 800031a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800031c:	2301      	movs	r3, #1
 800031e:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8000320:	f107 0308 	add.w	r3, r7, #8
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f000 fc3e 	bl	8000ba8 <hci_send_req>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	da01      	bge.n	8000336 <aci_gap_set_non_discoverable+0x3a>
    return BLE_STATUS_TIMEOUT;
 8000332:	23ff      	movs	r3, #255	; 0xff
 8000334:	e000      	b.n	8000338 <aci_gap_set_non_discoverable+0x3c>
  
  return status;  
 8000336:	79fb      	ldrb	r3, [r7, #7]
}
 8000338:	4618      	mov	r0, r3
 800033a:	3720      	adds	r7, #32
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}

08000340 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b090      	sub	sp, #64	; 0x40
 8000344:	af00      	add	r7, sp, #0
 8000346:	603a      	str	r2, [r7, #0]
 8000348:	461a      	mov	r2, r3
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
 800034e:	460b      	mov	r3, r1
 8000350:	71bb      	strb	r3, [r7, #6]
 8000352:	4613      	mov	r3, r2
 8000354:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800035a:	79bb      	ldrb	r3, [r7, #6]
 800035c:	737b      	strb	r3, [r7, #13]
  Osal_MemCpy(cp.oob_data, oob_data, 16);
 800035e:	f107 030c 	add.w	r3, r7, #12
 8000362:	3302      	adds	r3, #2
 8000364:	2210      	movs	r2, #16
 8000366:	6839      	ldr	r1, [r7, #0]
 8000368:	4618      	mov	r0, r3
 800036a:	f000 fec3 	bl	80010f4 <Osal_MemCpy>
  cp.min_encryption_key_size = min_encryption_key_size;
 800036e:	797b      	ldrb	r3, [r7, #5]
 8000370:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8000372:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000376:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8000378:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800037c:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8000380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000382:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 8000386:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800038a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  Osal_MemSet(&rq, 0, sizeof(rq));
 800038e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000392:	2218      	movs	r2, #24
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f000 febc 	bl	8001114 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800039c:	233f      	movs	r3, #63	; 0x3f
 800039e:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 80003a0:	2386      	movs	r3, #134	; 0x86
 80003a2:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 80003a4:	f107 030c 	add.w	r3, r7, #12
 80003a8:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 80003aa:	231a      	movs	r3, #26
 80003ac:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 80003ae:	f107 030b 	add.w	r3, r7, #11
 80003b2:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 80003b4:	2301      	movs	r3, #1
 80003b6:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 80003b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 fbf2 	bl	8000ba8 <hci_send_req>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	da01      	bge.n	80003ce <aci_gap_set_auth_requirement+0x8e>
    return BLE_STATUS_TIMEOUT;
 80003ca:	23ff      	movs	r3, #255	; 0xff
 80003cc:	e005      	b.n	80003da <aci_gap_set_auth_requirement+0x9a>

  if (status) {
 80003ce:	7afb      	ldrb	r3, [r7, #11]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <aci_gap_set_auth_requirement+0x98>
    return status;
 80003d4:	7afb      	ldrb	r3, [r7, #11]
 80003d6:	e000      	b.n	80003da <aci_gap_set_auth_requirement+0x9a>
  }
    
  return 0;
 80003d8:	2300      	movs	r3, #0
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3740      	adds	r7, #64	; 0x40
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80003e2:	b580      	push	{r7, lr}
 80003e4:	b088      	sub	sp, #32
 80003e6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  Osal_MemSet(&rq, 0, sizeof(rq));
 80003e8:	f107 0308 	add.w	r3, r7, #8
 80003ec:	2218      	movs	r2, #24
 80003ee:	2100      	movs	r1, #0
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 fe8f 	bl	8001114 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80003f6:	233f      	movs	r3, #63	; 0x3f
 80003f8:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 80003fa:	f240 1301 	movw	r3, #257	; 0x101
 80003fe:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8000400:	1dfb      	adds	r3, r7, #7
 8000402:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8000404:	2301      	movs	r3, #1
 8000406:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8000408:	f107 0308 	add.w	r3, r7, #8
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f000 fbca 	bl	8000ba8 <hci_send_req>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	da01      	bge.n	800041e <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800041a:	23ff      	movs	r3, #255	; 0xff
 800041c:	e000      	b.n	8000420 <aci_gatt_init+0x3e>

  return status;
 800041e:	79fb      	ldrb	r3, [r7, #7]
}
 8000420:	4618      	mov	r0, r3
 8000422:	3720      	adds	r7, #32
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b090      	sub	sp, #64	; 0x40
 800042c:	af00      	add	r7, sp, #0
 800042e:	6039      	str	r1, [r7, #0]
 8000430:	4611      	mov	r1, r2
 8000432:	461a      	mov	r2, r3
 8000434:	4603      	mov	r3, r0
 8000436:	71fb      	strb	r3, [r7, #7]
 8000438:	460b      	mov	r3, r1
 800043a:	71bb      	strb	r3, [r7, #6]
 800043c:	4613      	mov	r3, r2
 800043e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 8000446:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800044a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800044e:	4413      	add	r3, r2
 8000450:	79fa      	ldrb	r2, [r7, #7]
 8000452:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8000456:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800045a:	3301      	adds	r3, #1
 800045c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d103      	bne.n	800046e <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 8000466:	2302      	movs	r3, #2
 8000468:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800046c:	e002      	b.n	8000474 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 800046e:	2310      	movs	r3, #16
 8000470:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  Osal_MemCpy(buffer + indx, service_uuid, uuid_len);
 8000474:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000478:	f107 020c 	add.w	r2, r7, #12
 800047c:	4413      	add	r3, r2
 800047e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000482:	6839      	ldr	r1, [r7, #0]
 8000484:	4618      	mov	r0, r3
 8000486:	f000 fe35 	bl	80010f4 <Osal_MemCpy>
  indx +=  uuid_len;
 800048a:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800048e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000492:	4413      	add	r3, r2
 8000494:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 8000498:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800049c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80004a0:	4413      	add	r3, r2
 80004a2:	79ba      	ldrb	r2, [r7, #6]
 80004a4:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80004a8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80004ac:	3301      	adds	r3, #1
 80004ae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 80004b2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80004b6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80004ba:	4413      	add	r3, r2
 80004bc:	797a      	ldrb	r2, [r7, #5]
 80004be:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80004c2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80004c6:	3301      	adds	r3, #1
 80004c8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 80004cc:	f107 0320 	add.w	r3, r7, #32
 80004d0:	2203      	movs	r2, #3
 80004d2:	2100      	movs	r1, #0
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 fe1d 	bl	8001114 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 80004da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004de:	2218      	movs	r2, #24
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 fe16 	bl	8001114 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80004e8:	233f      	movs	r3, #63	; 0x3f
 80004ea:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 80004ec:	f44f 7381 	mov.w	r3, #258	; 0x102
 80004f0:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 80004f2:	f107 030c 	add.w	r3, r7, #12
 80004f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 80004f8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80004fc:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8000504:	2303      	movs	r3, #3
 8000506:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8000508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f000 fb4a 	bl	8000ba8 <hci_send_req>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	da01      	bge.n	800051e <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 800051a:	23ff      	movs	r3, #255	; 0xff
 800051c:	e00c      	b.n	8000538 <aci_gatt_add_serv+0x110>

  if (resp.status) {
 800051e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d002      	beq.n	800052c <aci_gatt_add_serv+0x104>
    return resp.status;
 8000526:	f897 3020 	ldrb.w	r3, [r7, #32]
 800052a:	e005      	b.n	8000538 <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 800052c:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 8000530:	b29a      	uxth	r2, r3
 8000532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000534:	801a      	strh	r2, [r3, #0]

  return 0;
 8000536:	2300      	movs	r3, #0
}
 8000538:	4618      	mov	r0, r3
 800053a:	3740      	adds	r7, #64	; 0x40
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}

08000540 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b092      	sub	sp, #72	; 0x48
 8000544:	af00      	add	r7, sp, #0
 8000546:	603a      	str	r2, [r7, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	4603      	mov	r3, r0
 800054c:	80fb      	strh	r3, [r7, #6]
 800054e:	460b      	mov	r3, r1
 8000550:	717b      	strb	r3, [r7, #5]
 8000552:	4613      	mov	r3, r2
 8000554:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 800055c:	88fb      	ldrh	r3, [r7, #6]
 800055e:	80fb      	strh	r3, [r7, #6]
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 8000560:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000564:	f107 020c 	add.w	r2, r7, #12
 8000568:	4413      	add	r3, r2
 800056a:	1db9      	adds	r1, r7, #6
 800056c:	2202      	movs	r2, #2
 800056e:	4618      	mov	r0, r3
 8000570:	f000 fdc0 	bl	80010f4 <Osal_MemCpy>
  indx += 2;
 8000574:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000578:	3302      	adds	r3, #2
 800057a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800057e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000582:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000586:	4413      	add	r3, r2
 8000588:	797a      	ldrb	r2, [r7, #5]
 800058a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800058e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000592:	3301      	adds	r3, #1
 8000594:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8000598:	797b      	ldrb	r3, [r7, #5]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d103      	bne.n	80005a6 <aci_gatt_add_char+0x66>
    uuid_len = 2;
 800059e:	2302      	movs	r3, #2
 80005a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80005a4:	e002      	b.n	80005ac <aci_gatt_add_char+0x6c>
  }
  else {
    uuid_len = 16;
 80005a6:	2310      	movs	r3, #16
 80005a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  Osal_MemCpy(buffer + indx, charUuid, uuid_len);
 80005ac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80005b0:	f107 020c 	add.w	r2, r7, #12
 80005b4:	4413      	add	r3, r2
 80005b6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80005ba:	6839      	ldr	r1, [r7, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fd99 	bl	80010f4 <Osal_MemCpy>
  indx +=  uuid_len;
 80005c2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80005c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80005ca:	4413      	add	r3, r2
 80005cc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 80005d0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80005d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80005d8:	4413      	add	r3, r2
 80005da:	793a      	ldrb	r2, [r7, #4]
 80005dc:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80005e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80005e4:	3301      	adds	r3, #1
 80005e6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 80005ea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80005ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80005f2:	4413      	add	r3, r2
 80005f4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80005f8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80005fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000600:	3301      	adds	r3, #1
 8000602:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 8000606:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800060a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800060e:	4413      	add	r3, r2
 8000610:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8000614:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8000618:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800061c:	3301      	adds	r3, #1
 800061e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 8000622:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000626:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800062a:	4413      	add	r3, r2
 800062c:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8000630:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8000634:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000638:	3301      	adds	r3, #1
 800063a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 800063e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000642:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000646:	4413      	add	r3, r2
 8000648:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800064c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8000650:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000654:	3301      	adds	r3, #1
 8000656:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800065a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800065e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000662:	4413      	add	r3, r2
 8000664:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8000668:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800066c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000670:	3301      	adds	r3, #1
 8000672:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 8000676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800067a:	2203      	movs	r2, #3
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fd48 	bl	8001114 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000684:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000688:	2218      	movs	r2, #24
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fd41 	bl	8001114 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8000692:	233f      	movs	r3, #63	; 0x3f
 8000694:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8000696:	f44f 7382 	mov.w	r3, #260	; 0x104
 800069a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 80006a2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80006a6:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 80006a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 80006ae:	2303      	movs	r3, #3
 80006b0:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 80006b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fa75 	bl	8000ba8 <hci_send_req>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	da01      	bge.n	80006c8 <aci_gatt_add_char+0x188>
    return BLE_STATUS_TIMEOUT;
 80006c4:	23ff      	movs	r3, #255	; 0xff
 80006c6:	e00c      	b.n	80006e2 <aci_gatt_add_char+0x1a2>

  if (resp.status) {
 80006c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d002      	beq.n	80006d6 <aci_gatt_add_char+0x196>
    return resp.status;
 80006d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80006d4:	e005      	b.n	80006e2 <aci_gatt_add_char+0x1a2>
  }
    
  *charHandle = btohs(resp.handle);
 80006d6:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 80006da:	b29a      	uxth	r2, r3
 80006dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006de:	801a      	strh	r2, [r3, #0]

  return 0;
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3748      	adds	r7, #72	; 0x48
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 80006ea:	b590      	push	{r4, r7, lr}
 80006ec:	b0ab      	sub	sp, #172	; 0xac
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	4604      	mov	r4, r0
 80006f2:	4608      	mov	r0, r1
 80006f4:	4611      	mov	r1, r2
 80006f6:	461a      	mov	r2, r3
 80006f8:	4623      	mov	r3, r4
 80006fa:	80fb      	strh	r3, [r7, #6]
 80006fc:	4603      	mov	r3, r0
 80006fe:	80bb      	strh	r3, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]
 8000704:	4613      	mov	r3, r2
 8000706:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800070e:	78bb      	ldrb	r3, [r7, #2]
 8000710:	3306      	adds	r3, #6
 8000712:	2b80      	cmp	r3, #128	; 0x80
 8000714:	dd01      	ble.n	800071a <aci_gatt_update_char_value+0x30>
    return BLE_STATUS_INVALID_PARAMS;
 8000716:	2342      	movs	r3, #66	; 0x42
 8000718:	e07c      	b.n	8000814 <aci_gatt_update_char_value+0x12a>

  servHandle = htobs(servHandle);
 800071a:	88fb      	ldrh	r3, [r7, #6]
 800071c:	80fb      	strh	r3, [r7, #6]
  Osal_MemCpy(buffer + indx, &servHandle, 2);
 800071e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000722:	f107 0208 	add.w	r2, r7, #8
 8000726:	4413      	add	r3, r2
 8000728:	1db9      	adds	r1, r7, #6
 800072a:	2202      	movs	r2, #2
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fce1 	bl	80010f4 <Osal_MemCpy>
  indx += 2;
 8000732:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000736:	3302      	adds	r3, #2
 8000738:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 800073c:	88bb      	ldrh	r3, [r7, #4]
 800073e:	80bb      	strh	r3, [r7, #4]
  Osal_MemCpy(buffer + indx, &charHandle, 2);
 8000740:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000744:	f107 0208 	add.w	r2, r7, #8
 8000748:	4413      	add	r3, r2
 800074a:	1d39      	adds	r1, r7, #4
 800074c:	2202      	movs	r2, #2
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fcd0 	bl	80010f4 <Osal_MemCpy>
  indx += 2;
 8000754:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000758:	3302      	adds	r3, #2
 800075a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 800075e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000762:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000766:	4413      	add	r3, r2
 8000768:	78fa      	ldrb	r2, [r7, #3]
 800076a:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800076e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000772:	3301      	adds	r3, #1
 8000774:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 8000778:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800077c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000780:	4413      	add	r3, r2
 8000782:	78ba      	ldrb	r2, [r7, #2]
 8000784:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8000788:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800078c:	3301      	adds	r3, #1
 800078e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 8000792:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000796:	f107 0208 	add.w	r2, r7, #8
 800079a:	4413      	add	r3, r2
 800079c:	78ba      	ldrb	r2, [r7, #2]
 800079e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fca6 	bl	80010f4 <Osal_MemCpy>
  indx +=  charValueLen;
 80007a8:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 80007ac:	78bb      	ldrb	r3, [r7, #2]
 80007ae:	4413      	add	r3, r2
 80007b0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  Osal_MemSet(&rq, 0, sizeof(rq));
 80007b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007b8:	2218      	movs	r2, #24
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 fca9 	bl	8001114 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80007c2:	233f      	movs	r3, #63	; 0x3f
 80007c4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 80007c8:	f44f 7383 	mov.w	r3, #262	; 0x106
 80007cc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 80007d8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80007dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 80007e0:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 80007e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 80007e8:	2301      	movs	r3, #1
 80007ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 80007ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 f9d7 	bl	8000ba8 <hci_send_req>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	da01      	bge.n	8000804 <aci_gatt_update_char_value+0x11a>
    return BLE_STATUS_TIMEOUT;
 8000800:	23ff      	movs	r3, #255	; 0xff
 8000802:	e007      	b.n	8000814 <aci_gatt_update_char_value+0x12a>

  if (status) {
 8000804:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8000808:	2b00      	cmp	r3, #0
 800080a:	d002      	beq.n	8000812 <aci_gatt_update_char_value+0x128>
    return status;
 800080c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8000810:	e000      	b.n	8000814 <aci_gatt_update_char_value+0x12a>
  }

  return 0;
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	37ac      	adds	r7, #172	; 0xac
 8000818:	46bd      	mov	sp, r7
 800081a:	bd90      	pop	{r4, r7, pc}

0800081c <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	460a      	mov	r2, r1
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	4613      	mov	r3, r2
 800082a:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8000830:	79bb      	ldrb	r3, [r7, #6]
 8000832:	737b      	strb	r3, [r7, #13]

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000834:	f107 0310 	add.w	r3, r7, #16
 8000838:	2218      	movs	r2, #24
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fc69 	bl	8001114 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8000842:	233f      	movs	r3, #63	; 0x3f
 8000844:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8000846:	230f      	movs	r3, #15
 8000848:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8000850:	2302      	movs	r3, #2
 8000852:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8000854:	f107 030b 	add.w	r3, r7, #11
 8000858:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800085a:	2301      	movs	r3, #1
 800085c:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f000 f99f 	bl	8000ba8 <hci_send_req>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	da01      	bge.n	8000874 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8000870:	23ff      	movs	r3, #255	; 0xff
 8000872:	e000      	b.n	8000876 <aci_hal_set_tx_power_level+0x5a>

  return status;
 8000874:	7afb      	ldrb	r3, [r7, #11]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3728      	adds	r7, #40	; 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <getBlueNRGVersion>:
  
  return ret;
}

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800087e:	b590      	push	{r4, r7, lr}
 8000880:	b089      	sub	sp, #36	; 0x24
 8000882:	af02      	add	r7, sp, #8
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8000888:	f107 0410 	add.w	r4, r7, #16
 800088c:	f107 0215 	add.w	r2, r7, #21
 8000890:	f107 0112 	add.w	r1, r7, #18
 8000894:	f107 0016 	add.w	r0, r7, #22
 8000898:	f107 030e 	add.w	r3, r7, #14
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	4623      	mov	r3, r4
 80008a0:	f000 faac 	bl	8000dfc <hci_le_read_local_version>
 80008a4:	4603      	mov	r3, r0
 80008a6:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 80008a8:	7dfb      	ldrb	r3, [r7, #23]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d126      	bne.n	80008fc <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 80008ae:	8a7b      	ldrh	r3, [r7, #18]
 80008b0:	0a1b      	lsrs	r3, r3, #8
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 80008ba:	8a7b      	ldrh	r3, [r7, #18]
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	b29a      	uxth	r2, r3
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	b21a      	sxth	r2, r3
 80008ca:	89fb      	ldrh	r3, [r7, #14]
 80008cc:	091b      	lsrs	r3, r3, #4
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	011b      	lsls	r3, r3, #4
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	4313      	orrs	r3, r2
 80008da:	b21b      	sxth	r3, r3
 80008dc:	b29a      	uxth	r2, r3
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	89fb      	ldrh	r3, [r7, #14]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	f003 030f 	and.w	r3, r3, #15
 80008f0:	b21b      	sxth	r3, r3
 80008f2:	4313      	orrs	r3, r2
 80008f4:	b21b      	sxth	r3, r3
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	801a      	strh	r2, [r3, #0]
  }

  return status;
 80008fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	371c      	adds	r7, #28
 8000902:	46bd      	mov	sp, r7
 8000904:	bd90      	pop	{r4, r7, pc}
	...

08000908 <HCI_Init>:
  hci_timeout = 1;
  return;
}

void HCI_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  uint8_t index;
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head (&hciReadPktPool);
 800090e:	480e      	ldr	r0, [pc, #56]	; (8000948 <HCI_Init+0x40>)
 8000910:	f000 fabe 	bl	8000e90 <list_init_head>
  list_init_head (&hciReadPktRxQueue);
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <HCI_Init+0x44>)
 8000916:	f000 fabb 	bl	8000e90 <list_init_head>
  
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800091a:	2300      	movs	r3, #0
 800091c:	71fb      	strb	r3, [r7, #7]
 800091e:	e00c      	b.n	800093a <HCI_Init+0x32>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	228c      	movs	r2, #140	; 0x8c
 8000924:	fb02 f303 	mul.w	r3, r2, r3
 8000928:	4a09      	ldr	r2, [pc, #36]	; (8000950 <HCI_Init+0x48>)
 800092a:	4413      	add	r3, r2
 800092c:	4619      	mov	r1, r3
 800092e:	4806      	ldr	r0, [pc, #24]	; (8000948 <HCI_Init+0x40>)
 8000930:	f000 fb02 	bl	8000f38 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	3301      	adds	r3, #1
 8000938:	71fb      	strb	r3, [r7, #7]
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b04      	cmp	r3, #4
 800093e:	d9ef      	bls.n	8000920 <HCI_Init+0x18>
  }
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200003f0 	.word	0x200003f0
 800094c:	200003f8 	.word	0x200003f8
 8000950:	20000024 	.word	0x20000024

08000954 <HCI_verify>:
 *
 * @param[in] hciReadPacket    The packet that is received from HCI interface.
 * @return 0 if HCI packet is as expected
 */
int HCI_verify(const tHciDataPacket * hciReadPacket)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3308      	adds	r3, #8
 8000960:	60fb      	str	r3, [r7, #12]
  
  if(hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b04      	cmp	r3, #4
 8000968:	d001      	beq.n	800096e <HCI_verify+0x1a>
    return 1;  /* Incorrect type. */
 800096a:	2301      	movs	r3, #1
 800096c:	e00c      	b.n	8000988 <HCI_verify+0x34>
  
  if(hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	3302      	adds	r3, #2
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800097c:	3b03      	subs	r3, #3
 800097e:	429a      	cmp	r2, r3
 8000980:	d001      	beq.n	8000986 <HCI_verify+0x32>
    return 2; /* Wrong length (packet truncated or too long). */
 8000982:	2302      	movs	r3, #2
 8000984:	e000      	b.n	8000988 <HCI_verify+0x34>
  
  return 0;      
 8000986:	2300      	movs	r3, #0
}
 8000988:	4618      	mov	r0, r3
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <HCI_Process>:

void HCI_Process(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
  
  Disable_SPI_IRQ();
 800099e:	f000 fe9e 	bl	80016de <Disable_SPI_IRQ>
  uint8_t list_empty = list_is_empty(&hciReadPktRxQueue);        
 80009a2:	4814      	ldr	r0, [pc, #80]	; (80009f4 <HCI_Process+0x60>)
 80009a4:	f000 fa84 	bl	8000eb0 <list_is_empty>
 80009a8:	4603      	mov	r3, r0
 80009aa:	71fb      	strb	r3, [r7, #7]
  /* process any pending events read */
  while(list_empty == FALSE)
 80009ac:	e017      	b.n	80009de <HCI_Process+0x4a>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80009ae:	463b      	mov	r3, r7
 80009b0:	4619      	mov	r1, r3
 80009b2:	4810      	ldr	r0, [pc, #64]	; (80009f4 <HCI_Process+0x60>)
 80009b4:	f000 fb03 	bl	8000fbe <list_remove_head>
    Enable_SPI_IRQ();
 80009b8:	f000 fe8a 	bl	80016d0 <Enable_SPI_IRQ>
    HCI_Event_CB(hciReadPacket->dataBuff);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	3308      	adds	r3, #8
 80009c0:	4618      	mov	r0, r3
 80009c2:	f003 fd56 	bl	8004472 <HCI_Event_CB>
    Disable_SPI_IRQ();
 80009c6:	f000 fe8a 	bl	80016de <Disable_SPI_IRQ>
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	4619      	mov	r1, r3
 80009ce:	480a      	ldr	r0, [pc, #40]	; (80009f8 <HCI_Process+0x64>)
 80009d0:	f000 fab2 	bl	8000f38 <list_insert_tail>
    list_empty = list_is_empty(&hciReadPktRxQueue);
 80009d4:	4807      	ldr	r0, [pc, #28]	; (80009f4 <HCI_Process+0x60>)
 80009d6:	f000 fa6b 	bl	8000eb0 <list_is_empty>
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
  while(list_empty == FALSE)
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d0e4      	beq.n	80009ae <HCI_Process+0x1a>
  }
  /* Explicit call to HCI_Isr(), since it cannot be called by ISR if IRQ is kept high by
  BlueNRG. */
  HCI_Isr();
 80009e4:	f000 f814 	bl	8000a10 <HCI_Isr>
  Enable_SPI_IRQ();    
 80009e8:	f000 fe72 	bl	80016d0 <Enable_SPI_IRQ>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200003f8 	.word	0x200003f8
 80009f8:	200003f0 	.word	0x200003f0

080009fc <HCI_Queue_Empty>:

BOOL HCI_Queue_Empty(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  return list_is_empty(&hciReadPktRxQueue);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <HCI_Queue_Empty+0x10>)
 8000a02:	f000 fa55 	bl	8000eb0 <list_is_empty>
 8000a06:	4603      	mov	r3, r0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200003f8 	.word	0x200003f8

08000a10 <HCI_Isr>:

void HCI_Isr(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	603b      	str	r3, [r7, #0]
  uint8_t data_len;
  
  Clear_SPI_EXTI_Flag();
 8000a1a:	f000 fe67 	bl	80016ec <Clear_SPI_EXTI_Flag>
  while(BlueNRG_DataPresent()){        
 8000a1e:	e037      	b.n	8000a90 <HCI_Isr+0x80>
    if (list_is_empty (&hciReadPktPool) == FALSE){
 8000a20:	481f      	ldr	r0, [pc, #124]	; (8000aa0 <HCI_Isr+0x90>)
 8000a22:	f000 fa45 	bl	8000eb0 <list_is_empty>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d12c      	bne.n	8000a86 <HCI_Isr+0x76>
      
      /* enqueueing a packet for read */
      list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	481b      	ldr	r0, [pc, #108]	; (8000aa0 <HCI_Isr+0x90>)
 8000a32:	f000 fac4 	bl	8000fbe <list_remove_head>
      
      data_len = BlueNRG_SPI_Read_All(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	3308      	adds	r3, #8
 8000a3a:	2180      	movs	r1, #128	; 0x80
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 fcdf 	bl	8001400 <BlueNRG_SPI_Read_All>
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
      if(data_len > 0){                    
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d016      	beq.n	8000a7a <HCI_Isr+0x6a>
        hciReadPacket->data_len = data_len;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	79fa      	ldrb	r2, [r7, #7]
 8000a50:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if(HCI_verify(hciReadPacket) == 0)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff ff7c 	bl	8000954 <HCI_verify>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d105      	bne.n	8000a6e <HCI_Isr+0x5e>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <HCI_Isr+0x94>)
 8000a68:	f000 fa66 	bl	8000f38 <list_insert_tail>
 8000a6c:	e00e      	b.n	8000a8c <HCI_Isr+0x7c>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	4619      	mov	r1, r3
 8000a72:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <HCI_Isr+0x90>)
 8000a74:	f000 fa3c 	bl	8000ef0 <list_insert_head>
 8000a78:	e008      	b.n	8000a8c <HCI_Isr+0x7c>
      }
      else {
        // Insert the packet back into the pool.
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <HCI_Isr+0x90>)
 8000a80:	f000 fa36 	bl	8000ef0 <list_insert_head>
 8000a84:	e002      	b.n	8000a8c <HCI_Isr+0x7c>
      }
      
    }
    else{
      // HCI Read Packet Pool is empty, wait for a free packet.
      Clear_SPI_EXTI_Flag();
 8000a86:	f000 fe31 	bl	80016ec <Clear_SPI_EXTI_Flag>
 8000a8a:	e006      	b.n	8000a9a <HCI_Isr+0x8a>
      return;
    }
    
    Clear_SPI_EXTI_Flag();
 8000a8c:	f000 fe2e 	bl	80016ec <Clear_SPI_EXTI_Flag>
  while(BlueNRG_DataPresent()){        
 8000a90:	f000 fca6 	bl	80013e0 <BlueNRG_DataPresent>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d1c2      	bne.n	8000a20 <HCI_Isr+0x10>
  }
}
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200003f0 	.word	0x200003f0
 8000aa4:	200003f8 	.word	0x200003f8

08000aa8 <hci_write>:

void hci_write(const void* data1, const void* data2, uint8_t n_bytes1, uint8_t n_bytes2){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	71fb      	strb	r3, [r7, #7]
 8000aba:	4613      	mov	r3, r2
 8000abc:	71bb      	strb	r3, [r7, #6]
  for(int i=0; i < n_bytes2; i++)
    PRINTF("%02X ", *((uint8_t*)data2 + i));
  PRINTF("\n");    
#endif
  
  Hal_Write_Serial(data1, data2, n_bytes1, n_bytes2);
 8000abe:	79fa      	ldrb	r2, [r7, #7]
 8000ac0:	79bb      	ldrb	r3, [r7, #6]
 8000ac2:	68b9      	ldr	r1, [r7, #8]
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	f000 fc15 	bl	80012f4 <Hal_Write_Serial>
}
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <hci_send_cmd>:

void hci_send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b086      	sub	sp, #24
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4603      	mov	r3, r0
 8000adc:	81fb      	strh	r3, [r7, #14]
 8000ade:	460b      	mov	r3, r1
 8000ae0:	81bb      	strh	r3, [r7, #12]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	72fb      	strb	r3, [r7, #11]
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8000ae6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000aee:	b21a      	sxth	r2, r3
 8000af0:	89fb      	ldrh	r3, [r7, #14]
 8000af2:	029b      	lsls	r3, r3, #10
 8000af4:	b21b      	sxth	r3, r3
 8000af6:	4313      	orrs	r3, r2
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	82bb      	strh	r3, [r7, #20]
  hc.plen= plen;
 8000afe:	7afb      	ldrb	r3, [r7, #11]
 8000b00:	75bb      	strb	r3, [r7, #22]
  
  uint8_t header[HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE];
  header[0] = HCI_COMMAND_PKT;
 8000b02:	2301      	movs	r3, #1
 8000b04:	743b      	strb	r3, [r7, #16]
  Osal_MemCpy(header+1, &hc, sizeof(hc));
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	f107 0114 	add.w	r1, r7, #20
 8000b10:	2203      	movs	r2, #3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 faee 	bl	80010f4 <Osal_MemCpy>
  
  hci_write(header, param, sizeof(header), plen);
 8000b18:	7afb      	ldrb	r3, [r7, #11]
 8000b1a:	f107 0010 	add.w	r0, r7, #16
 8000b1e:	2204      	movs	r2, #4
 8000b20:	6879      	ldr	r1, [r7, #4]
 8000b22:	f7ff ffc1 	bl	8000aa8 <hci_write>
}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <move_list>:

static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b084      	sub	sp, #16
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while(!list_is_empty(src_list)){
 8000b38:	e00a      	b.n	8000b50 <move_list+0x22>
    list_remove_tail(src_list, &tmp_node);
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	4619      	mov	r1, r3
 8000b40:	6838      	ldr	r0, [r7, #0]
 8000b42:	f000 fa61 	bl	8001008 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 f9d0 	bl	8000ef0 <list_insert_head>
  while(!list_is_empty(src_list)){
 8000b50:	6838      	ldr	r0, [r7, #0]
 8000b52:	f000 f9ad 	bl	8000eb0 <list_is_empty>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d0ee      	beq.n	8000b3a <move_list+0xc>
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <free_event_list>:

 /* It ensures that we have at least half of the free buffers in the pool. */
static void free_event_list(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;
    
  Disable_SPI_IRQ();
 8000b6a:	f000 fdb8 	bl	80016de <Disable_SPI_IRQ>
  
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8000b6e:	e00b      	b.n	8000b88 <free_event_list+0x24>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	4619      	mov	r1, r3
 8000b74:	480a      	ldr	r0, [pc, #40]	; (8000ba0 <free_event_list+0x3c>)
 8000b76:	f000 fa22 	bl	8000fbe <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4809      	ldr	r0, [pc, #36]	; (8000ba4 <free_event_list+0x40>)
 8000b80:	f000 f9da 	bl	8000f38 <list_insert_tail>
    /* Explicit call to HCI_Isr(), since it cannot be called by ISR if IRQ is kept high by
    BlueNRG */
    HCI_Isr();
 8000b84:	f7ff ff44 	bl	8000a10 <HCI_Isr>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8000b88:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <free_event_list+0x40>)
 8000b8a:	f000 fa62 	bl	8001052 <list_get_size>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	dded      	ble.n	8000b70 <free_event_list+0xc>
  }
  
  Enable_SPI_IRQ();
 8000b94:	f000 fd9c 	bl	80016d0 <Enable_SPI_IRQ>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200003f8 	.word	0x200003f8
 8000ba4:	200003f0 	.word	0x200003f0

08000ba8 <hci_send_req>:

int hci_send_req(struct hci_request *r, BOOL async)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b090      	sub	sp, #64	; 0x40
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	885b      	ldrh	r3, [r3, #2]
 8000bb8:	b21b      	sxth	r3, r3
 8000bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bbe:	b21a      	sxth	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	029b      	lsls	r3, r3, #10
 8000bc6:	b21b      	sxth	r3, r3
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	877b      	strh	r3, [r7, #58]	; 0x3a
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;
  int to = DEFAULT_TIMEOUT;
 8000bce:	2364      	movs	r3, #100	; 0x64
 8000bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  struct timer t;
  tHciDataPacket * hciReadPacket = NULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f958 	bl	8000e90 <list_init_head>

  free_event_list();
 8000be0:	f7ff ffc0 	bl	8000b64 <free_event_list>
  
  hci_send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	8818      	ldrh	r0, [r3, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	8859      	ldrh	r1, [r3, #2]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	f7ff ff6c 	bl	8000ad2 <hci_send_cmd>
  
  if(async){
 8000bfa:	78fb      	ldrb	r3, [r7, #3]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <hci_send_req+0x5c>
    return 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	e0f3      	b.n	8000dec <hci_send_req+0x244>
  }
  
  /* Minimum timeout is 1. */
  if(to == 0)
 8000c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <hci_send_req+0x66>
    to = 1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  Timer_Set(&t, to);
 8000c0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4611      	mov	r1, r2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 fa41 	bl	800109e <Timer_Set>
    evt_cmd_status *cs;
    evt_le_meta_event *me;
    int len;
      
    while(1){
      if(Timer_Expired(&t)){
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 fa4e 	bl	80010c2 <Timer_Expired>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f040 80b7 	bne.w	8000d9c <hci_send_req+0x1f4>
        goto failed;
      }
      if(!HCI_Queue_Empty()){
 8000c2e:	f7ff fee5 	bl	80009fc <HCI_Queue_Empty>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d000      	beq.n	8000c3a <hci_send_req+0x92>
      if(Timer_Expired(&t)){
 8000c38:	e7f0      	b.n	8000c1c <hci_send_req+0x74>
        break;
 8000c3a:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    Disable_SPI_IRQ();
 8000c3c:	f000 fd4f 	bl	80016de <Disable_SPI_IRQ>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	4619      	mov	r1, r3
 8000c46:	486b      	ldr	r0, [pc, #428]	; (8000df4 <hci_send_req+0x24c>)
 8000c48:	f000 f9b9 	bl	8000fbe <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	3308      	adds	r3, #8
 8000c50:	637b      	str	r3, [r7, #52]	; 0x34

    if(hci_hdr->type == HCI_EVENT_PKT){
 8000c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d17e      	bne.n	8000d58 <hci_send_req+0x1b0>
    
    event_pckt = (void *) (hci_hdr->data);
 8000c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	633b      	str	r3, [r7, #48]	; 0x30
    
    ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	3308      	adds	r3, #8
 8000c64:	3303      	adds	r3, #3
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8000c6e:	3b03      	subs	r3, #3
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
    
    switch (event_pckt->evt) {
 8000c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b0f      	cmp	r3, #15
 8000c78:	d00a      	beq.n	8000c90 <hci_send_req+0xe8>
 8000c7a:	2b0f      	cmp	r3, #15
 8000c7c:	dc02      	bgt.n	8000c84 <hci_send_req+0xdc>
 8000c7e:	2b0e      	cmp	r3, #14
 8000c80:	d029      	beq.n	8000cd6 <hci_send_req+0x12e>
      
    case EVT_HARDWARE_ERROR:            
      goto failed;
      
    default:      
      break;
 8000c82:	e069      	b.n	8000d58 <hci_send_req+0x1b0>
    switch (event_pckt->evt) {
 8000c84:	2b10      	cmp	r3, #16
 8000c86:	f000 808b 	beq.w	8000da0 <hci_send_req+0x1f8>
 8000c8a:	2b3e      	cmp	r3, #62	; 0x3e
 8000c8c:	d043      	beq.n	8000d16 <hci_send_req+0x16e>
      break;
 8000c8e:	e063      	b.n	8000d58 <hci_send_req+0x1b0>
      cs = (void *) ptr;
 8000c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
      if (cs->opcode != opcode)
 8000c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c96:	885b      	ldrh	r3, [r3, #2]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f040 8081 	bne.w	8000da4 <hci_send_req+0x1fc>
      if (r->event != EVT_CMD_STATUS) {
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	2b0f      	cmp	r3, #15
 8000ca8:	d004      	beq.n	8000cb4 <hci_send_req+0x10c>
        if (cs->status) {
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d04f      	beq.n	8000d52 <hci_send_req+0x1aa>
          goto failed;
 8000cb2:	e07a      	b.n	8000daa <hci_send_req+0x202>
      r->rlen = MIN(len, r->rlen);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	695a      	ldr	r2, [r3, #20]
 8000cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	bfa8      	it	ge
 8000cbe:	461a      	movge	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	615a      	str	r2, [r3, #20]
      Osal_MemCpy(r->rparam, ptr, r->rlen);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6918      	ldr	r0, [r3, #16]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000cd0:	f000 fa10 	bl	80010f4 <Osal_MemCpy>
      goto done;
 8000cd4:	e07c      	b.n	8000dd0 <hci_send_req+0x228>
      cc = (void *) ptr;
 8000cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd8:	61fb      	str	r3, [r7, #28]
      if (cc->opcode != opcode)
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d15f      	bne.n	8000da8 <hci_send_req+0x200>
      ptr += EVT_CMD_COMPLETE_SIZE;
 8000ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cea:	3303      	adds	r3, #3
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
      len -= EVT_CMD_COMPLETE_SIZE;
 8000cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
      r->rlen = MIN(len, r->rlen);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	695a      	ldr	r2, [r3, #20]
 8000cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	bfa8      	it	ge
 8000cfe:	461a      	movge	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	615a      	str	r2, [r3, #20]
      Osal_MemCpy(r->rparam, ptr, r->rlen);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6918      	ldr	r0, [r3, #16]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d10:	f000 f9f0 	bl	80010f4 <Osal_MemCpy>
      goto done;
 8000d14:	e05c      	b.n	8000dd0 <hci_send_req+0x228>
      me = (void *) ptr;
 8000d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d18:	623b      	str	r3, [r7, #32]
      if (me->subevent != r->event)
 8000d1a:	6a3b      	ldr	r3, [r7, #32]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d116      	bne.n	8000d56 <hci_send_req+0x1ae>
      len -= 1;
 8000d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
      r->rlen = MIN(len, r->rlen);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	695a      	ldr	r2, [r3, #20]
 8000d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d34:	429a      	cmp	r2, r3
 8000d36:	bfa8      	it	ge
 8000d38:	461a      	movge	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	615a      	str	r2, [r3, #20]
      Osal_MemCpy(r->rparam, me->data, r->rlen);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6918      	ldr	r0, [r3, #16]
 8000d42:	6a3b      	ldr	r3, [r7, #32]
 8000d44:	1c59      	adds	r1, r3, #1
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	f000 f9d2 	bl	80010f4 <Osal_MemCpy>
      goto done;
 8000d50:	e03e      	b.n	8000dd0 <hci_send_req+0x228>
        break;
 8000d52:	bf00      	nop
 8000d54:	e000      	b.n	8000d58 <hci_send_req+0x1b0>
        break;
 8000d56:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if(list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)){
 8000d58:	4827      	ldr	r0, [pc, #156]	; (8000df8 <hci_send_req+0x250>)
 8000d5a:	f000 f8a9 	bl	8000eb0 <list_is_empty>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d00d      	beq.n	8000d80 <hci_send_req+0x1d8>
 8000d64:	4823      	ldr	r0, [pc, #140]	; (8000df4 <hci_send_req+0x24c>)
 8000d66:	f000 f8a3 	bl	8000eb0 <list_is_empty>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d007      	beq.n	8000d80 <hci_send_req+0x1d8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	4619      	mov	r1, r3
 8000d74:	4820      	ldr	r0, [pc, #128]	; (8000df8 <hci_send_req+0x250>)
 8000d76:	f000 f8df 	bl	8000f38 <list_insert_tail>
      hciReadPacket=NULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	e008      	b.n	8000d92 <hci_send_req+0x1ea>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 f8d5 	bl	8000f38 <list_insert_tail>
      hciReadPacket=NULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
    }

    HCI_Isr();
 8000d92:	f7ff fe3d 	bl	8000a10 <HCI_Isr>
    
    Enable_SPI_IRQ();
 8000d96:	f000 fc9b 	bl	80016d0 <Enable_SPI_IRQ>
  while(1) {
 8000d9a:	e73f      	b.n	8000c1c <hci_send_req+0x74>
        goto failed;
 8000d9c:	bf00      	nop
 8000d9e:	e004      	b.n	8000daa <hci_send_req+0x202>
      goto failed;
 8000da0:	bf00      	nop
 8000da2:	e002      	b.n	8000daa <hci_send_req+0x202>
        goto failed;
 8000da4:	bf00      	nop
 8000da6:	e000      	b.n	8000daa <hci_send_req+0x202>
        goto failed;
 8000da8:	bf00      	nop
    
  }
  
failed: 
  if(hciReadPacket!=NULL){
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d004      	beq.n	8000dba <hci_send_req+0x212>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	4619      	mov	r1, r3
 8000db4:	4810      	ldr	r0, [pc, #64]	; (8000df8 <hci_send_req+0x250>)
 8000db6:	f000 f89b 	bl	8000ef0 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <hci_send_req+0x24c>)
 8000dc2:	f7ff feb4 	bl	8000b2e <move_list>
  Enable_SPI_IRQ();
 8000dc6:	f000 fc83 	bl	80016d0 <Enable_SPI_IRQ>
  return -1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dce:	e00d      	b.n	8000dec <hci_send_req+0x244>
  
done:
  // Insert the packet back into the pool.
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4808      	ldr	r0, [pc, #32]	; (8000df8 <hci_send_req+0x250>)
 8000dd6:	f000 f88b 	bl	8000ef0 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	4619      	mov	r1, r3
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <hci_send_req+0x24c>)
 8000de2:	f7ff fea4 	bl	8000b2e <move_list>
  
  Enable_SPI_IRQ();
 8000de6:	f000 fc73 	bl	80016d0 <Enable_SPI_IRQ>
  return 0;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3740      	adds	r7, #64	; 0x40
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200003f8 	.word	0x200003f8
 8000df8:	200003f0 	.word	0x200003f0

08000dfc <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08e      	sub	sp, #56	; 0x38
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
 8000e08:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  Osal_MemSet(&resp, 0, sizeof(resp));
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	2209      	movs	r2, #9
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f97e 	bl	8001114 <Osal_MemSet>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 8000e18:	f107 0320 	add.w	r3, r7, #32
 8000e1c:	2218      	movs	r2, #24
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 f977 	bl	8001114 <Osal_MemSet>
  rq.ogf = OGF_INFO_PARAM;
 8000e26:	2304      	movs	r3, #4
 8000e28:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8000e3c:	2309      	movs	r3, #9
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8000e40:	f107 0320 	add.w	r3, r7, #32
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff feae 	bl	8000ba8 <hci_send_req>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	da01      	bge.n	8000e56 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8000e52:	23ff      	movs	r3, #255	; 0xff
 8000e54:	e018      	b.n	8000e88 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8000e56:	7d3b      	ldrb	r3, [r7, #20]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <hci_le_read_local_version+0x64>
    return resp.status;
 8000e5c:	7d3b      	ldrb	r3, [r7, #20]
 8000e5e:	e013      	b.n	8000e88 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8000e60:	7d7a      	ldrb	r2, [r7, #21]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8000e66:	8afa      	ldrh	r2, [r7, #22]
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8000e6c:	7e3a      	ldrb	r2, [r7, #24]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8000e72:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8000e7c:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e84:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3738      	adds	r7, #56	; 0x38
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	605a      	str	r2, [r3, #4]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b087      	sub	sp, #28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8000ebc:	60fb      	str	r3, [r7, #12]
  return(result);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uint8_t return_value;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000ec0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec2:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d102      	bne.n	8000ed4 <list_is_empty+0x24>
  {
    return_value = TRUE;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	75fb      	strb	r3, [r7, #23]
 8000ed2:	e001      	b.n	8000ed8 <list_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	75fb      	strb	r3, [r7, #23]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8000ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	371c      	adds	r7, #28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000efa:	f3ef 8310 	mrs	r3, PRIMASK
 8000efe:	60fb      	str	r3, [r7, #12]
  return(result);
 8000f00:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000f02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	683a      	ldr	r2, [r7, #0]
 8000f18:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8000f2c:	bf00      	nop
 8000f2e:	371c      	adds	r7, #28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000f42:	f3ef 8310 	mrs	r3, PRIMASK
 8000f46:	60fb      	str	r3, [r7, #12]
  return(result);
 8000f48:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000f4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8000f74:	bf00      	nop
 8000f76:	371c      	adds	r7, #28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000f88:	f3ef 8310 	mrs	r3, PRIMASK
 8000f8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000f90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f92:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	6812      	ldr	r2, [r2, #0]
 8000f9c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	6852      	ldr	r2, [r2, #4]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8000fb2:	bf00      	nop
 8000fb4:	371c      	adds	r7, #28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8000fcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8000fce:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000fd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd2:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ffcd 	bl	8000f80 <list_remove_node>
  (*node)->next = NULL;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001012:	f3ef 8310 	mrs	r3, PRIMASK
 8001016:	60fb      	str	r3, [r7, #12]
  return(result);
 8001018:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800101a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ffa8 	bl	8000f80 <list_remove_node>
  (*node)->next = NULL;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8001052:	b480      	push	{r7}
 8001054:	b089      	sub	sp, #36	; 0x24
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  int size = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800105e:	f3ef 8310 	mrs	r3, PRIMASK
 8001062:	613b      	str	r3, [r7, #16]
  return(result);
 8001064:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001066:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001068:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8001070:	e005      	b.n	800107e <list_get_size+0x2c>
  {
    size++;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3301      	adds	r3, #1
 8001076:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	429a      	cmp	r2, r3
 8001084:	d1f5      	bne.n	8001072 <list_get_size+0x20>
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  return (size);
 8001090:	69fb      	ldr	r3, [r7, #28]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <Timer_Set>:
 * @param[in] interval  The interval before the timer expires.
 *
 */
void
Timer_Set(struct timer *t, tClockTime interval)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
  t->interval = interval;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	605a      	str	r2, [r3, #4]
  t->start = Clock_Time();
 80010ae:	f000 fb45 	bl	800173c <HAL_GetTick>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461a      	mov	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	601a      	str	r2, [r3, #0]
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <Timer_Expired>:
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
int
Timer_Expired(struct timer *t)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  /* Note: Can not return diff >= t->interval so we add 1 to diff and return
     t->interval < diff - required to avoid an internal error in mspgcc. */
  tClockTime diff = (Clock_Time() - t->start) + 1;
 80010ca:	f000 fb37 	bl	800173c <HAL_GetTick>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	3301      	adds	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
  return t->interval < diff;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	bf34      	ite	cc
 80010e6:	2301      	movcc	r3, #1
 80010e8:	2300      	movcs	r3, #0
 80010ea:	b2db      	uxtb	r3, r3

}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <Osal_MemCpy>:
 /**
 * Osal_MemCpy
 * 
 */
void* Osal_MemCpy(void *dest, const void *src, unsigned int size)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
    return(memcpy(dest,src,size)); 
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	68b9      	ldr	r1, [r7, #8]
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f003 fc29 	bl	800495c <memcpy>
 800110a:	4603      	mov	r3, r0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <Osal_MemSet>:
/**
 * Osal_MemSet
 * 
 */
void* Osal_MemSet(void *ptr, int value, unsigned int size)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
    return(memset(ptr,value,size));
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	68b9      	ldr	r1, [r7, #8]
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f003 fc24 	bl	8004972 <memset>
 800112a:	4603      	mov	r3, r0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_SPI_MspInit>:
*         communication with the BlueNRG Expansion Board.
* @param  hspi: SPI handle.
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08e      	sub	sp, #56	; 0x38
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==BNRG_SPI_INSTANCE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a66      	ldr	r2, [pc, #408]	; (80012dc <HAL_SPI_MspInit+0x1a8>)
 8001142:	4293      	cmp	r3, r2
 8001144:	f040 80c6 	bne.w	80012d4 <HAL_SPI_MspInit+0x1a0>
  {
    /* Enable peripherals clock */
    
    /* Enable GPIO Ports Clock */  
    BNRG_SPI_RESET_CLK_ENABLE();
 8001148:	4a65      	ldr	r2, [pc, #404]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 800114a:	4b65      	ldr	r3, [pc, #404]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001154:	4b62      	ldr	r3, [pc, #392]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115c:	623b      	str	r3, [r7, #32]
 800115e:	6a3b      	ldr	r3, [r7, #32]
    BNRG_SPI_SCLK_CLK_ENABLE();
 8001160:	4a5f      	ldr	r2, [pc, #380]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 8001162:	4b5f      	ldr	r3, [pc, #380]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116c:	4b5c      	ldr	r3, [pc, #368]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	69fb      	ldr	r3, [r7, #28]
    BNRG_SPI_MISO_CLK_ENABLE();
 8001178:	4a59      	ldr	r2, [pc, #356]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 800117a:	4b59      	ldr	r3, [pc, #356]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001184:	4b56      	ldr	r3, [pc, #344]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
 800118e:	69bb      	ldr	r3, [r7, #24]
    BNRG_SPI_MOSI_CLK_ENABLE();
 8001190:	4a53      	ldr	r2, [pc, #332]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 8001192:	4b53      	ldr	r3, [pc, #332]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119c:	4b50      	ldr	r3, [pc, #320]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 800119e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	697b      	ldr	r3, [r7, #20]
    BNRG_SPI_CS_CLK_ENABLE();
 80011a8:	4a4d      	ldr	r2, [pc, #308]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 80011aa:	4b4d      	ldr	r3, [pc, #308]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	f043 0302 	orr.w	r3, r3, #2
 80011b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b4:	4b4a      	ldr	r3, [pc, #296]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	693b      	ldr	r3, [r7, #16]
    BNRG_SPI_IRQ_CLK_ENABLE();
 80011c0:	4a47      	ldr	r2, [pc, #284]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 80011c2:	4b47      	ldr	r3, [pc, #284]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011cc:	4b44      	ldr	r3, [pc, #272]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable SPI clock */
    BNRG_SPI_CLK_ENABLE();
 80011d8:	4a41      	ldr	r2, [pc, #260]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 80011da:	4b41      	ldr	r3, [pc, #260]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 80011dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011e2:	6613      	str	r3, [r2, #96]	; 0x60
 80011e4:	4b3e      	ldr	r3, [pc, #248]	; (80012e0 <HAL_SPI_MspInit+0x1ac>)
 80011e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
    
    /* Reset */
    GPIO_InitStruct.Pin = BNRG_SPI_RESET_PIN;
 80011f0:	2301      	movs	r3, #1
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = BNRG_SPI_RESET_MODE;
 80011f4:	2301      	movs	r3, #1
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = BNRG_SPI_RESET_PULL;
 80011f8:	2301      	movs	r3, #1
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = BNRG_SPI_RESET_SPEED;
 80011fc:	2300      	movs	r3, #0
 80011fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = BNRG_SPI_RESET_ALTERNATE;
 8001200:	2300      	movs	r3, #0
 8001202:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(BNRG_SPI_RESET_PORT, &GPIO_InitStruct);	
 8001204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001208:	4619      	mov	r1, r3
 800120a:	4836      	ldr	r0, [pc, #216]	; (80012e4 <HAL_SPI_MspInit+0x1b0>)
 800120c:	f000 fbc4 	bl	8001998 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);	/*Added to avoid spurious interrupt from the BlueNRG */
 8001210:	2200      	movs	r2, #0
 8001212:	2101      	movs	r1, #1
 8001214:	4833      	ldr	r0, [pc, #204]	; (80012e4 <HAL_SPI_MspInit+0x1b0>)
 8001216:	f000 fd83 	bl	8001d20 <HAL_GPIO_WritePin>
    
    /* SCLK */
    GPIO_InitStruct.Pin = BNRG_SPI_SCLK_PIN;
 800121a:	2320      	movs	r3, #32
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = BNRG_SPI_SCLK_MODE;
 800121e:	2302      	movs	r3, #2
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = BNRG_SPI_SCLK_PULL;
 8001222:	2302      	movs	r3, #2
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = BNRG_SPI_SCLK_SPEED;
 8001226:	2303      	movs	r3, #3
 8001228:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = BNRG_SPI_SCLK_ALTERNATE;
 800122a:	2305      	movs	r3, #5
 800122c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
 800122e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001232:	4619      	mov	r1, r3
 8001234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001238:	f000 fbae 	bl	8001998 <HAL_GPIO_Init>
    
    /* MISO */
    GPIO_InitStruct.Pin = BNRG_SPI_MISO_PIN;
 800123c:	2340      	movs	r3, #64	; 0x40
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = BNRG_SPI_MISO_MODE;
 8001240:	2302      	movs	r3, #2
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = BNRG_SPI_MISO_PULL;
 8001244:	2300      	movs	r3, #0
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = BNRG_SPI_MISO_SPEED;
 8001248:	2303      	movs	r3, #3
 800124a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = BNRG_SPI_MISO_ALTERNATE;
 800124c:	2305      	movs	r3, #5
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f000 fb9d 	bl	8001998 <HAL_GPIO_Init>
    
    /* MOSI */
    GPIO_InitStruct.Pin = BNRG_SPI_MOSI_PIN;
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = BNRG_SPI_MOSI_MODE;
 8001262:	2302      	movs	r3, #2
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = BNRG_SPI_MOSI_PULL;
 8001266:	2300      	movs	r3, #0
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = BNRG_SPI_MOSI_SPEED;
 800126a:	2303      	movs	r3, #3
 800126c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = BNRG_SPI_MOSI_ALTERNATE;
 800126e:	2305      	movs	r3, #5
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
 8001272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001276:	4619      	mov	r1, r3
 8001278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127c:	f000 fb8c 	bl	8001998 <HAL_GPIO_Init>
    
    /* NSS/CSN/CS */
    GPIO_InitStruct.Pin = BNRG_SPI_CS_PIN;
 8001280:	2304      	movs	r3, #4
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = BNRG_SPI_CS_MODE;
 8001284:	2301      	movs	r3, #1
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = BNRG_SPI_CS_PULL;
 8001288:	2301      	movs	r3, #1
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = BNRG_SPI_CS_SPEED;
 800128c:	2303      	movs	r3, #3
 800128e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = BNRG_SPI_CS_ALTERNATE;
 8001290:	2300      	movs	r3, #0
 8001292:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
 8001294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001298:	4619      	mov	r1, r3
 800129a:	4813      	ldr	r0, [pc, #76]	; (80012e8 <HAL_SPI_MspInit+0x1b4>)
 800129c:	f000 fb7c 	bl	8001998 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2104      	movs	r1, #4
 80012a4:	4810      	ldr	r0, [pc, #64]	; (80012e8 <HAL_SPI_MspInit+0x1b4>)
 80012a6:	f000 fd3b 	bl	8001d20 <HAL_GPIO_WritePin>
    
    /* IRQ -- INPUT */
    GPIO_InitStruct.Pin = BNRG_SPI_IRQ_PIN;
 80012aa:	2320      	movs	r3, #32
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = BNRG_SPI_IRQ_MODE;
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <HAL_SPI_MspInit+0x1b8>)
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = BNRG_SPI_IRQ_PULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = BNRG_SPI_IRQ_SPEED;
 80012b6:	2303      	movs	r3, #3
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = BNRG_SPI_IRQ_ALTERNATE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
 80012be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c2:	4619      	mov	r1, r3
 80012c4:	480a      	ldr	r0, [pc, #40]	; (80012f0 <HAL_SPI_MspInit+0x1bc>)
 80012c6:	f000 fb67 	bl	8001998 <HAL_GPIO_Init>
    
    /* Configure the NVIC for SPI */  
    HAL_NVIC_SetPriority(BNRG_SPI_EXTI_IRQn, 3, 0);    
 80012ca:	2200      	movs	r2, #0
 80012cc:	2103      	movs	r1, #3
 80012ce:	2017      	movs	r0, #23
 80012d0:	f000 fb2a 	bl	8001928 <HAL_NVIC_SetPriority>
    //    HAL_NVIC_EnableIRQ(BNRG_SPI_EXTI_IRQn);
  }
}
 80012d4:	bf00      	nop
 80012d6:	3738      	adds	r7, #56	; 0x38
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40013000 	.word	0x40013000
 80012e0:	40021000 	.word	0x40021000
 80012e4:	48001c00 	.word	0x48001c00
 80012e8:	48000400 	.word	0x48000400
 80012ec:	10110000 	.word	0x10110000
 80012f0:	48000800 	.word	0x48000800

080012f4 <Hal_Write_Serial>:
* @param  n_bytes2: number of bytes in 2nd buffer
* @retval None
*/
void Hal_Write_Serial(const void* data1, const void* data2, int32_t n_bytes1,
                      int32_t n_bytes2)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	603b      	str	r3, [r7, #0]
  struct timer t;
  
  Timer_Set(&t, CLOCK_SECOND/10);
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	2164      	movs	r1, #100	; 0x64
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fec8 	bl	800109e <Timer_Set>
  }
  PRINT_CSV("\n");
#endif
  
  while(1){
    if(BlueNRG_SPI_Write(&SpiHandle, (uint8_t *)data1,(uint8_t *)data2, n_bytes1, n_bytes2)==0) break;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	4613      	mov	r3, r2
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	68f9      	ldr	r1, [r7, #12]
 800131e:	480b      	ldr	r0, [pc, #44]	; (800134c <Hal_Write_Serial+0x58>)
 8001320:	f000 f8dc 	bl	80014dc <BlueNRG_SPI_Write>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d008      	beq.n	800133c <Hal_Write_Serial+0x48>
    if(Timer_Expired(&t)){
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fec7 	bl	80010c2 <Timer_Expired>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d102      	bne.n	8001340 <Hal_Write_Serial+0x4c>
    if(BlueNRG_SPI_Write(&SpiHandle, (uint8_t *)data1,(uint8_t *)data2, n_bytes1, n_bytes2)==0) break;
 800133a:	e7e8      	b.n	800130e <Hal_Write_Serial+0x1a>
 800133c:	bf00      	nop
 800133e:	e000      	b.n	8001342 <Hal_Write_Serial+0x4e>
      break;
 8001340:	bf00      	nop
    }
  }
}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000400 	.word	0x20000400

08001350 <BNRG_SPI_Init>:
*         Expansion Board.
* @param  None
* @retval None
*/
void BNRG_SPI_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  SpiHandle.Instance = BNRG_SPI_INSTANCE;
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <BNRG_SPI_Init+0x5c>)
 8001356:	4a16      	ldr	r2, [pc, #88]	; (80013b0 <BNRG_SPI_Init+0x60>)
 8001358:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.Mode = BNRG_SPI_MODE;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <BNRG_SPI_Init+0x5c>)
 800135c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001360:	605a      	str	r2, [r3, #4]
  SpiHandle.Init.Direction = BNRG_SPI_DIRECTION;
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <BNRG_SPI_Init+0x5c>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.DataSize = BNRG_SPI_DATASIZE;
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <BNRG_SPI_Init+0x5c>)
 800136a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800136e:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.CLKPolarity = BNRG_SPI_CLKPOLARITY;
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <BNRG_SPI_Init+0x5c>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CLKPhase = BNRG_SPI_CLKPHASE;
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <BNRG_SPI_Init+0x5c>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.NSS = BNRG_SPI_NSS;
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <BNRG_SPI_Init+0x5c>)
 800137e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001382:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.FirstBit = BNRG_SPI_FIRSTBIT;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <BNRG_SPI_Init+0x5c>)
 8001386:	2200      	movs	r2, #0
 8001388:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.TIMode = BNRG_SPI_TIMODE;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <BNRG_SPI_Init+0x5c>)
 800138c:	2200      	movs	r2, #0
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
  SpiHandle.Init.CRCPolynomial = BNRG_SPI_CRCPOLYNOMIAL;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <BNRG_SPI_Init+0x5c>)
 8001392:	2207      	movs	r2, #7
 8001394:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.BaudRatePrescaler = BNRG_SPI_BAUDRATEPRESCALER;
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <BNRG_SPI_Init+0x5c>)
 8001398:	2218      	movs	r2, #24
 800139a:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.CRCCalculation = BNRG_SPI_CRCCALCULATION;
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <BNRG_SPI_Init+0x5c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
  
  HAL_SPI_Init(&SpiHandle);
 80013a2:	4802      	ldr	r0, [pc, #8]	; (80013ac <BNRG_SPI_Init+0x5c>)
 80013a4:	f002 f8fe 	bl	80035a4 <HAL_SPI_Init>
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000400 	.word	0x20000400
 80013b0:	40013000 	.word	0x40013000

080013b4 <BlueNRG_RST>:
* @brief  Resets the BlueNRG.
* @param  None
* @retval None
*/
void BlueNRG_RST(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2101      	movs	r1, #1
 80013bc:	4807      	ldr	r0, [pc, #28]	; (80013dc <BlueNRG_RST+0x28>)
 80013be:	f000 fcaf 	bl	8001d20 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80013c2:	2005      	movs	r0, #5
 80013c4:	f000 f9c6 	bl	8001754 <HAL_Delay>
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	2101      	movs	r1, #1
 80013cc:	4803      	ldr	r0, [pc, #12]	; (80013dc <BlueNRG_RST+0x28>)
 80013ce:	f000 fca7 	bl	8001d20 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80013d2:	2005      	movs	r0, #5
 80013d4:	f000 f9be 	bl	8001754 <HAL_Delay>
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	48001c00 	.word	0x48001c00

080013e0 <BlueNRG_DataPresent>:
* @param  None
* @retval 1 if data are present, 0 otherwise
*/
// FIXME: find a better way to handle this return value (bool type? TRUE and FALSE)
uint8_t BlueNRG_DataPresent(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  if (HAL_GPIO_ReadPin(BNRG_SPI_EXTI_PORT, BNRG_SPI_EXTI_PIN) == GPIO_PIN_SET)
 80013e4:	2120      	movs	r1, #32
 80013e6:	4805      	ldr	r0, [pc, #20]	; (80013fc <BlueNRG_DataPresent+0x1c>)
 80013e8:	f000 fc82 	bl	8001cf0 <HAL_GPIO_ReadPin>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d101      	bne.n	80013f6 <BlueNRG_DataPresent+0x16>
    return 1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <BlueNRG_DataPresent+0x18>
  else  
    return 0;
 80013f6:	2300      	movs	r3, #0
} /* end BlueNRG_DataPresent() */
 80013f8:	4618      	mov	r0, r3
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	48000800 	.word	0x48000800

08001400 <BlueNRG_SPI_Read_All>:
* @param  buff_size: Buffer size
* @retval int32_t  : Number of read bytes
*/
int32_t BlueNRG_SPI_Read_All(uint8_t *buffer,
                             uint8_t buff_size)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af02      	add	r7, sp, #8
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	70fb      	strb	r3, [r7, #3]
  uint16_t byte_count;
  uint8_t len = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8001410:	23ff      	movs	r3, #255	; 0xff
 8001412:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;
  
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001414:	230b      	movs	r3, #11
 8001416:	753b      	strb	r3, [r7, #20]
 8001418:	2300      	movs	r3, #0
 800141a:	757b      	strb	r3, [r7, #21]
 800141c:	2300      	movs	r3, #0
 800141e:	75bb      	strb	r3, [r7, #22]
 8001420:	2300      	movs	r3, #0
 8001422:	75fb      	strb	r3, [r7, #23]
 8001424:	2300      	movs	r3, #0
 8001426:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];
  
  /* CS reset */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	2104      	movs	r1, #4
 800142c:	4829      	ldr	r0, [pc, #164]	; (80014d4 <BlueNRG_SPI_Read_All+0xd4>)
 800142e:	f000 fc77 	bl	8001d20 <HAL_GPIO_WritePin>
  
  /* Read the header */  
  HAL_SPI_TransmitReceive(&SpiHandle, header_master, header_slave, HEADER_SIZE, TIMEOUT_DURATION);
 8001432:	f107 020c 	add.w	r2, r7, #12
 8001436:	f107 0114 	add.w	r1, r7, #20
 800143a:	230f      	movs	r3, #15
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2305      	movs	r3, #5
 8001440:	4825      	ldr	r0, [pc, #148]	; (80014d8 <BlueNRG_SPI_Read_All+0xd8>)
 8001442:	f002 f937 	bl	80036b4 <HAL_SPI_TransmitReceive>
  
  if (header_slave[0] == 0x02) {
 8001446:	7b3b      	ldrb	r3, [r7, #12]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d12e      	bne.n	80014aa <BlueNRG_SPI_Read_All+0xaa>
    /* device is ready */
    byte_count = (header_slave[4]<<8)|header_slave[3];
 800144c:	7c3b      	ldrb	r3, [r7, #16]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b21a      	sxth	r2, r3
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	b21b      	sxth	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	b21b      	sxth	r3, r3
 800145a:	83fb      	strh	r3, [r7, #30]
    if (byte_count > 0) {
 800145c:	8bfb      	ldrh	r3, [r7, #30]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d023      	beq.n	80014aa <BlueNRG_SPI_Read_All+0xaa>
      
      /* avoid to read more data that size of the buffer */
      if (byte_count > buff_size){
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	b29b      	uxth	r3, r3
 8001466:	8bfa      	ldrh	r2, [r7, #30]
 8001468:	429a      	cmp	r2, r3
 800146a:	d901      	bls.n	8001470 <BlueNRG_SPI_Read_All+0x70>
        byte_count = buff_size;
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	83fb      	strh	r3, [r7, #30]
      }
      
      for (len = 0; len < byte_count; len++){
 8001470:	2300      	movs	r3, #0
 8001472:	777b      	strb	r3, [r7, #29]
 8001474:	e014      	b.n	80014a0 <BlueNRG_SPI_Read_All+0xa0>
  __ASM volatile ("cpsid i" : : : "memory");
 8001476:	b672      	cpsid	i
        __disable_irq();
        HAL_SPI_TransmitReceive(&SpiHandle, &char_ff, (uint8_t*)&read_char, 1, TIMEOUT_DURATION);
 8001478:	f107 021b 	add.w	r2, r7, #27
 800147c:	f107 011c 	add.w	r1, r7, #28
 8001480:	230f      	movs	r3, #15
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2301      	movs	r3, #1
 8001486:	4814      	ldr	r0, [pc, #80]	; (80014d8 <BlueNRG_SPI_Read_All+0xd8>)
 8001488:	f002 f914 	bl	80036b4 <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 800148c:	b662      	cpsie	i
        __enable_irq();
        buffer[len] = read_char;
 800148e:	7f7b      	ldrb	r3, [r7, #29]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	7efa      	ldrb	r2, [r7, #27]
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	701a      	strb	r2, [r3, #0]
      for (len = 0; len < byte_count; len++){
 800149a:	7f7b      	ldrb	r3, [r7, #29]
 800149c:	3301      	adds	r3, #1
 800149e:	777b      	strb	r3, [r7, #29]
 80014a0:	7f7b      	ldrb	r3, [r7, #29]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	8bfa      	ldrh	r2, [r7, #30]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d8e5      	bhi.n	8001476 <BlueNRG_SPI_Read_All+0x76>
      }
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 80014aa:	2201      	movs	r2, #1
 80014ac:	2104      	movs	r1, #4
 80014ae:	4809      	ldr	r0, [pc, #36]	; (80014d4 <BlueNRG_SPI_Read_All+0xd4>)
 80014b0:	f000 fc36 	bl	8001d20 <HAL_GPIO_WritePin>
  
  // Add a small delay to give time to the BlueNRG to set the IRQ pin low
  // to avoid a useless SPI read at the end of the transaction
  for(volatile int i = 0; i < 2; i++)__NOP();
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	e003      	b.n	80014c2 <BlueNRG_SPI_Read_All+0xc2>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80014ba:	bf00      	nop
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	3301      	adds	r3, #1
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	ddf8      	ble.n	80014ba <BlueNRG_SPI_Read_All+0xba>
    }
    PRINT_CSV("\n");
  }
#endif
  
  return len;   
 80014c8:	7f7b      	ldrb	r3, [r7, #29]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3720      	adds	r7, #32
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	48000400 	.word	0x48000400
 80014d8:	20000400 	.word	0x20000400

080014dc <BlueNRG_SPI_Write>:
* @param  Nb_bytes2: Size of second data buffer to be written
* @retval Number of read bytes
*/
int32_t BlueNRG_SPI_Write(SPI_HandleTypeDef *hspi, uint8_t* data1,
                          uint8_t* data2, uint8_t Nb_bytes1, uint8_t Nb_bytes2)
{  
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b0cd      	sub	sp, #308	; 0x134
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	f107 040c 	add.w	r4, r7, #12
 80014e6:	6020      	str	r0, [r4, #0]
 80014e8:	f107 0008 	add.w	r0, r7, #8
 80014ec:	6001      	str	r1, [r0, #0]
 80014ee:	1d39      	adds	r1, r7, #4
 80014f0:	600a      	str	r2, [r1, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	1cfb      	adds	r3, r7, #3
 80014f6:	701a      	strb	r2, [r3, #0]
  int32_t result = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  
  int32_t spi_fix_enabled = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  
#ifdef ENABLE_SPI_FIX
  spi_fix_enabled = 1;
#endif //ENABLE_SPI_FIX
  
  unsigned char header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001504:	230a      	movs	r3, #10
 8001506:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
 800150a:	2300      	movs	r3, #0
 800150c:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 8001510:	2300      	movs	r3, #0
 8001512:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 8001516:	2300      	movs	r3, #0
 8001518:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 800151c:	2300      	movs	r3, #0
 800151e:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
  unsigned char header_slave[HEADER_SIZE]  = {0xaa, 0x00, 0x00, 0x00, 0x00};
 8001522:	23aa      	movs	r3, #170	; 0xaa
 8001524:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
 8001528:	2300      	movs	r3, #0
 800152a:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
 800152e:	2300      	movs	r3, #0
 8001530:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
 8001534:	2300      	movs	r3, #0
 8001536:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
 800153a:	2300      	movs	r3, #0
 800153c:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
  
  unsigned char read_char_buf[MAX_BUFFER_SIZE];
  
  Disable_SPI_IRQ(); 
 8001540:	f000 f8cd 	bl	80016de <Disable_SPI_IRQ>
  If the SPI_FIX is enabled the IRQ is set in Output mode, then it is pulled
  high and, after a delay of at least 112us, the CS line is asserted and the
  header transmit/receive operations are started.
  After these transmit/receive operations the IRQ is reset in input mode.
  */
  if (spi_fix_enabled) {
 8001544:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <BlueNRG_SPI_Write+0x78>
    set_irq_as_output();
 800154c:	f000 f86e 	bl	800162c <set_irq_as_output>
    
    /* Assert CS line after at least 112us */
    us150Delay();
 8001550:	f000 f8aa 	bl	80016a8 <us150Delay>
  }
  
  /* CS reset */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	2104      	movs	r1, #4
 8001558:	4833      	ldr	r0, [pc, #204]	; (8001628 <BlueNRG_SPI_Write+0x14c>)
 800155a:	f000 fbe1 	bl	8001d20 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 800155e:	b672      	cpsid	i
  
  /* Exchange header */  
  __disable_irq();
  HAL_SPI_TransmitReceive(hspi, header_master, header_slave, HEADER_SIZE, TIMEOUT_DURATION);
 8001560:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001564:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001568:	f107 000c 	add.w	r0, r7, #12
 800156c:	230f      	movs	r3, #15
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2305      	movs	r3, #5
 8001572:	6800      	ldr	r0, [r0, #0]
 8001574:	f002 f89e 	bl	80036b4 <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 8001578:	b662      	cpsie	i
  __enable_irq();
  
  if (spi_fix_enabled) {
 800157a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <BlueNRG_SPI_Write+0xaa>
    set_irq_as_input();
 8001582:	f000 f86f 	bl	8001664 <set_irq_as_input>
  }
  
  if (header_slave[0] == 0x02) {
 8001586:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800158a:	2b02      	cmp	r3, #2
 800158c:	d13a      	bne.n	8001604 <BlueNRG_SPI_Write+0x128>
    /* SPI is ready */
    if (header_slave[1] >= (Nb_bytes1+Nb_bytes2)) {
 800158e:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8001592:	4619      	mov	r1, r3
 8001594:	1cfb      	adds	r3, r7, #3
 8001596:	781a      	ldrb	r2, [r3, #0]
 8001598:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800159c:	4413      	add	r3, r2
 800159e:	4299      	cmp	r1, r3
 80015a0:	db2b      	blt.n	80015fa <BlueNRG_SPI_Write+0x11e>
      
      /*  Buffer is big enough */
      if (Nb_bytes1 > 0) {
 80015a2:	1cfb      	adds	r3, r7, #3
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d011      	beq.n	80015ce <BlueNRG_SPI_Write+0xf2>
  __ASM volatile ("cpsid i" : : : "memory");
 80015aa:	b672      	cpsid	i
        __disable_irq();
        HAL_SPI_TransmitReceive(hspi, data1, read_char_buf, Nb_bytes1, TIMEOUT_DURATION);
 80015ac:	1cfb      	adds	r3, r7, #3
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b29c      	uxth	r4, r3
 80015b2:	f107 0210 	add.w	r2, r7, #16
 80015b6:	f107 0108 	add.w	r1, r7, #8
 80015ba:	f107 000c 	add.w	r0, r7, #12
 80015be:	230f      	movs	r3, #15
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	4623      	mov	r3, r4
 80015c4:	6809      	ldr	r1, [r1, #0]
 80015c6:	6800      	ldr	r0, [r0, #0]
 80015c8:	f002 f874 	bl	80036b4 <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 80015cc:	b662      	cpsie	i
        __enable_irq();
        
      }
      if (Nb_bytes2 > 0) {
 80015ce:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d01a      	beq.n	800160c <BlueNRG_SPI_Write+0x130>
  __ASM volatile ("cpsid i" : : : "memory");
 80015d6:	b672      	cpsid	i
        __disable_irq();
        HAL_SPI_TransmitReceive(hspi, data2, read_char_buf, Nb_bytes2, TIMEOUT_DURATION);
 80015d8:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 80015dc:	b29c      	uxth	r4, r3
 80015de:	f107 0210 	add.w	r2, r7, #16
 80015e2:	1d39      	adds	r1, r7, #4
 80015e4:	f107 000c 	add.w	r0, r7, #12
 80015e8:	230f      	movs	r3, #15
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	4623      	mov	r3, r4
 80015ee:	6809      	ldr	r1, [r1, #0]
 80015f0:	6800      	ldr	r0, [r0, #0]
 80015f2:	f002 f85f 	bl	80036b4 <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 80015f6:	b662      	cpsie	i
 80015f8:	e008      	b.n	800160c <BlueNRG_SPI_Write+0x130>
        
      }
      
    } else {
      /* Buffer is too small */
      result = -2;
 80015fa:	f06f 0301 	mvn.w	r3, #1
 80015fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001602:	e003      	b.n	800160c <BlueNRG_SPI_Write+0x130>
    }
  } else {
    /* SPI is not ready */
    result = -1;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001608:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  }
  
  /* Release CS line */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 800160c:	2201      	movs	r2, #1
 800160e:	2104      	movs	r1, #4
 8001610:	4805      	ldr	r0, [pc, #20]	; (8001628 <BlueNRG_SPI_Write+0x14c>)
 8001612:	f000 fb85 	bl	8001d20 <HAL_GPIO_WritePin>
  
  
  Enable_SPI_IRQ();
 8001616:	f000 f85b 	bl	80016d0 <Enable_SPI_IRQ>
  
  return result;
 800161a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
}
 800161e:	4618      	mov	r0, r3
 8001620:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8001624:	46bd      	mov	sp, r7
 8001626:	bd90      	pop	{r4, r7, pc}
 8001628:	48000400 	.word	0x48000400

0800162c <set_irq_as_output>:
* @brief  Set in Output mode the IRQ.
* @param  None
* @retval None
*/
void set_irq_as_output(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Pull IRQ high */
  GPIO_InitStructure.Pin = BNRG_SPI_IRQ_PIN;
 8001632:	2320      	movs	r3, #32
 8001634:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001636:	2301      	movs	r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = BNRG_SPI_IRQ_SPEED;
 800163a:	2303      	movs	r3, #3
 800163c:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStructure);
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	4619      	mov	r1, r3
 8001646:	4806      	ldr	r0, [pc, #24]	; (8001660 <set_irq_as_output+0x34>)
 8001648:	f000 f9a6 	bl	8001998 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN, GPIO_PIN_SET);
 800164c:	2201      	movs	r2, #1
 800164e:	2120      	movs	r1, #32
 8001650:	4803      	ldr	r0, [pc, #12]	; (8001660 <set_irq_as_output+0x34>)
 8001652:	f000 fb65 	bl	8001d20 <HAL_GPIO_WritePin>
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	48000800 	.word	0x48000800

08001664 <set_irq_as_input>:
* @brief  Set the IRQ in input mode.
* @param  None
* @retval None
*/
void set_irq_as_input(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* IRQ input */  
  GPIO_InitStructure.Pin = BNRG_SPI_IRQ_PIN;
 800166a:	2320      	movs	r3, #32
 800166c:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = BNRG_SPI_IRQ_MODE;
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <set_irq_as_input+0x3c>)
 8001670:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001672:	2302      	movs	r3, #2
 8001674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = BNRG_SPI_IRQ_SPEED;
 8001676:	2303      	movs	r3, #3
 8001678:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Alternate = BNRG_SPI_IRQ_ALTERNATE;    
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStructure);
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	4619      	mov	r1, r3
 8001682:	4808      	ldr	r0, [pc, #32]	; (80016a4 <set_irq_as_input+0x40>)
 8001684:	f000 f988 	bl	8001998 <HAL_GPIO_Init>
  
  GPIO_InitStructure.Pull = BNRG_SPI_IRQ_PULL;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStructure);
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	4619      	mov	r1, r3
 8001690:	4804      	ldr	r0, [pc, #16]	; (80016a4 <set_irq_as_input+0x40>)
 8001692:	f000 f981 	bl	8001998 <HAL_GPIO_Init>
}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	10110000 	.word	0x10110000
 80016a4:	48000800 	.word	0x48000800

080016a8 <us150Delay>:
* @param  None
* @retval None
* NOTE: TODO: implement with clock-independent function.
*/
static void us150Delay(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
#if SYSCLK_FREQ == 4000000
  for(volatile int i = 0; i < 35; i++)__NOP();
#elif SYSCLK_FREQ == 32000000
  for(volatile int i = 0; i < 420; i++)__NOP();
#elif SYSCLK_FREQ == 80000000
  for(volatile int i = 0; i < 1072; i++)__NOP();
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	e003      	b.n	80016bc <us150Delay+0x14>
  __ASM volatile ("nop");
 80016b4:	bf00      	nop
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3301      	adds	r3, #1
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80016c2:	dbf7      	blt.n	80016b4 <us150Delay+0xc>
#elif SYSCLK_FREQ == 168000000
  for(volatile int i = 0; i < 2250; i++)__NOP();
#else
#error Implement delay function.
#endif    
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <Enable_SPI_IRQ>:
* @brief  Enable SPI IRQ.
* @param  None
* @retval None
*/
void Enable_SPI_IRQ(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(BNRG_SPI_EXTI_IRQn);  
 80016d4:	2017      	movs	r0, #23
 80016d6:	f000 f943 	bl	8001960 <HAL_NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}

080016de <Disable_SPI_IRQ>:
* @brief  Disable SPI IRQ.
* @param  None
* @retval None
*/
void Disable_SPI_IRQ(void)
{ 
 80016de:	b580      	push	{r7, lr}
 80016e0:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 80016e2:	2017      	movs	r0, #23
 80016e4:	f000 f94a 	bl	800197c <HAL_NVIC_DisableIRQ>
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}

080016ec <Clear_SPI_EXTI_Flag>:
* @brief  Clear EXTI (External Interrupt) line for SPI IRQ.
* @param  None
* @retval None
*/
void Clear_SPI_EXTI_Flag(void)
{  
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  __HAL_GPIO_EXTI_CLEAR_IT(BNRG_SPI_EXTI_PIN);  
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <Clear_SPI_EXTI_Flag+0x14>)
 80016f2:	2220      	movs	r2, #32
 80016f4:	615a      	str	r2, [r3, #20]
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40010400 	.word	0x40010400

08001704 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 f902 	bl	8001912 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170e:	200f      	movs	r0, #15
 8001710:	f002 fd0c 	bl	800412c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001714:	f000 fb34 	bl	8001d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick++;
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <HAL_IncTick+0x18>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	4a03      	ldr	r2, [pc, #12]	; (8001738 <HAL_IncTick+0x18>)
 800172c:	6013      	str	r3, [r2, #0]
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	20000464 	.word	0x20000464

0800173c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTick;
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <HAL_GetTick+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000464 	.word	0x20000464

08001754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800175c:	f7ff ffee 	bl	800173c <HAL_GetTick>
 8001760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800176c:	d002      	beq.n	8001774 <HAL_Delay+0x20>
  {
    wait++;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	3301      	adds	r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8001774:	bf00      	nop
 8001776:	f7ff ffe1 	bl	800173c <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1ad2      	subs	r2, r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	429a      	cmp	r2, r3
 8001784:	d3f7      	bcc.n	8001776 <HAL_Delay+0x22>
  {
  }
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <NVIC_SetPriorityGrouping+0x44>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <NVIC_SetPriorityGrouping+0x44>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <NVIC_GetPriorityGrouping+0x18>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 0307 	and.w	r3, r3, #7
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80017fe:	4909      	ldr	r1, [pc, #36]	; (8001824 <NVIC_EnableIRQ+0x30>)
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	095b      	lsrs	r3, r3, #5
 8001806:	79fa      	ldrb	r2, [r7, #7]
 8001808:	f002 021f 	and.w	r2, r2, #31
 800180c:	2001      	movs	r0, #1
 800180e:	fa00 f202 	lsl.w	r2, r0, r2
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100

08001828 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001832:	4909      	ldr	r1, [pc, #36]	; (8001858 <NVIC_DisableIRQ+0x30>)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	095b      	lsrs	r3, r3, #5
 800183a:	79fa      	ldrb	r2, [r7, #7]
 800183c:	f002 021f 	and.w	r2, r2, #31
 8001840:	2001      	movs	r0, #1
 8001842:	fa00 f202 	lsl.w	r2, r0, r2
 8001846:	3320      	adds	r3, #32
 8001848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000e100 	.word	0xe000e100

0800185c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	da0b      	bge.n	8001888 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001870:	490d      	ldr	r1, [pc, #52]	; (80018a8 <NVIC_SetPriority+0x4c>)
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	3b04      	subs	r3, #4
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	440b      	add	r3, r1
 8001884:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001886:	e009      	b.n	800189c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	4908      	ldr	r1, [pc, #32]	; (80018ac <NVIC_SetPriority+0x50>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00
 80018ac:	e000e100 	.word	0xe000e100

080018b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f1c3 0307 	rsb	r3, r3, #7
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	bf28      	it	cs
 80018ce:	2304      	movcs	r3, #4
 80018d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3304      	adds	r3, #4
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d902      	bls.n	80018e0 <NVIC_EncodePriority+0x30>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3b03      	subs	r3, #3
 80018de:	e000      	b.n	80018e2 <NVIC_EncodePriority+0x32>
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	2201      	movs	r2, #1
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	1e5a      	subs	r2, r3, #1
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	401a      	ands	r2, r3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f6:	2101      	movs	r1, #1
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	1e59      	subs	r1, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ff38 	bl	8001790 <NVIC_SetPriorityGrouping>
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800193a:	f7ff ff4d 	bl	80017d8 <NVIC_GetPriorityGrouping>
 800193e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	68b9      	ldr	r1, [r7, #8]
 8001944:	6978      	ldr	r0, [r7, #20]
 8001946:	f7ff ffb3 	bl	80018b0 <NVIC_EncodePriority>
 800194a:	4602      	mov	r2, r0
 800194c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff ff82 	bl	800185c <NVIC_SetPriority>
}
 8001958:	bf00      	nop
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff ff40 	bl	80017f4 <NVIC_EnableIRQ>
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff4c 	bl	8001828 <NVIC_DisableIRQ>
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80019ae:	e17f      	b.n	8001cb0 <HAL_GPIO_Init+0x318>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	2101      	movs	r1, #1
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	fa01 f303 	lsl.w	r3, r1, r3
 80019bc:	4013      	ands	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8171 	beq.w	8001caa <HAL_GPIO_Init+0x312>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x40>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b12      	cmp	r3, #18
 80019d6:	d123      	bne.n	8001a20 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	6939      	ldr	r1, [r7, #16]
 8001a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d00b      	beq.n	8001a74 <HAL_GPIO_Init+0xdc>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d007      	beq.n	8001a74 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a68:	2b11      	cmp	r3, #17
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b12      	cmp	r3, #18
 8001a72:	d130      	bne.n	8001ad6 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aaa:	2201      	movs	r2, #1
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	091b      	lsrs	r3, r3, #4
 8001ac0:	f003 0201 	and.w	r2, r3, #1
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d118      	bne.n	8001b14 <HAL_GPIO_Init+0x17c>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ae8:	2201      	movs	r2, #1
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	08db      	lsrs	r3, r3, #3
 8001afe:	f003 0201 	and.w	r2, r3, #1
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 80ac 	beq.w	8001caa <HAL_GPIO_Init+0x312>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	4a5e      	ldr	r2, [pc, #376]	; (8001ccc <HAL_GPIO_Init+0x334>)
 8001b54:	4b5d      	ldr	r3, [pc, #372]	; (8001ccc <HAL_GPIO_Init+0x334>)
 8001b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b5e:	4b5b      	ldr	r3, [pc, #364]	; (8001ccc <HAL_GPIO_Init+0x334>)
 8001b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b6a:	4a59      	ldr	r2, [pc, #356]	; (8001cd0 <HAL_GPIO_Init+0x338>)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b76:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	220f      	movs	r2, #15
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b94:	d025      	beq.n	8001be2 <HAL_GPIO_Init+0x24a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4e      	ldr	r2, [pc, #312]	; (8001cd4 <HAL_GPIO_Init+0x33c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d01f      	beq.n	8001bde <HAL_GPIO_Init+0x246>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4d      	ldr	r2, [pc, #308]	; (8001cd8 <HAL_GPIO_Init+0x340>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d019      	beq.n	8001bda <HAL_GPIO_Init+0x242>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4c      	ldr	r2, [pc, #304]	; (8001cdc <HAL_GPIO_Init+0x344>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d013      	beq.n	8001bd6 <HAL_GPIO_Init+0x23e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4b      	ldr	r2, [pc, #300]	; (8001ce0 <HAL_GPIO_Init+0x348>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00d      	beq.n	8001bd2 <HAL_GPIO_Init+0x23a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4a      	ldr	r2, [pc, #296]	; (8001ce4 <HAL_GPIO_Init+0x34c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d007      	beq.n	8001bce <HAL_GPIO_Init+0x236>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a49      	ldr	r2, [pc, #292]	; (8001ce8 <HAL_GPIO_Init+0x350>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d101      	bne.n	8001bca <HAL_GPIO_Init+0x232>
 8001bc6:	2306      	movs	r3, #6
 8001bc8:	e00c      	b.n	8001be4 <HAL_GPIO_Init+0x24c>
 8001bca:	2307      	movs	r3, #7
 8001bcc:	e00a      	b.n	8001be4 <HAL_GPIO_Init+0x24c>
 8001bce:	2305      	movs	r3, #5
 8001bd0:	e008      	b.n	8001be4 <HAL_GPIO_Init+0x24c>
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x24c>
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e004      	b.n	8001be4 <HAL_GPIO_Init+0x24c>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e002      	b.n	8001be4 <HAL_GPIO_Init+0x24c>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_GPIO_Init+0x24c>
 8001be2:	2300      	movs	r3, #0
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	f002 0203 	and.w	r2, r2, #3
 8001bea:	0092      	lsls	r2, r2, #2
 8001bec:	4093      	lsls	r3, r2
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bf4:	4936      	ldr	r1, [pc, #216]	; (8001cd0 <HAL_GPIO_Init+0x338>)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c02:	4b3a      	ldr	r3, [pc, #232]	; (8001cec <HAL_GPIO_Init+0x354>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c26:	4a31      	ldr	r2, [pc, #196]	; (8001cec <HAL_GPIO_Init+0x354>)
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c2c:	4b2f      	ldr	r3, [pc, #188]	; (8001cec <HAL_GPIO_Init+0x354>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c50:	4a26      	ldr	r2, [pc, #152]	; (8001cec <HAL_GPIO_Init+0x354>)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c56:	4b25      	ldr	r3, [pc, #148]	; (8001cec <HAL_GPIO_Init+0x354>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x2e2>
        {
          temp |= iocurrent;
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c7a:	4a1c      	ldr	r2, [pc, #112]	; (8001cec <HAL_GPIO_Init+0x354>)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c80:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <HAL_GPIO_Init+0x354>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x30c>
        {
          temp |= iocurrent;
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ca4:	4a11      	ldr	r2, [pc, #68]	; (8001cec <HAL_GPIO_Init+0x354>)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3301      	adds	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f47f ae78 	bne.w	80019b0 <HAL_GPIO_Init+0x18>
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	371c      	adds	r7, #28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40010000 	.word	0x40010000
 8001cd4:	48000400 	.word	0x48000400
 8001cd8:	48000800 	.word	0x48000800
 8001cdc:	48000c00 	.word	0x48000c00
 8001ce0:	48001000 	.word	0x48001000
 8001ce4:	48001400 	.word	0x48001400
 8001ce8:	48001800 	.word	0x48001800
 8001cec:	40010400 	.word	0x40010400

08001cf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	887b      	ldrh	r3, [r7, #2]
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e001      	b.n	8001d12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d30:	787b      	ldrb	r3, [r7, #1]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d36:	887a      	ldrh	r2, [r7, #2]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d3c:	e002      	b.n	8001d44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d006      	beq.n	8001d74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d66:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f002 fb6c 	bl	800444c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40010400 	.word	0x40010400

08001d80 <HAL_MspInit>:
  * @brief  Initialize the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually  
            modified by the user
   */ 
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 8001d94:	4a05      	ldr	r2, [pc, #20]	; (8001dac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d96:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9e:	6013      	str	r3, [r2, #0]
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40007000 	.word	0x40007000

08001db0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40007000 	.word	0x40007000

08001dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08c      	sub	sp, #48	; 0x30
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80db 	beq.w	8001f9c <HAL_RCC_OscConfig+0x1d0>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001de6:	4ba2      	ldr	r3, [pc, #648]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 8084 	bne.w	8001efc <HAL_RCC_OscConfig+0x130>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001df4:	4b9e      	ldr	r3, [pc, #632]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_OscConfig+0x40>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_OscConfig+0x40>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e35f      	b.n	80024cc <HAL_RCC_OscConfig+0x700>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1a      	ldr	r2, [r3, #32]
 8001e10:	4b97      	ldr	r3, [pc, #604]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d004      	beq.n	8001e26 <HAL_RCC_OscConfig+0x5a>
 8001e1c:	4b94      	ldr	r3, [pc, #592]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e24:	e005      	b.n	8001e32 <HAL_RCC_OscConfig+0x66>
 8001e26:	4b92      	ldr	r3, [pc, #584]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d923      	bls.n	8001e7e <HAL_RCC_OscConfig+0xb2>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fdc8 	bl	80029d0 <RCC_SetFlashLatencyFromMSIRange>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e340      	b.n	80024cc <HAL_RCC_OscConfig+0x700>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e4a:	4a89      	ldr	r2, [pc, #548]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001e4c:	4b88      	ldr	r3, [pc, #544]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f043 0308 	orr.w	r3, r3, #8
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4986      	ldr	r1, [pc, #536]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001e58:	4b85      	ldr	r3, [pc, #532]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e68:	4981      	ldr	r1, [pc, #516]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001e6a:	4b81      	ldr	r3, [pc, #516]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
 8001e7c:	e022      	b.n	8001ec4 <HAL_RCC_OscConfig+0xf8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e7e:	4a7c      	ldr	r2, [pc, #496]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001e80:	4b7b      	ldr	r3, [pc, #492]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f043 0308 	orr.w	r3, r3, #8
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4979      	ldr	r1, [pc, #484]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001e8c:	4b78      	ldr	r3, [pc, #480]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e9c:	4974      	ldr	r1, [pc, #464]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001e9e:	4b74      	ldr	r3, [pc, #464]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 fd8b 	bl	80029d0 <RCC_SetFlashLatencyFromMSIRange>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e303      	b.n	80024cc <HAL_RCC_OscConfig+0x700>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001ec4:	f000 fc2a 	bl	800271c <HAL_RCC_GetSysClockFreq>
 8001ec8:	4601      	mov	r1, r0
 8001eca:	4b69      	ldr	r3, [pc, #420]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ed2:	23f0      	movs	r3, #240	; 0xf0
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	fa93 f3a3 	rbit	r3, r3
 8001edc:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	fab3 f383 	clz	r3, r3
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee8:	4a62      	ldr	r2, [pc, #392]	; (8002074 <HAL_RCC_OscConfig+0x2a8>)
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	fa21 f303 	lsr.w	r3, r1, r3
 8001ef0:	4a61      	ldr	r2, [pc, #388]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001ef2:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8001ef4:	200f      	movs	r0, #15
 8001ef6:	f002 f919 	bl	800412c <HAL_InitTick>
 8001efa:	e04f      	b.n	8001f9c <HAL_RCC_OscConfig+0x1d0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d032      	beq.n	8001f6a <HAL_RCC_OscConfig+0x19e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f04:	4a5a      	ldr	r2, [pc, #360]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001f06:	4b5a      	ldr	r3, [pc, #360]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f10:	f7ff fc14 	bl	800173c <HAL_GetTick>
 8001f14:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f18:	f7ff fc10 	bl	800173c <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e2d0      	b.n	80024cc <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001f2a:	4b51      	ldr	r3, [pc, #324]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x14c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f36:	4a4e      	ldr	r2, [pc, #312]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001f38:	4b4d      	ldr	r3, [pc, #308]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f043 0308 	orr.w	r3, r3, #8
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	494b      	ldr	r1, [pc, #300]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001f44:	4b4a      	ldr	r3, [pc, #296]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f54:	4946      	ldr	r1, [pc, #280]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001f56:	4b46      	ldr	r3, [pc, #280]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
 8001f68:	e018      	b.n	8001f9c <HAL_RCC_OscConfig+0x1d0>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f6a:	4a41      	ldr	r2, [pc, #260]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001f6c:	4b40      	ldr	r3, [pc, #256]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f76:	f7ff fbe1 	bl	800173c <HAL_GetTick>
 8001f7a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f7e:	f7ff fbdd 	bl	800173c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e29d      	b.n	80024cc <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001f90:	4b37      	ldr	r3, [pc, #220]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d07a      	beq.n	800209e <HAL_RCC_OscConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8001fa8:	4b31      	ldr	r3, [pc, #196]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 030c 	and.w	r3, r3, #12
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d00b      	beq.n	8001fcc <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fb4:	4b2e      	ldr	r3, [pc, #184]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8001fbc:	2b0c      	cmp	r3, #12
 8001fbe:	d111      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x218>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d10b      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x218>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fcc:	4b28      	ldr	r3, [pc, #160]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d061      	beq.n	800209c <HAL_RCC_OscConfig+0x2d0>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d15d      	bne.n	800209c <HAL_RCC_OscConfig+0x2d0>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e273      	b.n	80024cc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fec:	d106      	bne.n	8001ffc <HAL_RCC_OscConfig+0x230>
 8001fee:	4a20      	ldr	r2, [pc, #128]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001ff0:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e01d      	b.n	8002038 <HAL_RCC_OscConfig+0x26c>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0x254>
 8002006:	4a1a      	ldr	r2, [pc, #104]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8002008:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4a17      	ldr	r2, [pc, #92]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8002014:	4b16      	ldr	r3, [pc, #88]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e00b      	b.n	8002038 <HAL_RCC_OscConfig+0x26c>
 8002020:	4a13      	ldr	r2, [pc, #76]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	4a10      	ldr	r2, [pc, #64]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d013      	beq.n	8002068 <HAL_RCC_OscConfig+0x29c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7ff fb7c 	bl	800173c <HAL_GetTick>
 8002044:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x28e>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002048:	f7ff fb78 	bl	800173c <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	; 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x28e>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e238      	b.n	80024cc <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_RCC_OscConfig+0x2a4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x27c>
 8002066:	e01a      	b.n	800209e <HAL_RCC_OscConfig+0x2d2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7ff fb68 	bl	800173c <HAL_GetTick>
 800206c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800206e:	e00e      	b.n	800208e <HAL_RCC_OscConfig+0x2c2>
 8002070:	40021000 	.word	0x40021000
 8002074:	080049a8 	.word	0x080049a8
 8002078:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800207c:	f7ff fb5e 	bl	800173c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x2c2>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e21e      	b.n	80024cc <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800208e:	4bb0      	ldr	r3, [pc, #704]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x2b0>
 800209a:	e000      	b.n	800209e <HAL_RCC_OscConfig+0x2d2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d07f      	beq.n	80021aa <HAL_RCC_OscConfig+0x3de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80020aa:	4ba9      	ldr	r3, [pc, #676]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d00b      	beq.n	80020ce <HAL_RCC_OscConfig+0x302>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020b6:	4ba6      	ldr	r3, [pc, #664]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80020be:	2b0c      	cmp	r3, #12
 80020c0:	d127      	bne.n	8002112 <HAL_RCC_OscConfig+0x346>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020c2:	4ba3      	ldr	r3, [pc, #652]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d121      	bne.n	8002112 <HAL_RCC_OscConfig+0x346>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ce:	4ba0      	ldr	r3, [pc, #640]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_RCC_OscConfig+0x31a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e1f2      	b.n	80024cc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e6:	489a      	ldr	r0, [pc, #616]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 80020e8:	4b99      	ldr	r3, [pc, #612]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6919      	ldr	r1, [r3, #16]
 80020f4:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 80020f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	61bb      	str	r3, [r7, #24]
  return(result);
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	fab3 f383 	clz	r3, r3
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	4313      	orrs	r3, r2
 800210e:	6043      	str	r3, [r0, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002110:	e04b      	b.n	80021aa <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d02e      	beq.n	8002178 <HAL_RCC_OscConfig+0x3ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800211a:	4a8d      	ldr	r2, [pc, #564]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 800211c:	4b8c      	ldr	r3, [pc, #560]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7ff fb09 	bl	800173c <HAL_GetTick>
 800212a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212e:	f7ff fb05 	bl	800173c <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x374>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e1c5      	b.n	80024cc <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002140:	4b83      	ldr	r3, [pc, #524]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x362>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214c:	4880      	ldr	r0, [pc, #512]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 800214e:	4b80      	ldr	r3, [pc, #512]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6919      	ldr	r1, [r3, #16]
 800215a:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 800215e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	613b      	str	r3, [r7, #16]
  return(result);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	6043      	str	r3, [r0, #4]
 8002176:	e018      	b.n	80021aa <HAL_RCC_OscConfig+0x3de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002178:	4a75      	ldr	r2, [pc, #468]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 800217a:	4b75      	ldr	r3, [pc, #468]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7ff fada 	bl	800173c <HAL_GetTick>
 8002188:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218c:	f7ff fad6 	bl	800173c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e196      	b.n	80024cc <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800219e:	4b6c      	ldr	r3, [pc, #432]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d03c      	beq.n	8002230 <HAL_RCC_OscConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01c      	beq.n	80021f8 <HAL_RCC_OscConfig+0x42c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021be:	4a64      	ldr	r2, [pc, #400]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 80021c0:	4b63      	ldr	r3, [pc, #396]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 80021c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ce:	f7ff fab5 	bl	800173c <HAL_GetTick>
 80021d2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d6:	f7ff fab1 	bl	800173c <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e171      	b.n	80024cc <HAL_RCC_OscConfig+0x700>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80021e8:	4b59      	ldr	r3, [pc, #356]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 80021ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0ef      	beq.n	80021d6 <HAL_RCC_OscConfig+0x40a>
 80021f6:	e01b      	b.n	8002230 <HAL_RCC_OscConfig+0x464>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f8:	4a55      	ldr	r2, [pc, #340]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 80021fa:	4b55      	ldr	r3, [pc, #340]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 80021fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002208:	f7ff fa98 	bl	800173c <HAL_GetTick>
 800220c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002210:	f7ff fa94 	bl	800173c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e154      	b.n	80024cc <HAL_RCC_OscConfig+0x700>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8002222:	4b4b      	ldr	r3, [pc, #300]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 8002224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1ef      	bne.n	8002210 <HAL_RCC_OscConfig+0x444>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80a9 	beq.w	8002390 <HAL_RCC_OscConfig+0x5c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002244:	4b42      	ldr	r3, [pc, #264]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 8002246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10e      	bne.n	800226e <HAL_RCC_OscConfig+0x4a2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002250:	4a3f      	ldr	r2, [pc, #252]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 8002252:	4b3f      	ldr	r3, [pc, #252]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225a:	6593      	str	r3, [r2, #88]	; 0x58
 800225c:	4b3c      	ldr	r3, [pc, #240]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002268:	2301      	movs	r3, #1
 800226a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800226e:	4b39      	ldr	r3, [pc, #228]	; (8002354 <HAL_RCC_OscConfig+0x588>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d118      	bne.n	80022ac <HAL_RCC_OscConfig+0x4e0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800227a:	4a36      	ldr	r2, [pc, #216]	; (8002354 <HAL_RCC_OscConfig+0x588>)
 800227c:	4b35      	ldr	r3, [pc, #212]	; (8002354 <HAL_RCC_OscConfig+0x588>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002284:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002286:	f7ff fa59 	bl	800173c <HAL_GetTick>
 800228a:	62b8      	str	r0, [r7, #40]	; 0x28

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228e:	f7ff fa55 	bl	800173c <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e115      	b.n	80024cc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a0:	4b2c      	ldr	r3, [pc, #176]	; (8002354 <HAL_RCC_OscConfig+0x588>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x4c2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d108      	bne.n	80022c6 <HAL_RCC_OscConfig+0x4fa>
 80022b4:	4a26      	ldr	r2, [pc, #152]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 80022b6:	4b26      	ldr	r3, [pc, #152]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 80022b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022c4:	e024      	b.n	8002310 <HAL_RCC_OscConfig+0x544>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b05      	cmp	r3, #5
 80022cc:	d110      	bne.n	80022f0 <HAL_RCC_OscConfig+0x524>
 80022ce:	4a20      	ldr	r2, [pc, #128]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 80022d0:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022de:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 80022e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ee:	e00f      	b.n	8002310 <HAL_RCC_OscConfig+0x544>
 80022f0:	4a17      	ldr	r2, [pc, #92]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 80022f2:	4b17      	ldr	r3, [pc, #92]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 80022f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002300:	4a13      	ldr	r2, [pc, #76]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 8002304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002308:	f023 0304 	bic.w	r3, r3, #4
 800230c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d016      	beq.n	8002346 <HAL_RCC_OscConfig+0x57a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7ff fa10 	bl	800173c <HAL_GetTick>
 800231c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800231e:	e00a      	b.n	8002336 <HAL_RCC_OscConfig+0x56a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002320:	f7ff fa0c 	bl	800173c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x56a>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e0ca      	b.n	80024cc <HAL_RCC_OscConfig+0x700>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_RCC_OscConfig+0x584>)
 8002338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0ed      	beq.n	8002320 <HAL_RCC_OscConfig+0x554>
 8002344:	e01a      	b.n	800237c <HAL_RCC_OscConfig+0x5b0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002346:	f7ff f9f9 	bl	800173c <HAL_GetTick>
 800234a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800234c:	e00f      	b.n	800236e <HAL_RCC_OscConfig+0x5a2>
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000
 8002354:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002358:	f7ff f9f0 	bl	800173c <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	f241 3288 	movw	r2, #5000	; 0x1388
 8002366:	4293      	cmp	r3, r2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x5a2>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e0ae      	b.n	80024cc <HAL_RCC_OscConfig+0x700>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800236e:	4b59      	ldr	r3, [pc, #356]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 8002370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1ed      	bne.n	8002358 <HAL_RCC_OscConfig+0x58c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800237c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002380:	2b01      	cmp	r3, #1
 8002382:	d105      	bne.n	8002390 <HAL_RCC_OscConfig+0x5c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002384:	4a53      	ldr	r2, [pc, #332]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 8002386:	4b53      	ldr	r3, [pc, #332]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 8098 	beq.w	80024ca <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800239a:	4b4e      	ldr	r3, [pc, #312]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b0c      	cmp	r3, #12
 80023a4:	f000 808f 	beq.w	80024c6 <HAL_RCC_OscConfig+0x6fa>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d156      	bne.n	800245e <HAL_RCC_OscConfig+0x692>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b0:	4a48      	ldr	r2, [pc, #288]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 80023b2:	4b48      	ldr	r3, [pc, #288]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7ff f9be 	bl	800173c <HAL_GetTick>
 80023c0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x60a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c4:	f7ff f9ba 	bl	800173c <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x60a>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e07a      	b.n	80024cc <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80023d6:	4b3f      	ldr	r3, [pc, #252]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x5f8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023e2:	493c      	ldr	r1, [pc, #240]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	3b01      	subs	r3, #1
 80023ea:	011a      	lsls	r2, r3, #4
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f0:	021b      	lsls	r3, r3, #8
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	045b      	lsls	r3, r3, #17
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002408:	085b      	lsrs	r3, r3, #1
 800240a:	3b01      	subs	r3, #1
 800240c:	055b      	lsls	r3, r3, #21
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	085b      	lsrs	r3, r3, #1
 8002416:	3b01      	subs	r3, #1
 8002418:	065b      	lsls	r3, r3, #25
 800241a:	4313      	orrs	r3, r2
 800241c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800241e:	4a2d      	ldr	r2, [pc, #180]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 8002420:	4b2c      	ldr	r3, [pc, #176]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002428:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800242a:	4a2a      	ldr	r2, [pc, #168]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 800242c:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002434:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002436:	f7ff f981 	bl	800173c <HAL_GetTick>
 800243a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243e:	f7ff f97d 	bl	800173c <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e03d      	b.n	80024cc <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002450:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x672>
 800245c:	e035      	b.n	80024ca <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245e:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 8002460:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002468:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800246a:	4b1a      	ldr	r3, [pc, #104]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10b      	bne.n	800248e <HAL_RCC_OscConfig+0x6c2>
#if defined(RCC_PLLSAI2_SUPPORT)
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8002476:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
           && 
 800247e:	2b00      	cmp	r3, #0
 8002480:	d105      	bne.n	800248e <HAL_RCC_OscConfig+0x6c2>
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002482:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 8002484:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f023 0303 	bic.w	r3, r3, #3
 800248c:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800248e:	4a11      	ldr	r2, [pc, #68]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 8002490:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249e:	f7ff f94d 	bl	800173c <HAL_GetTick>
 80024a2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x6ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a6:	f7ff f949 	bl	800173c <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x6ec>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e009      	b.n	80024cc <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_RCC_OscConfig+0x708>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f0      	bne.n	80024a6 <HAL_RCC_OscConfig+0x6da>
 80024c4:	e001      	b.n	80024ca <HAL_RCC_OscConfig+0x6fe>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_RCC_OscConfig+0x700>
    }
  }
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3730      	adds	r7, #48	; 0x30
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000

080024d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80024e6:	4b89      	ldr	r3, [pc, #548]	; (800270c <HAL_RCC_ClockConfig+0x234>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0207 	and.w	r2, r3, #7
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d210      	bcs.n	8002516 <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f4:	4985      	ldr	r1, [pc, #532]	; (800270c <HAL_RCC_ClockConfig+0x234>)
 80024f6:	4b85      	ldr	r3, [pc, #532]	; (800270c <HAL_RCC_ClockConfig+0x234>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 0207 	bic.w	r2, r3, #7
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002504:	4b81      	ldr	r3, [pc, #516]	; (800270c <HAL_RCC_ClockConfig+0x234>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0207 	and.w	r2, r3, #7
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d001      	beq.n	8002516 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e0f6      	b.n	8002704 <HAL_RCC_ClockConfig+0x22c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002522:	497b      	ldr	r1, [pc, #492]	; (8002710 <HAL_RCC_ClockConfig+0x238>)
 8002524:	4b7a      	ldr	r3, [pc, #488]	; (8002710 <HAL_RCC_ClockConfig+0x238>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	4313      	orrs	r3, r2
 8002532:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 808e 	beq.w	800265e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800254a:	4b71      	ldr	r3, [pc, #452]	; (8002710 <HAL_RCC_ClockConfig+0x238>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d121      	bne.n	800259a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e0d4      	b.n	8002704 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b03      	cmp	r3, #3
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002562:	4b6b      	ldr	r3, [pc, #428]	; (8002710 <HAL_RCC_ClockConfig+0x238>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d115      	bne.n	800259a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e0c8      	b.n	8002704 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d107      	bne.n	800258a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800257a:	4b65      	ldr	r3, [pc, #404]	; (8002710 <HAL_RCC_ClockConfig+0x238>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e0bc      	b.n	8002704 <HAL_RCC_ClockConfig+0x22c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800258a:	4b61      	ldr	r3, [pc, #388]	; (8002710 <HAL_RCC_ClockConfig+0x238>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0b4      	b.n	8002704 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800259a:	495d      	ldr	r1, [pc, #372]	; (8002710 <HAL_RCC_ClockConfig+0x238>)
 800259c:	4b5c      	ldr	r3, [pc, #368]	; (8002710 <HAL_RCC_ClockConfig+0x238>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f023 0203 	bic.w	r2, r3, #3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ac:	f7ff f8c6 	bl	800173c <HAL_GetTick>
 80025b0:	6178      	str	r0, [r7, #20]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d112      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025bc:	f7ff f8be 	bl	800173c <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e098      	b.n	8002704 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80025d2:	4b4f      	ldr	r3, [pc, #316]	; (8002710 <HAL_RCC_ClockConfig+0x238>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d1ee      	bne.n	80025bc <HAL_RCC_ClockConfig+0xe4>
 80025de:	e03e      	b.n	800265e <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d112      	bne.n	800260e <HAL_RCC_ClockConfig+0x136>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025e8:	e00a      	b.n	8002600 <HAL_RCC_ClockConfig+0x128>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ea:	f7ff f8a7 	bl	800173c <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_ClockConfig+0x128>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e081      	b.n	8002704 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002600:	4b43      	ldr	r3, [pc, #268]	; (8002710 <HAL_RCC_ClockConfig+0x238>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b0c      	cmp	r3, #12
 800260a:	d1ee      	bne.n	80025ea <HAL_RCC_ClockConfig+0x112>
 800260c:	e027      	b.n	800265e <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d11d      	bne.n	8002652 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8002616:	e00a      	b.n	800262e <HAL_RCC_ClockConfig+0x156>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002618:	f7ff f890 	bl	800173c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e06a      	b.n	8002704 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800262e:	4b38      	ldr	r3, [pc, #224]	; (8002710 <HAL_RCC_ClockConfig+0x238>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1ee      	bne.n	8002618 <HAL_RCC_ClockConfig+0x140>
 800263a:	e010      	b.n	800265e <HAL_RCC_ClockConfig+0x186>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263c:	f7ff f87e 	bl	800173c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	; 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e058      	b.n	8002704 <HAL_RCC_ClockConfig+0x22c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8002652:	4b2f      	ldr	r3, [pc, #188]	; (8002710 <HAL_RCC_ClockConfig+0x238>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b04      	cmp	r3, #4
 800265c:	d1ee      	bne.n	800263c <HAL_RCC_ClockConfig+0x164>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800265e:	4b2b      	ldr	r3, [pc, #172]	; (800270c <HAL_RCC_ClockConfig+0x234>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0207 	and.w	r2, r3, #7
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d910      	bls.n	800268e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266c:	4927      	ldr	r1, [pc, #156]	; (800270c <HAL_RCC_ClockConfig+0x234>)
 800266e:	4b27      	ldr	r3, [pc, #156]	; (800270c <HAL_RCC_ClockConfig+0x234>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 0207 	bic.w	r2, r3, #7
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	4313      	orrs	r3, r2
 800267a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800267c:	4b23      	ldr	r3, [pc, #140]	; (800270c <HAL_RCC_ClockConfig+0x234>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0207 	and.w	r2, r3, #7
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d001      	beq.n	800268e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e03a      	b.n	8002704 <HAL_RCC_ClockConfig+0x22c>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800269a:	491d      	ldr	r1, [pc, #116]	; (8002710 <HAL_RCC_ClockConfig+0x238>)
 800269c:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <HAL_RCC_ClockConfig+0x238>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d009      	beq.n	80026cc <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026b8:	4915      	ldr	r1, [pc, #84]	; (8002710 <HAL_RCC_ClockConfig+0x238>)
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <HAL_RCC_ClockConfig+0x238>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4313      	orrs	r3, r2
 80026ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80026cc:	f000 f826 	bl	800271c <HAL_RCC_GetSysClockFreq>
 80026d0:	4601      	mov	r1, r0
 80026d2:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <HAL_RCC_ClockConfig+0x238>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026da:	23f0      	movs	r3, #240	; 0xf0
 80026dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	fab3 f383 	clz	r3, r3
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
 80026f0:	4a08      	ldr	r2, [pc, #32]	; (8002714 <HAL_RCC_ClockConfig+0x23c>)
 80026f2:	5cd3      	ldrb	r3, [r2, r3]
 80026f4:	fa21 f303 	lsr.w	r3, r1, r3
 80026f8:	4a07      	ldr	r2, [pc, #28]	; (8002718 <HAL_RCC_ClockConfig+0x240>)
 80026fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026fc:	200f      	movs	r0, #15
 80026fe:	f001 fd15 	bl	800412c <HAL_InitTick>

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40022000 	.word	0x40022000
 8002710:	40021000 	.word	0x40021000
 8002714:	080049a8 	.word	0x080049a8
 8002718:	20000004 	.word	0x20000004

0800271c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800271c:	b480      	push	{r7}
 800271e:	b095      	sub	sp, #84	; 0x54
 8002720:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8002722:	2300      	movs	r3, #0
 8002724:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002726:	2300      	movs	r3, #0
 8002728:	64bb      	str	r3, [r7, #72]	; 0x48
 800272a:	2300      	movs	r3, #0
 800272c:	643b      	str	r3, [r7, #64]	; 0x40
 800272e:	2302      	movs	r3, #2
 8002730:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002732:	2302      	movs	r3, #2
 8002734:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t sysclockfreq = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	647b      	str	r3, [r7, #68]	; 0x44

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800273a:	4b71      	ldr	r3, [pc, #452]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00b      	beq.n	800275e <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8002746:	4b6e      	ldr	r3, [pc, #440]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800274e:	2b0c      	cmp	r3, #12
 8002750:	d13c      	bne.n	80027cc <HAL_RCC_GetSysClockFreq+0xb0>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8002752:	4b6b      	ldr	r3, [pc, #428]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b01      	cmp	r3, #1
 800275c:	d136      	bne.n	80027cc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 800275e:	4b68      	ldr	r3, [pc, #416]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d112      	bne.n	8002790 <HAL_RCC_GetSysClockFreq+0x74>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 800276a:	4b65      	ldr	r3, [pc, #404]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800276c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002770:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002774:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002778:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002784:	fab3 f383 	clz	r3, r3
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
 800278c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800278e:	e00f      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8002790:	4b5b      	ldr	r3, [pc, #364]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002798:	23f0      	movs	r3, #240	; 0xf0
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	fa22 f303 	lsr.w	r3, r2, r3
 80027ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027b0:	4a54      	ldr	r2, [pc, #336]	; (8002904 <HAL_RCC_GetSysClockFreq+0x1e8>)
 80027b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b8:	64fb      	str	r3, [r7, #76]	; 0x4c

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80027ba:	4b51      	ldr	r3, [pc, #324]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d113      	bne.n	80027ee <HAL_RCC_GetSysClockFreq+0xd2>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c8:	647b      	str	r3, [r7, #68]	; 0x44
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80027ca:	e010      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0xd2>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027cc:	4b4c      	ldr	r3, [pc, #304]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 030c 	and.w	r3, r3, #12
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d102      	bne.n	80027de <HAL_RCC_GetSysClockFreq+0xc2>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027d8:	4b4b      	ldr	r3, [pc, #300]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1ec>)
 80027da:	647b      	str	r3, [r7, #68]	; 0x44
 80027dc:	e007      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0xd2>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027de:	4b48      	ldr	r3, [pc, #288]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_GetSysClockFreq+0xd2>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027ea:	4b48      	ldr	r3, [pc, #288]	; (800290c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80027ec:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80027ee:	4b44      	ldr	r3, [pc, #272]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b0c      	cmp	r3, #12
 80027f8:	d17b      	bne.n	80028f2 <HAL_RCC_GetSysClockFreq+0x1d6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80027fa:	4b41      	ldr	r3, [pc, #260]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	643b      	str	r3, [r7, #64]	; 0x40
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8002804:	4b3e      	ldr	r3, [pc, #248]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800280c:	2370      	movs	r3, #112	; 0x70
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	fa93 f3a3 	rbit	r3, r3
 8002816:	623b      	str	r3, [r7, #32]
  return(result);
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	fa22 f303 	lsr.w	r3, r2, r3
 8002822:	3301      	adds	r3, #1
 8002824:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (pllsource)
 8002826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002828:	2b02      	cmp	r3, #2
 800282a:	d002      	beq.n	8002832 <HAL_RCC_GetSysClockFreq+0x116>
 800282c:	2b03      	cmp	r3, #3
 800282e:	d018      	beq.n	8002862 <HAL_RCC_GetSysClockFreq+0x146>
 8002830:	e02f      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0x176>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8002832:	4a35      	ldr	r2, [pc, #212]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1ec>)
 8002834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002836:	fbb2 f3f3 	udiv	r3, r2, r3
 800283a:	4a31      	ldr	r2, [pc, #196]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800283c:	68d2      	ldr	r2, [r2, #12]
 800283e:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8002842:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002846:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	fa92 f2a2 	rbit	r2, r2
 800284e:	61ba      	str	r2, [r7, #24]
  return(result);
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	fab2 f282 	clz	r2, r2
 8002856:	fa21 f202 	lsr.w	r2, r1, r2
 800285a:	fb02 f303 	mul.w	r3, r2, r3
 800285e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002860:	e02f      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8002862:	4a2a      	ldr	r2, [pc, #168]	; (800290c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002866:	fbb2 f3f3 	udiv	r3, r2, r3
 800286a:	4a25      	ldr	r2, [pc, #148]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800286c:	68d2      	ldr	r2, [r2, #12]
 800286e:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8002872:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002876:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	fa92 f2a2 	rbit	r2, r2
 800287e:	613a      	str	r2, [r7, #16]
  return(result);
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	fab2 f282 	clz	r2, r2
 8002886:	fa21 f202 	lsr.w	r2, r1, r2
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002890:	e017      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8002892:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	4a19      	ldr	r2, [pc, #100]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800289c:	68d2      	ldr	r2, [r2, #12]
 800289e:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 80028a2:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80028a6:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	fa92 f2a2 	rbit	r2, r2
 80028ae:	60ba      	str	r2, [r7, #8]
  return(result);
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	fab2 f282 	clz	r2, r2
 80028b6:	fa21 f202 	lsr.w	r2, r1, r2
 80028ba:	fb02 f303 	mul.w	r3, r2, r3
 80028be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028c0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 80028c2:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028ca:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80028ce:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	603b      	str	r3, [r7, #0]
  return(result);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	fa22 f303 	lsr.w	r3, r2, r3
 80028e2:	3301      	adds	r3, #1
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    sysclockfreq = pllvco/pllr;
 80028e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f0:	647b      	str	r3, [r7, #68]	; 0x44
  }

  return sysclockfreq;
 80028f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3754      	adds	r7, #84	; 0x54
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	40021000 	.word	0x40021000
 8002904:	080049c0 	.word	0x080049c0
 8002908:	00f42400 	.word	0x00f42400
 800290c:	007a1200 	.word	0x007a1200

08002910 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <HAL_RCC_GetHCLKFreq+0x14>)
 8002916:	681b      	ldr	r3, [r3, #0]
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000004 	.word	0x20000004

08002928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800292e:	f7ff ffef 	bl	8002910 <HAL_RCC_GetHCLKFreq>
 8002932:	4601      	mov	r1, r0
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800293c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002940:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	603b      	str	r3, [r7, #0]
  return(result);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	fab3 f383 	clz	r3, r3
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
 8002954:	4a04      	ldr	r2, [pc, #16]	; (8002968 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002956:	5cd3      	ldrb	r3, [r2, r3]
 8002958:	fa21 f303 	lsr.w	r3, r1, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000
 8002968:	080049b8 	.word	0x080049b8

0800296c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	220f      	movs	r2, #15
 800297a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800297c:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <HAL_RCC_GetClockConfig+0x5c>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0203 	and.w	r2, r3, #3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <HAL_RCC_GetClockConfig+0x5c>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002994:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <HAL_RCC_GetClockConfig+0x5c>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029a0:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_GetClockConfig+0x5c>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	08db      	lsrs	r3, r3, #3
 80029a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029ae:	4b07      	ldr	r3, [pc, #28]	; (80029cc <HAL_RCC_GetClockConfig+0x60>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0207 	and.w	r2, r3, #7
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	601a      	str	r2, [r3, #0]
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40022000 	.word	0x40022000

080029d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029dc:	2300      	movs	r3, #0
 80029de:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029e0:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029ec:	f7ff f9e0 	bl	8001db0 <HAL_PWREx_GetVoltageRange>
 80029f0:	6178      	str	r0, [r7, #20]
 80029f2:	e014      	b.n	8002a1e <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029f4:	4a25      	ldr	r2, [pc, #148]	; (8002a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029f6:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002a00:	4b22      	ldr	r3, [pc, #136]	; (8002a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a0c:	f7ff f9d0 	bl	8001db0 <HAL_PWREx_GetVoltageRange>
 8002a10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a12:	4a1e      	ldr	r2, [pc, #120]	; (8002a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a14:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a24:	d10b      	bne.n	8002a3e <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b80      	cmp	r3, #128	; 0x80
 8002a2a:	d919      	bls.n	8002a60 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2ba0      	cmp	r3, #160	; 0xa0
 8002a30:	d902      	bls.n	8002a38 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a32:	2302      	movs	r3, #2
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	e013      	b.n	8002a60 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a38:	2301      	movs	r3, #1
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	e010      	b.n	8002a60 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b80      	cmp	r3, #128	; 0x80
 8002a42:	d902      	bls.n	8002a4a <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a44:	2303      	movs	r3, #3
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	e00a      	b.n	8002a60 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b80      	cmp	r3, #128	; 0x80
 8002a4e:	d102      	bne.n	8002a56 <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a50:	2302      	movs	r3, #2
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	e004      	b.n	8002a60 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b70      	cmp	r3, #112	; 0x70
 8002a5a:	d101      	bne.n	8002a60 <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	613b      	str	r3, [r7, #16]
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8002a60:	490b      	ldr	r1, [pc, #44]	; (8002a90 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002a62:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 0207 	bic.w	r2, r3, #7
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002a70:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0207 	and.w	r2, r3, #7
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d001      	beq.n	8002a82 <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40022000 	.word	0x40022000

08002a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d03f      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002abc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ac0:	d01c      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ac6:	d802      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00e      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002acc:	e01f      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ace:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ad2:	d003      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x48>
 8002ad4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ad8:	d01c      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8002ada:	e018      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002adc:	4a82      	ldr	r2, [pc, #520]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ade:	4b82      	ldr	r3, [pc, #520]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ae8:	e015      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x82>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3304      	adds	r3, #4
 8002aee:	2100      	movs	r1, #0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fadb 	bl	80030ac <RCCEx_PLLSAI1_Config>
 8002af6:	4603      	mov	r3, r0
 8002af8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002afa:	e00c      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x82>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3320      	adds	r3, #32
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fc26 	bl	8003354 <RCCEx_PLLSAI2_Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b0c:	e003      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x82>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	74fb      	strb	r3, [r7, #19]
      break;
 8002b12:	e000      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x82>
      break;
 8002b14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b16:	7cfb      	ldrb	r3, [r7, #19]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b1c:	4972      	ldr	r1, [pc, #456]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b1e:	4b72      	ldr	r3, [pc, #456]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b32:	e001      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b34:	7cfb      	ldrb	r3, [r7, #19]
 8002b36:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d03f      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b4c:	d01c      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b52:	d802      	bhi.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00e      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b58:	e01f      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b5e:	d003      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b64:	d01c      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b66:	e018      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b68:	4a5f      	ldr	r2, [pc, #380]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b6a:	4b5f      	ldr	r3, [pc, #380]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b72:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b74:	e015      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 fa95 	bl	80030ac <RCCEx_PLLSAI1_Config>
 8002b82:	4603      	mov	r3, r0
 8002b84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b86:	e00c      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3320      	adds	r3, #32
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fbe0 	bl	8003354 <RCCEx_PLLSAI2_Config>
 8002b94:	4603      	mov	r3, r0
 8002b96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b98:	e003      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    case RCC_SAI2CLKSOURCE_PIN:      /* External clock is used as source of SAI2 clock*/
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	74fb      	strb	r3, [r7, #19]
      break;
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002ba0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ba2:	7cfb      	ldrb	r3, [r7, #19]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ba8:	494f      	ldr	r1, [pc, #316]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002baa:	4b4f      	ldr	r3, [pc, #316]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bbe:	e001      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc0:	7cfb      	ldrb	r3, [r7, #19]
 8002bc2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 809a 	beq.w	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd6:	4b44      	ldr	r3, [pc, #272]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10d      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	4a41      	ldr	r2, [pc, #260]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002be4:	4b40      	ldr	r3, [pc, #256]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bec:	6593      	str	r3, [r2, #88]	; 0x58
 8002bee:	4b3e      	ldr	r3, [pc, #248]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bfe:	4a3b      	ldr	r2, [pc, #236]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c00:	4b3a      	ldr	r3, [pc, #232]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c0a:	f7fe fd97 	bl	800173c <HAL_GetTick>
 8002c0e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c10:	e009      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c12:	f7fe fd93 	bl	800173c <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d902      	bls.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x192>
      {
        ret = HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	74fb      	strb	r3, [r7, #19]
        break;
 8002c24:	e005      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c26:	4b31      	ldr	r3, [pc, #196]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0ef      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x17e>
      }
    }

    if(ret == HAL_OK)
 8002c32:	7cfb      	ldrb	r3, [r7, #19]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d15b      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c38:	4b2b      	ldr	r3, [pc, #172]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c42:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01f      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d019      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c56:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c60:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c62:	4a21      	ldr	r2, [pc, #132]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c64:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c72:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c74:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c82:	4a19      	ldr	r2, [pc, #100]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d016      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x22e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7fe fd52 	bl	800173c <HAL_GetTick>
 8002c98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x220>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9c:	f7fe fd4e 	bl	800173c <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d902      	bls.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x220>
          {
            ret = HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	74fb      	strb	r3, [r7, #19]
            break;
 8002cb2:	e006      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x22e>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0ec      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x208>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002cc2:	7cfb      	ldrb	r3, [r7, #19]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10c      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x24e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cc8:	4907      	ldr	r1, [pc, #28]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ce2:	7cfb      	ldrb	r3, [r7, #19]
 8002ce4:	74bb      	strb	r3, [r7, #18]
 8002ce6:	e005      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf4:	7c7b      	ldrb	r3, [r7, #17]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d105      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfa:	4a9e      	ldr	r2, [pc, #632]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002cfc:	4b9d      	ldr	r3, [pc, #628]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d12:	4998      	ldr	r1, [pc, #608]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002d14:	4b97      	ldr	r3, [pc, #604]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1a:	f023 0203 	bic.w	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d34:	498f      	ldr	r1, [pc, #572]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002d36:	4b8f      	ldr	r3, [pc, #572]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3c:	f023 020c 	bic.w	r2, r3, #12
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d56:	4987      	ldr	r1, [pc, #540]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002d58:	4b86      	ldr	r3, [pc, #536]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d78:	497e      	ldr	r1, [pc, #504]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002d7a:	4b7e      	ldr	r3, [pc, #504]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d80:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d9a:	4976      	ldr	r1, [pc, #472]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002d9c:	4b75      	ldr	r3, [pc, #468]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dbc:	496d      	ldr	r1, [pc, #436]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002dbe:	4b6d      	ldr	r3, [pc, #436]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dde:	4965      	ldr	r1, [pc, #404]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002de0:	4b64      	ldr	r3, [pc, #400]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e00:	495c      	ldr	r1, [pc, #368]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002e02:	4b5c      	ldr	r3, [pc, #368]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e22:	4954      	ldr	r1, [pc, #336]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002e24:	4b53      	ldr	r3, [pc, #332]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)  

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00a      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e44:	494b      	ldr	r1, [pc, #300]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002e46:	4b4b      	ldr	r3, [pc, #300]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e66:	4943      	ldr	r1, [pc, #268]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002e68:	4b42      	ldr	r3, [pc, #264]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d028      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e88:	493a      	ldr	r1, [pc, #232]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002e8a:	4b3a      	ldr	r3, [pc, #232]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x422>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ea8:	4a32      	ldr	r2, [pc, #200]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002eaa:	4b32      	ldr	r3, [pc, #200]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eb2:	60d3      	str	r3, [r2, #12]
 8002eb4:	e011      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x446>
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ebe:	d10c      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x446>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f8f0 	bl	80030ac <RCCEx_PLLSAI1_Config>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	74fb      	strb	r3, [r7, #19]
      
        if(ret != HAL_OK)
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x446>
        {
          /* set overall return value */
          status = ret;
 8002ed6:	7cfb      	ldrb	r3, [r7, #19]
 8002ed8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d028      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ee6:	4923      	ldr	r1, [pc, #140]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002ee8:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f04:	d106      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f06:	4a1b      	ldr	r2, [pc, #108]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002f08:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f10:	60d3      	str	r3, [r2, #12]
 8002f12:	e011      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    }
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f1c:	d10c      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3304      	adds	r3, #4
 8002f22:	2101      	movs	r1, #1
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 f8c1 	bl	80030ac <RCCEx_PLLSAI1_Config>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8002f2e:	7cfb      	ldrb	r3, [r7, #19]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* set overall return value */
        status = ret;
 8002f34:	7cfb      	ldrb	r3, [r7, #19]
 8002f36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d02b      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f44:	490b      	ldr	r1, [pc, #44]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002f46:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f62:	d109      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f64:	4a03      	ldr	r2, [pc, #12]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002f66:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f6e:	60d3      	str	r3, [r2, #12]
 8002f70:	e014      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2101      	movs	r1, #1
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 f88f 	bl	80030ac <RCCEx_PLLSAI1_Config>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8002f92:	7cfb      	ldrb	r3, [r7, #19]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x508>
      {
        /* set overall return value */
        status = ret;
 8002f98:	7cfb      	ldrb	r3, [r7, #19]
 8002f9a:	74bb      	strb	r3, [r7, #18]
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d02f      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x574>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fa8:	492b      	ldr	r1, [pc, #172]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002faa:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fc6:	d10d      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	2102      	movs	r1, #2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 f86c 	bl	80030ac <RCCEx_PLLSAI1_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fd8:	7cfb      	ldrb	r3, [r7, #19]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d014      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 8002fde:	7cfb      	ldrb	r3, [r7, #19]
 8002fe0:	74bb      	strb	r3, [r7, #18]
 8002fe2:	e011      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x574>
      }
    }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fec:	d10c      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3320      	adds	r3, #32
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 f9ad 	bl	8003354 <RCCEx_PLLSAI2_Config>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8002ffe:	7cfb      	ldrb	r3, [r7, #19]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 8003004:	7cfb      	ldrb	r3, [r7, #19]
 8003006:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003014:	4910      	ldr	r1, [pc, #64]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003016:	4b10      	ldr	r3, [pc, #64]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003036:	4908      	ldr	r1, [pc, #32]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003038:	4b07      	ldr	r3, [pc, #28]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* DFSDM1_Filter0 */

  return status;
 800304e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40021000 	.word	0x40021000

0800305c <HAL_RCCEx_DisableLSECSS>:
  * @brief  Disable the LSE Clock Security System.
  * @note   LSE Clock Security System can only be disabled after a LSE failure detection.
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8003060:	4a09      	ldr	r2, [pc, #36]	; (8003088 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8003062:	4b09      	ldr	r3, [pc, #36]	; (8003088 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003068:	f023 0320 	bic.w	r3, r3, #32
 800306c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  
  /* Disable LSE CSS IT if any */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 8003070:	4a05      	ldr	r2, [pc, #20]	; (8003088 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800307a:	6193      	str	r3, [r2, #24]
}
 800307c:	bf00      	nop
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000

0800308c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003090:	4a05      	ldr	r2, [pc, #20]	; (80030a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003092:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f043 0304 	orr.w	r3, r3, #4
 800309a:	6013      	str	r3, [r2, #0]
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000

080030ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030ac:	b590      	push	{r4, r7, lr}
 80030ae:	b095      	sub	sp, #84	; 0x54
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030c0:	4ba3      	ldr	r3, [pc, #652]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d023      	beq.n	8003114 <RCCEx_PLLSAI1_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030cc:	4ba0      	ldr	r3, [pc, #640]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0203 	and.w	r2, r3, #3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d117      	bne.n	800310c <RCCEx_PLLSAI1_Config+0x60>
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
       || 
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d013      	beq.n	800310c <RCCEx_PLLSAI1_Config+0x60>
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 80030e4:	4b9a      	ldr	r3, [pc, #616]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030ec:	2370      	movs	r3, #112	; 0x70
 80030ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f2:	fa93 f3a3 	rbit	r3, r3
 80030f6:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80030f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
       || 
 8003108:	429a      	cmp	r2, r3
 800310a:	d054      	beq.n	80031b6 <RCCEx_PLLSAI1_Config+0x10a>
      )
    {
      status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003112:	e050      	b.n	80031b6 <RCCEx_PLLSAI1_Config+0x10a>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d00d      	beq.n	8003138 <RCCEx_PLLSAI1_Config+0x8c>
 800311c:	2b03      	cmp	r3, #3
 800311e:	d015      	beq.n	800314c <RCCEx_PLLSAI1_Config+0xa0>
 8003120:	2b01      	cmp	r3, #1
 8003122:	d123      	bne.n	800316c <RCCEx_PLLSAI1_Config+0xc0>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003124:	4b8a      	ldr	r3, [pc, #552]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d121      	bne.n	8003174 <RCCEx_PLLSAI1_Config+0xc8>
      {
        status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8003136:	e01d      	b.n	8003174 <RCCEx_PLLSAI1_Config+0xc8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003138:	4b85      	ldr	r3, [pc, #532]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003140:	2b00      	cmp	r3, #0
 8003142:	d119      	bne.n	8003178 <RCCEx_PLLSAI1_Config+0xcc>
      {
        status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 800314a:	e015      	b.n	8003178 <RCCEx_PLLSAI1_Config+0xcc>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800314c:	4b80      	ldr	r3, [pc, #512]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d111      	bne.n	800317c <RCCEx_PLLSAI1_Config+0xd0>
 8003158:	4b7d      	ldr	r3, [pc, #500]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10b      	bne.n	800317c <RCCEx_PLLSAI1_Config+0xd0>
      {
        status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 800316a:	e007      	b.n	800317c <RCCEx_PLLSAI1_Config+0xd0>
    default:
      status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      break;
 8003172:	e004      	b.n	800317e <RCCEx_PLLSAI1_Config+0xd2>
      break;
 8003174:	bf00      	nop
 8003176:	e002      	b.n	800317e <RCCEx_PLLSAI1_Config+0xd2>
      break;
 8003178:	bf00      	nop
 800317a:	e000      	b.n	800317e <RCCEx_PLLSAI1_Config+0xd2>
      break;
 800317c:	bf00      	nop
    }
    
    if(status == HAL_OK)
 800317e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003182:	2b00      	cmp	r3, #0
 8003184:	d117      	bne.n	80031b6 <RCCEx_PLLSAI1_Config+0x10a>
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 8003186:	4c72      	ldr	r4, [pc, #456]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003188:	4b71      	ldr	r3, [pc, #452]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6819      	ldr	r1, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	1e58      	subs	r0, r3, #1
 800319a:	2370      	movs	r3, #112	; 0x70
 800319c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a0:	fa93 f3a3 	rbit	r3, r3
 80031a4:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80031a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a8:	fab3 f383 	clz	r3, r3
 80031ac:	fa00 f303 	lsl.w	r3, r0, r3
 80031b0:	430b      	orrs	r3, r1
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60e3      	str	r3, [r4, #12]
    }
  }
  
  if(status == HAL_OK)
 80031b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f040 80c2 	bne.w	8003344 <RCCEx_PLLSAI1_Config+0x298>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031c0:	4a63      	ldr	r2, [pc, #396]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 80031c2:	4b63      	ldr	r3, [pc, #396]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031cc:	f7fe fab6 	bl	800173c <HAL_GetTick>
 80031d0:	64b8      	str	r0, [r7, #72]	; 0x48

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80031d2:	e00a      	b.n	80031ea <RCCEx_PLLSAI1_Config+0x13e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031d4:	f7fe fab2 	bl	800173c <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d903      	bls.n	80031ea <RCCEx_PLLSAI1_Config+0x13e>
      {
        status = HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        break;
 80031e8:	e005      	b.n	80031f6 <RCCEx_PLLSAI1_Config+0x14a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80031ea:	4b59      	ldr	r3, [pc, #356]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1ee      	bne.n	80031d4 <RCCEx_PLLSAI1_Config+0x128>
      }
    }

    if(status == HAL_OK)    
 80031f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 80a2 	bne.w	8003344 <RCCEx_PLLSAI1_Config+0x298>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d126      	bne.n	8003254 <RCCEx_PLLSAI1_Config+0x1a8>
        MODIFY_REG(RCC->PLLSAI1CFGR, 
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (PllSai1->PLLSAI1P << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1PDIV)));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8003206:	4c52      	ldr	r4, [pc, #328]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003208:	4b51      	ldr	r3, [pc, #324]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6891      	ldr	r1, [r2, #8]
 8003218:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800321c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003220:	fa92 f2a2 	rbit	r2, r2
 8003224:	62ba      	str	r2, [r7, #40]	; 0x28
  return(result);
 8003226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003228:	fab2 f282 	clz	r2, r2
 800322c:	4091      	lsls	r1, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	68d2      	ldr	r2, [r2, #12]
 8003232:	0910      	lsrs	r0, r2, #4
 8003234:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003238:	637a      	str	r2, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800323c:	fa92 f2a2 	rbit	r2, r2
 8003240:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 8003242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003244:	fab2 f282 	clz	r2, r2
 8003248:	fa00 f202 	lsl.w	r2, r0, r2
 800324c:	430a      	orrs	r2, r1
 800324e:	4313      	orrs	r3, r2
 8003250:	6123      	str	r3, [r4, #16]
 8003252:	e051      	b.n	80032f8 <RCCEx_PLLSAI1_Config+0x24c>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d127      	bne.n	80032aa <RCCEx_PLLSAI1_Config+0x1fe>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 800325a:	4c3d      	ldr	r4, [pc, #244]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 800325c:	4b3c      	ldr	r3, [pc, #240]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003264:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6891      	ldr	r1, [r2, #8]
 800326c:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003270:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	fa92 f2a2 	rbit	r2, r2
 8003278:	61ba      	str	r2, [r7, #24]
  return(result);
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	fab2 f282 	clz	r2, r2
 8003280:	4091      	lsls	r1, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6912      	ldr	r2, [r2, #16]
 8003286:	0852      	lsrs	r2, r2, #1
 8003288:	1e50      	subs	r0, r2, #1
 800328a:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 800328e:	627a      	str	r2, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003292:	fa92 f2a2 	rbit	r2, r2
 8003296:	623a      	str	r2, [r7, #32]
  return(result);
 8003298:	6a3a      	ldr	r2, [r7, #32]
 800329a:	fab2 f282 	clz	r2, r2
 800329e:	fa00 f202 	lsl.w	r2, r0, r2
 80032a2:	430a      	orrs	r2, r1
 80032a4:	4313      	orrs	r3, r2
 80032a6:	6123      	str	r3, [r4, #16]
 80032a8:	e026      	b.n	80032f8 <RCCEx_PLLSAI1_Config+0x24c>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80032aa:	4c29      	ldr	r4, [pc, #164]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 80032ac:	4b28      	ldr	r3, [pc, #160]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6891      	ldr	r1, [r2, #8]
 80032bc:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80032c0:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	fa92 f2a2 	rbit	r2, r2
 80032c8:	60ba      	str	r2, [r7, #8]
  return(result);
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	fab2 f282 	clz	r2, r2
 80032d0:	4091      	lsls	r1, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6952      	ldr	r2, [r2, #20]
 80032d6:	0852      	lsrs	r2, r2, #1
 80032d8:	1e50      	subs	r0, r2, #1
 80032da:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80032de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	fa92 f2a2 	rbit	r2, r2
 80032e6:	613a      	str	r2, [r7, #16]
  return(result);
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	fab2 f282 	clz	r2, r2
 80032ee:	fa00 f202 	lsl.w	r2, r0, r2
 80032f2:	430a      	orrs	r2, r1
 80032f4:	4313      	orrs	r3, r2
 80032f6:	6123      	str	r3, [r4, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032f8:	4a15      	ldr	r2, [pc, #84]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 80032fa:	4b15      	ldr	r3, [pc, #84]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003302:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003304:	f7fe fa1a 	bl	800173c <HAL_GetTick>
 8003308:	64b8      	str	r0, [r7, #72]	; 0x48

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800330a:	e00a      	b.n	8003322 <RCCEx_PLLSAI1_Config+0x276>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800330c:	f7fe fa16 	bl	800173c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d903      	bls.n	8003322 <RCCEx_PLLSAI1_Config+0x276>
        {
          status = HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8003320:	e005      	b.n	800332e <RCCEx_PLLSAI1_Config+0x282>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8003322:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0ee      	beq.n	800330c <RCCEx_PLLSAI1_Config+0x260>
        }
      }

      if(status == HAL_OK)    
 800332e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <RCCEx_PLLSAI1_Config+0x298>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003336:	4906      	ldr	r1, [pc, #24]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <RCCEx_PLLSAI1_Config+0x2a4>)
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	4313      	orrs	r3, r2
 8003342:	610b      	str	r3, [r1, #16]
      }
    }
  }
  
  return status;
 8003344:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003348:	4618      	mov	r0, r3
 800334a:	3754      	adds	r7, #84	; 0x54
 800334c:	46bd      	mov	sp, r7
 800334e:	bd90      	pop	{r4, r7, pc}
 8003350:	40021000 	.word	0x40021000

08003354 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003354:	b590      	push	{r4, r7, lr}
 8003356:	b091      	sub	sp, #68	; 0x44
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
  
  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003368:	4b8d      	ldr	r3, [pc, #564]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d023      	beq.n	80033bc <RCCEx_PLLSAI2_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003374:	4b8a      	ldr	r3, [pc, #552]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0203 	and.w	r2, r3, #3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d117      	bne.n	80033b4 <RCCEx_PLLSAI2_Config+0x60>
       || 
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
       || 
 8003388:	2b00      	cmp	r3, #0
 800338a:	d013      	beq.n	80033b4 <RCCEx_PLLSAI2_Config+0x60>
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai2->PLLSAI2M)
 800338c:	4b84      	ldr	r3, [pc, #528]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003394:	2370      	movs	r3, #112	; 0x70
 8003396:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80033a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a2:	fab3 f383 	clz	r3, r3
 80033a6:	fa22 f303 	lsr.w	r3, r2, r3
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
       || 
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d054      	beq.n	800345e <RCCEx_PLLSAI2_Config+0x10a>
      )
    {
      status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80033ba:	e050      	b.n	800345e <RCCEx_PLLSAI2_Config+0x10a>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d00d      	beq.n	80033e0 <RCCEx_PLLSAI2_Config+0x8c>
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d015      	beq.n	80033f4 <RCCEx_PLLSAI2_Config+0xa0>
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d123      	bne.n	8003414 <RCCEx_PLLSAI2_Config+0xc0>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033cc:	4b74      	ldr	r3, [pc, #464]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d121      	bne.n	800341c <RCCEx_PLLSAI2_Config+0xc8>
      {
        status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 80033de:	e01d      	b.n	800341c <RCCEx_PLLSAI2_Config+0xc8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033e0:	4b6f      	ldr	r3, [pc, #444]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d119      	bne.n	8003420 <RCCEx_PLLSAI2_Config+0xcc>
      {
        status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 80033f2:	e015      	b.n	8003420 <RCCEx_PLLSAI2_Config+0xcc>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033f4:	4b6a      	ldr	r3, [pc, #424]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d111      	bne.n	8003424 <RCCEx_PLLSAI2_Config+0xd0>
 8003400:	4b67      	ldr	r3, [pc, #412]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10b      	bne.n	8003424 <RCCEx_PLLSAI2_Config+0xd0>
      {
        status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 8003412:	e007      	b.n	8003424 <RCCEx_PLLSAI2_Config+0xd0>
    default:
      status = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 800341a:	e004      	b.n	8003426 <RCCEx_PLLSAI2_Config+0xd2>
      break;
 800341c:	bf00      	nop
 800341e:	e002      	b.n	8003426 <RCCEx_PLLSAI2_Config+0xd2>
      break;
 8003420:	bf00      	nop
 8003422:	e000      	b.n	8003426 <RCCEx_PLLSAI2_Config+0xd2>
      break;
 8003424:	bf00      	nop
    }
    
    if(status == HAL_OK)
 8003426:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800342a:	2b00      	cmp	r3, #0
 800342c:	d117      	bne.n	800345e <RCCEx_PLLSAI2_Config+0x10a>
    {
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 800342e:	4c5c      	ldr	r4, [pc, #368]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 8003430:	4b5b      	ldr	r3, [pc, #364]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6819      	ldr	r1, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	1e58      	subs	r0, r3, #1
 8003442:	2370      	movs	r3, #112	; 0x70
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	fa93 f3a3 	rbit	r3, r3
 800344c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	fab3 f383 	clz	r3, r3
 8003454:	fa00 f303 	lsl.w	r3, r0, r3
 8003458:	430b      	orrs	r3, r1
 800345a:	4313      	orrs	r3, r2
 800345c:	60e3      	str	r3, [r4, #12]
    }
  }
  
  if(status == HAL_OK)
 800345e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003462:	2b00      	cmp	r3, #0
 8003464:	f040 8096 	bne.w	8003594 <RCCEx_PLLSAI2_Config+0x240>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003468:	4a4d      	ldr	r2, [pc, #308]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 800346a:	4b4d      	ldr	r3, [pc, #308]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003472:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003474:	f7fe f962 	bl	800173c <HAL_GetTick>
 8003478:	63b8      	str	r0, [r7, #56]	; 0x38

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 800347a:	e00a      	b.n	8003492 <RCCEx_PLLSAI2_Config+0x13e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800347c:	f7fe f95e 	bl	800173c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d903      	bls.n	8003492 <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        break;
 8003490:	e005      	b.n	800349e <RCCEx_PLLSAI2_Config+0x14a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8003492:	4b43      	ldr	r3, [pc, #268]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1ee      	bne.n	800347c <RCCEx_PLLSAI2_Config+0x128>
      }
    }

    if(status == HAL_OK)    
 800349e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d176      	bne.n	8003594 <RCCEx_PLLSAI2_Config+0x240>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d126      	bne.n	80034fa <RCCEx_PLLSAI2_Config+0x1a6>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR, 
 80034ac:	4c3c      	ldr	r4, [pc, #240]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 80034ae:	4b3c      	ldr	r3, [pc, #240]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6891      	ldr	r1, [r2, #8]
 80034be:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80034c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	fa92 f2a2 	rbit	r2, r2
 80034ca:	61ba      	str	r2, [r7, #24]
  return(result);
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	fab2 f282 	clz	r2, r2
 80034d2:	4091      	lsls	r1, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	68d2      	ldr	r2, [r2, #12]
 80034d8:	0910      	lsrs	r0, r2, #4
 80034da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034de:	627a      	str	r2, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e2:	fa92 f2a2 	rbit	r2, r2
 80034e6:	623a      	str	r2, [r7, #32]
  return(result);
 80034e8:	6a3a      	ldr	r2, [r7, #32]
 80034ea:	fab2 f282 	clz	r2, r2
 80034ee:	fa00 f202 	lsl.w	r2, r0, r2
 80034f2:	430a      	orrs	r2, r1
 80034f4:	4313      	orrs	r3, r2
 80034f6:	6163      	str	r3, [r4, #20]
 80034f8:	e026      	b.n	8003548 <RCCEx_PLLSAI2_Config+0x1f4>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR, 
 80034fa:	4c29      	ldr	r4, [pc, #164]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 80034fc:	4b28      	ldr	r3, [pc, #160]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003504:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6891      	ldr	r1, [r2, #8]
 800350c:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003510:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	fa92 f2a2 	rbit	r2, r2
 8003518:	60ba      	str	r2, [r7, #8]
  return(result);
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	fab2 f282 	clz	r2, r2
 8003520:	4091      	lsls	r1, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6912      	ldr	r2, [r2, #16]
 8003526:	0852      	lsrs	r2, r2, #1
 8003528:	1e50      	subs	r0, r2, #1
 800352a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800352e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	fa92 f2a2 	rbit	r2, r2
 8003536:	613a      	str	r2, [r7, #16]
  return(result);
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	fab2 f282 	clz	r2, r2
 800353e:	fa00 f202 	lsl.w	r2, r0, r2
 8003542:	430a      	orrs	r2, r1
 8003544:	4313      	orrs	r3, r2
 8003546:	6163      	str	r3, [r4, #20]
                   (PllSai2->PLLSAI2N << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2N)) | 
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2R)));
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003548:	4a15      	ldr	r2, [pc, #84]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 800354a:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003552:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7fe f8f2 	bl	800173c <HAL_GetTick>
 8003558:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 800355a:	e00a      	b.n	8003572 <RCCEx_PLLSAI2_Config+0x21e>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800355c:	f7fe f8ee 	bl	800173c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d903      	bls.n	8003572 <RCCEx_PLLSAI2_Config+0x21e>
        {
          status = HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
          break;
 8003570:	e005      	b.n	800357e <RCCEx_PLLSAI2_Config+0x22a>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8003572:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0ee      	beq.n	800355c <RCCEx_PLLSAI2_Config+0x208>
        }
      }

      if(status == HAL_OK)    
 800357e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <RCCEx_PLLSAI2_Config+0x240>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003586:	4906      	ldr	r1, [pc, #24]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <RCCEx_PLLSAI2_Config+0x24c>)
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	614b      	str	r3, [r1, #20]
      }
    }
  }
  
  return status;
 8003594:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8003598:	4618      	mov	r0, r3
 800359a:	3744      	adds	r7, #68	; 0x44
 800359c:	46bd      	mov	sp, r7
 800359e:	bd90      	pop	{r4, r7, pc}
 80035a0:	40021000 	.word	0x40021000

080035a4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e07a      	b.n	80036ac <HAL_SPI_Init+0x108>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d106      	bne.n	80035d6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7fd fdaf 	bl	8001134 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2202      	movs	r2, #2
 80035da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ec:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035f6:	d902      	bls.n	80035fe <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	e002      	b.n	8003604 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003602:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800360c:	d007      	beq.n	800361e <HAL_SPI_Init+0x7a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003616:	d002      	beq.n	800361e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10b      	bne.n	800363e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800362e:	d903      	bls.n	8003638 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	631a      	str	r2, [r3, #48]	; 0x30
 8003636:	e002      	b.n	800363e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6851      	ldr	r1, [r2, #4]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6892      	ldr	r2, [r2, #8]
 800364a:	4311      	orrs	r1, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6912      	ldr	r2, [r2, #16]
 8003650:	4311      	orrs	r1, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6952      	ldr	r2, [r2, #20]
 8003656:	4311      	orrs	r1, r2
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6992      	ldr	r2, [r2, #24]
 800365c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003660:	4311      	orrs	r1, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	69d2      	ldr	r2, [r2, #28]
 8003666:	4311      	orrs	r1, r2
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6a12      	ldr	r2, [r2, #32]
 800366c:	4311      	orrs	r1, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003672:	430a      	orrs	r2, r1
 8003674:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6992      	ldr	r2, [r2, #24]
 800367e:	0c12      	lsrs	r2, r2, #16
 8003680:	f002 0104 	and.w	r1, r2, #4
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003688:	4311      	orrs	r1, r2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800368e:	4311      	orrs	r1, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	68d2      	ldr	r2, [r2, #12]
 8003694:	4311      	orrs	r1, r2
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	430a      	orrs	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	; 0x28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
 80036c6:	2300      	movs	r3, #0
 80036c8:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80036ce:	2301      	movs	r3, #1
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_SPI_TransmitReceive+0x32>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e1e1      	b.n	8003aaa <HAL_SPI_TransmitReceive+0x3f6>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036ee:	f7fe f825 	bl	800173c <HAL_GetTick>
 80036f2:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d00e      	beq.n	8003728 <HAL_SPI_TransmitReceive+0x74>
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003710:	d106      	bne.n	8003720 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d102      	bne.n	8003720 <HAL_SPI_TransmitReceive+0x6c>
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	2b04      	cmp	r3, #4
 800371e:	d003      	beq.n	8003728 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8003720:	2302      	movs	r3, #2
 8003722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003726:	e1b6      	b.n	8003a96 <HAL_SPI_TransmitReceive+0x3e2>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_SPI_TransmitReceive+0x86>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_SPI_TransmitReceive+0x86>
 8003734:	887b      	ldrh	r3, [r7, #2]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d103      	bne.n	8003742 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003740:	e1a9      	b.n	8003a96 <HAL_SPI_TransmitReceive+0x3e2>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b04      	cmp	r3, #4
 800374c:	d003      	beq.n	8003756 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2205      	movs	r2, #5
 8003752:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	887a      	ldrh	r2, [r7, #2]
 8003766:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	887a      	ldrh	r2, [r7, #2]
 800376e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	887a      	ldrh	r2, [r7, #2]
 800377c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	887a      	ldrh	r2, [r7, #2]
 8003782:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003798:	d805      	bhi.n	80037a6 <HAL_SPI_TransmitReceive+0xf2>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d908      	bls.n	80037b8 <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	6812      	ldr	r2, [r2, #0]
 80037ae:	6852      	ldr	r2, [r2, #4]
 80037b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	e007      	b.n	80037c8 <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	6812      	ldr	r2, [r2, #0]
 80037c0:	6852      	ldr	r2, [r2, #4]
 80037c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037c6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d2:	2b40      	cmp	r3, #64	; 0x40
 80037d4:	d007      	beq.n	80037e6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037ee:	d975      	bls.n	80038dc <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d004      	beq.n	8003802 <HAL_SPI_TransmitReceive+0x14e>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d160      	bne.n	80038c4 <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	8812      	ldrh	r2, [r2, #0]
 800380a:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	3302      	adds	r3, #2
 8003810:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003820:	e050      	b.n	80038c4 <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01c      	beq.n	8003862 <HAL_SPI_TransmitReceive+0x1ae>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d017      	beq.n	8003862 <HAL_SPI_TransmitReceive+0x1ae>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b02      	cmp	r3, #2
 800383e:	d110      	bne.n	8003862 <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	8812      	ldrh	r2, [r2, #0]
 8003848:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	3302      	adds	r3, #2
 800384e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d01a      	beq.n	80038a4 <HAL_SPI_TransmitReceive+0x1f0>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b01      	cmp	r3, #1
 800387a:	d113      	bne.n	80038a4 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	b29a      	uxth	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3302      	adds	r3, #2
 800388c:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038a0:	2301      	movs	r3, #1
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038aa:	d00b      	beq.n	80038c4 <HAL_SPI_TransmitReceive+0x210>
 80038ac:	f7fd ff46 	bl	800173c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	1ad2      	subs	r2, r2, r3
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d303      	bcc.n	80038c4 <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80038c2:	e0e8      	b.n	8003a96 <HAL_SPI_TransmitReceive+0x3e2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1a9      	bne.n	8003822 <HAL_SPI_TransmitReceive+0x16e>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1a3      	bne.n	8003822 <HAL_SPI_TransmitReceive+0x16e>
 80038da:	e0ca      	b.n	8003a72 <HAL_SPI_TransmitReceive+0x3be>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_SPI_TransmitReceive+0x23c>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	f040 80b4 	bne.w	8003a58 <HAL_SPI_TransmitReceive+0x3a4>
    {
      if (hspi->TxXferCount > 1U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d90f      	bls.n	800391a <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	8812      	ldrh	r2, [r2, #0]
 8003902:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	3302      	adds	r3, #2
 8003908:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b02      	subs	r3, #2
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003918:	e09e      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x3a4>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f103 020c 	add.w	r2, r3, #12
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	1c59      	adds	r1, r3, #1
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800393a:	e08d      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x3a4>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	2b00      	cmp	r3, #0
 8003940:	d032      	beq.n	80039a8 <HAL_SPI_TransmitReceive+0x2f4>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d02d      	beq.n	80039a8 <HAL_SPI_TransmitReceive+0x2f4>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b02      	cmp	r3, #2
 8003958:	d126      	bne.n	80039a8 <HAL_SPI_TransmitReceive+0x2f4>
      {
        if (hspi->TxXferCount > 1U)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	d90f      	bls.n	8003984 <HAL_SPI_TransmitReceive+0x2d0>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	8812      	ldrh	r2, [r2, #0]
 800396c:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	3302      	adds	r3, #2
 8003972:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b02      	subs	r3, #2
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003982:	e00f      	b.n	80039a4 <HAL_SPI_TransmitReceive+0x2f0>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f103 020c 	add.w	r2, r3, #12
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	1c59      	adds	r1, r3, #1
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d041      	beq.n	8003a38 <HAL_SPI_TransmitReceive+0x384>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d13a      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x384>
      {
        if (hspi->RxXferCount > 1U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d920      	bls.n	8003a10 <HAL_SPI_TransmitReceive+0x35c>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3302      	adds	r3, #2
 80039de:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b02      	subs	r3, #2
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d81a      	bhi.n	8003a34 <HAL_SPI_TransmitReceive+0x380>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	6852      	ldr	r2, [r2, #4]
 8003a08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	e011      	b.n	8003a34 <HAL_SPI_TransmitReceive+0x380>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	607a      	str	r2, [r7, #4]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	6812      	ldr	r2, [r2, #0]
 8003a1a:	320c      	adds	r2, #12
 8003a1c:	7812      	ldrb	r2, [r2, #0]
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a34:	2301      	movs	r3, #1
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8003a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a3e:	d00b      	beq.n	8003a58 <HAL_SPI_TransmitReceive+0x3a4>
 8003a40:	f7fd fe7c 	bl	800173c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	1ad2      	subs	r2, r2, r3
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d303      	bcc.n	8003a58 <HAL_SPI_TransmitReceive+0x3a4>
      {
        errorcode = HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003a56:	e01e      	b.n	8003a96 <HAL_SPI_TransmitReceive+0x3e2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f47f af6c 	bne.w	800393c <HAL_SPI_TransmitReceive+0x288>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f47f af65 	bne.w	800393c <HAL_SPI_TransmitReceive+0x288>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 f8f3 	bl	8003c62 <SPI_EndRxTxTransaction>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_SPI_TransmitReceive+0x3d4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003aa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3728      	adds	r7, #40	; 0x28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	607a      	str	r2, [r7, #4]
 8003abe:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ac0:	e04c      	b.n	8003b5c <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ac8:	d048      	beq.n	8003b5c <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003ad0:	f7fd fe34 	bl	800173c <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	1ad2      	subs	r2, r2, r3
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d33d      	bcc.n	8003b5c <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	6852      	ldr	r2, [r2, #4]
 8003aea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003aee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003af8:	d111      	bne.n	8003b1e <SPI_WaitFlagStateUntilTimeout+0x6c>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b02:	d004      	beq.n	8003b0e <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0c:	d107      	bne.n	8003b1e <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b26:	d10f      	bne.n	8003b48 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	6812      	ldr	r2, [r2, #0]
 8003b32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	6812      	ldr	r2, [r2, #0]
 8003b42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e00e      	b.n	8003b7a <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	401a      	ands	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d101      	bne.n	8003b70 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	e000      	b.n	8003b72 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8003b70:	2200      	movs	r2, #0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d1a4      	bne.n	8003ac2 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b086      	sub	sp, #24
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8003b90:	e05a      	b.n	8003c48 <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b98:	d109      	bne.n	8003bae <SPI_WaitFifoStateUntilTimeout+0x2c>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d106      	bne.n	8003bae <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	330c      	adds	r3, #12
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bb4:	d048      	beq.n	8003c48 <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d007      	beq.n	8003bcc <SPI_WaitFifoStateUntilTimeout+0x4a>
 8003bbc:	f7fd fdbe 	bl	800173c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	1ad2      	subs	r2, r2, r3
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d33d      	bcc.n	8003c48 <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	6852      	ldr	r2, [r2, #4]
 8003bd6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003be4:	d111      	bne.n	8003c0a <SPI_WaitFifoStateUntilTimeout+0x88>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bee:	d004      	beq.n	8003bfa <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf8:	d107      	bne.n	8003c0a <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	6812      	ldr	r2, [r2, #0]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c12:	d10f      	bne.n	8003c34 <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	6812      	ldr	r2, [r2, #0]
 8003c1c:	6812      	ldr	r2, [r2, #0]
 8003c1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e008      	b.n	8003c5a <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	401a      	ands	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d19c      	bne.n	8003b92 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <SPI_EndRxTxTransaction>:
  * @param  Timeout: Timeout duration
  * @param  Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b086      	sub	sp, #24
 8003c66:	af02      	add	r7, sp, #8
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f7ff ff81 	bl	8003b82 <SPI_WaitFifoStateUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8a:	f043 0220 	orr.w	r2, r3, #32
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e027      	b.n	8003ce6 <SPI_EndRxTxTransaction+0x84>
  }
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2180      	movs	r1, #128	; 0x80
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f7ff ff06 	bl	8003ab2 <SPI_WaitFlagStateUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d007      	beq.n	8003cbc <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb0:	f043 0220 	orr.w	r2, r3, #32
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e014      	b.n	8003ce6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f7ff ff5a 	bl	8003b82 <SPI_WaitFifoStateUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d007      	beq.n	8003ce4 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd8:	f043 0220 	orr.w	r2, r3, #32
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e000      	b.n	8003ce6 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e01d      	b.n	8003d3c <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d106      	bne.n	8003d1a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fd37 	bl	8004788 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f000 f955 	bl	8003fdc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	68d2      	ldr	r2, [r2, #12]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	6812      	ldr	r2, [r2, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d122      	bne.n	8003dd6 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d11b      	bne.n	8003dd6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f06f 0202 	mvn.w	r2, #2
 8003da6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f8ee 	bl	8003f9e <HAL_TIM_IC_CaptureCallback>
 8003dc2:	e005      	b.n	8003dd0 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f8e0 	bl	8003f8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f8f1 	bl	8003fb2 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d122      	bne.n	8003e2a <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d11b      	bne.n	8003e2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f06f 0204 	mvn.w	r2, #4
 8003dfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f8c4 	bl	8003f9e <HAL_TIM_IC_CaptureCallback>
 8003e16:	e005      	b.n	8003e24 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f8b6 	bl	8003f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f8c7 	bl	8003fb2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d122      	bne.n	8003e7e <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d11b      	bne.n	8003e7e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f06f 0208 	mvn.w	r2, #8
 8003e4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2204      	movs	r2, #4
 8003e54:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f89a 	bl	8003f9e <HAL_TIM_IC_CaptureCallback>
 8003e6a:	e005      	b.n	8003e78 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f88c 	bl	8003f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f89d 	bl	8003fb2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d122      	bne.n	8003ed2 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f003 0310 	and.w	r3, r3, #16
 8003e96:	2b10      	cmp	r3, #16
 8003e98:	d11b      	bne.n	8003ed2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f06f 0210 	mvn.w	r2, #16
 8003ea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f870 	bl	8003f9e <HAL_TIM_IC_CaptureCallback>
 8003ebe:	e005      	b.n	8003ecc <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f862 	bl	8003f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f873 	bl	8003fb2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d10e      	bne.n	8003efe <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d107      	bne.n	8003efe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f06f 0201 	mvn.w	r2, #1
 8003ef6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f979 	bl	80041f0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f08:	2b80      	cmp	r3, #128	; 0x80
 8003f0a:	d10e      	bne.n	8003f2a <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f16:	2b80      	cmp	r3, #128	; 0x80
 8003f18:	d107      	bne.n	8003f2a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f22:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f8f7 	bl	8004118 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f34:	2b40      	cmp	r3, #64	; 0x40
 8003f36:	d10e      	bne.n	8003f56 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f42:	2b40      	cmp	r3, #64	; 0x40
 8003f44:	d107      	bne.n	8003f56 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f4e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f838 	bl	8003fc6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d10e      	bne.n	8003f82 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	d107      	bne.n	8003f82 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f06f 0220 	mvn.w	r2, #32
 8003f7a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f8c1 	bl	8004104 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a3c      	ldr	r2, [pc, #240]	; (80040e4 <TIM_Base_SetConfig+0x108>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d013      	beq.n	8004020 <TIM_Base_SetConfig+0x44>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffe:	d00f      	beq.n	8004020 <TIM_Base_SetConfig+0x44>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a39      	ldr	r2, [pc, #228]	; (80040e8 <TIM_Base_SetConfig+0x10c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00b      	beq.n	8004020 <TIM_Base_SetConfig+0x44>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a38      	ldr	r2, [pc, #224]	; (80040ec <TIM_Base_SetConfig+0x110>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d007      	beq.n	8004020 <TIM_Base_SetConfig+0x44>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a37      	ldr	r2, [pc, #220]	; (80040f0 <TIM_Base_SetConfig+0x114>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d003      	beq.n	8004020 <TIM_Base_SetConfig+0x44>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a36      	ldr	r2, [pc, #216]	; (80040f4 <TIM_Base_SetConfig+0x118>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d108      	bne.n	8004032 <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a2b      	ldr	r2, [pc, #172]	; (80040e4 <TIM_Base_SetConfig+0x108>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d01f      	beq.n	800407a <TIM_Base_SetConfig+0x9e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004040:	d01b      	beq.n	800407a <TIM_Base_SetConfig+0x9e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a28      	ldr	r2, [pc, #160]	; (80040e8 <TIM_Base_SetConfig+0x10c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d017      	beq.n	800407a <TIM_Base_SetConfig+0x9e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a27      	ldr	r2, [pc, #156]	; (80040ec <TIM_Base_SetConfig+0x110>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <TIM_Base_SetConfig+0x9e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a26      	ldr	r2, [pc, #152]	; (80040f0 <TIM_Base_SetConfig+0x114>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00f      	beq.n	800407a <TIM_Base_SetConfig+0x9e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a25      	ldr	r2, [pc, #148]	; (80040f4 <TIM_Base_SetConfig+0x118>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00b      	beq.n	800407a <TIM_Base_SetConfig+0x9e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a24      	ldr	r2, [pc, #144]	; (80040f8 <TIM_Base_SetConfig+0x11c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d007      	beq.n	800407a <TIM_Base_SetConfig+0x9e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a23      	ldr	r2, [pc, #140]	; (80040fc <TIM_Base_SetConfig+0x120>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d003      	beq.n	800407a <TIM_Base_SetConfig+0x9e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a22      	ldr	r2, [pc, #136]	; (8004100 <TIM_Base_SetConfig+0x124>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d108      	bne.n	800408c <TIM_Base_SetConfig+0xb0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a0f      	ldr	r2, [pc, #60]	; (80040e4 <TIM_Base_SetConfig+0x108>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00f      	beq.n	80040ca <TIM_Base_SetConfig+0xee>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a11      	ldr	r2, [pc, #68]	; (80040f4 <TIM_Base_SetConfig+0x118>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00b      	beq.n	80040ca <TIM_Base_SetConfig+0xee>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a10      	ldr	r2, [pc, #64]	; (80040f8 <TIM_Base_SetConfig+0x11c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d007      	beq.n	80040ca <TIM_Base_SetConfig+0xee>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a0f      	ldr	r2, [pc, #60]	; (80040fc <TIM_Base_SetConfig+0x120>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_Base_SetConfig+0xee>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a0e      	ldr	r2, [pc, #56]	; (8004100 <TIM_Base_SetConfig+0x124>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d103      	bne.n	80040d2 <TIM_Base_SetConfig+0xf6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	615a      	str	r2, [r3, #20]
}
 80040d8:	bf00      	nop
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	40012c00 	.word	0x40012c00
 80040e8:	40000400 	.word	0x40000400
 80040ec:	40000800 	.word	0x40000800
 80040f0:	40000c00 	.word	0x40000c00
 80040f4:	40013400 	.word	0x40013400
 80040f8:	40014000 	.word	0x40014000
 80040fc:	40014400 	.word	0x40014400
 8004100:	40014800 	.word	0x40014800

08004104 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08c      	sub	sp, #48	; 0x30
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  
  /* Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800413c:	2200      	movs	r2, #0
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	2036      	movs	r0, #54	; 0x36
 8004142:	f7fd fbf1 	bl	8001928 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004146:	2036      	movs	r0, #54	; 0x36
 8004148:	f7fd fc0a 	bl	8001960 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800414c:	4a24      	ldr	r2, [pc, #144]	; (80041e0 <HAL_InitTick+0xb4>)
 800414e:	4b24      	ldr	r3, [pc, #144]	; (80041e0 <HAL_InitTick+0xb4>)
 8004150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004152:	f043 0310 	orr.w	r3, r3, #16
 8004156:	6593      	str	r3, [r2, #88]	; 0x58
 8004158:	4b21      	ldr	r3, [pc, #132]	; (80041e0 <HAL_InitTick+0xb4>)
 800415a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415c:	f003 0310 	and.w	r3, r3, #16
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004164:	f107 020c 	add.w	r2, r7, #12
 8004168:	f107 0310 	add.w	r3, r7, #16
 800416c:	4611      	mov	r1, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe fbfc 	bl	800296c <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	2b00      	cmp	r3, #0
 800417c:	d103      	bne.n	8004186 <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800417e:	f7fe fbd3 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 8004182:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004184:	e004      	b.n	8004190 <HAL_InitTick+0x64>
  }
  else
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004186:	f7fe fbcf 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 800418a:	4603      	mov	r3, r0
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004192:	4a14      	ldr	r2, [pc, #80]	; (80041e4 <HAL_InitTick+0xb8>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	0c9b      	lsrs	r3, r3, #18
 800419a:	3b01      	subs	r3, #1
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 800419e:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <HAL_InitTick+0xbc>)
 80041a0:	4a12      	ldr	r2, [pc, #72]	; (80041ec <HAL_InitTick+0xc0>)
 80041a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80041a4:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <HAL_InitTick+0xbc>)
 80041a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80041aa:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 80041ac:	4a0e      	ldr	r2, [pc, #56]	; (80041e8 <HAL_InitTick+0xbc>)
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 80041b2:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <HAL_InitTick+0xbc>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <HAL_InitTick+0xbc>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80041be:	480a      	ldr	r0, [pc, #40]	; (80041e8 <HAL_InitTick+0xbc>)
 80041c0:	f7ff fd95 	bl	8003cee <HAL_TIM_Base_Init>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d104      	bne.n	80041d4 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 80041ca:	4807      	ldr	r0, [pc, #28]	; (80041e8 <HAL_InitTick+0xbc>)
 80041cc:	f7ff fdba 	bl	8003d44 <HAL_TIM_Base_Start_IT>
 80041d0:	4603      	mov	r3, r0
 80041d2:	e000      	b.n	80041d6 <HAL_InitTick+0xaa>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3730      	adds	r7, #48	; 0x30
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40021000 	.word	0x40021000
 80041e4:	431bde83 	.word	0x431bde83
 80041e8:	20000468 	.word	0x20000468
 80041ec:	40001000 	.word	0x40001000

080041f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 80041f8:	f7fd fa92 	bl	8001720 <HAL_IncTick>
}
 80041fc:	bf00      	nop
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8004208:	4802      	ldr	r0, [pc, #8]	; (8004214 <TIM6_DAC_IRQHandler+0x10>)
 800420a:	f7ff fdb6 	bl	8003d7a <HAL_TIM_IRQHandler>
}
 800420e:	bf00      	nop
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000468 	.word	0x20000468

08004218 <ble_stack_init>:



/** internal functions */
static void ble_stack_init(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08a      	sub	sp, #40	; 0x28
 800421c:	af04      	add	r7, sp, #16
	const char BoardName[] = { "LilBee" };
 800421e:	4a2b      	ldr	r2, [pc, #172]	; (80042cc <ble_stack_init+0xb4>)
 8004220:	f107 0310 	add.w	r3, r7, #16
 8004224:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004228:	6018      	str	r0, [r3, #0]
 800422a:	3304      	adds	r3, #4
 800422c:	8019      	strh	r1, [r3, #0]
 800422e:	3302      	adds	r3, #2
 8004230:	0c0a      	lsrs	r2, r1, #16
 8004232:	701a      	strb	r2, [r3, #0]
	uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
	uint8_t hwVersion;
	uint16_t fwVersion;

	/* Initialize the BlueNRG SPI driver */
	BNRG_SPI_Init();
 8004234:	f7fd f88c 	bl	8001350 <BNRG_SPI_Init>

	/* Initialize the BlueNRG HCI */
	HCI_Init();
 8004238:	f7fc fb66 	bl	8000908 <HCI_Init>

	/* Reset BlueNRG hardware */
	BlueNRG_RST();
 800423c:	f7fd f8ba 	bl	80013b4 <BlueNRG_RST>

	/* get the BlueNRG HW and FW versions */
	getBlueNRGVersion(&hwVersion, &fwVersion);
 8004240:	1dba      	adds	r2, r7, #6
 8004242:	f107 0309 	add.w	r3, r7, #9
 8004246:	4611      	mov	r1, r2
 8004248:	4618      	mov	r0, r3
 800424a:	f7fc fb18 	bl	800087e <getBlueNRGVersion>


	/*
	 * Reset BlueNRG again otherwise it will fail.
	 */
	BlueNRG_RST();
 800424e:	f7fd f8b1 	bl	80013b4 <BlueNRG_RST>

	aci_gatt_init();
 8004252:	f7fc f8c6 	bl	80003e2 <aci_gatt_init>

	if (hwVersion > 0x30) {
 8004256:	7a7b      	ldrb	r3, [r7, #9]
 8004258:	2b30      	cmp	r3, #48	; 0x30
 800425a:	d90e      	bls.n	800427a <ble_stack_init+0x62>
		aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07,
 800425c:	f107 020e 	add.w	r2, r7, #14
 8004260:	f107 030a 	add.w	r3, r7, #10
 8004264:	9301      	str	r3, [sp, #4]
 8004266:	f107 030c 	add.w	r3, r7, #12
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	4613      	mov	r3, r2
 800426e:	2207      	movs	r2, #7
 8004270:	2100      	movs	r1, #0
 8004272:	2001      	movs	r0, #1
 8004274:	f7fb ffa8 	bl	80001c8 <aci_gap_init_IDB05A1>
 8004278:	e008      	b.n	800428c <ble_stack_init+0x74>
			&service_handle, &dev_name_char_handle,
			&appearance_char_handle);
	} else {
		aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle,
 800427a:	f107 030a 	add.w	r3, r7, #10
 800427e:	f107 020c 	add.w	r2, r7, #12
 8004282:	f107 010e 	add.w	r1, r7, #14
 8004286:	2001      	movs	r0, #1
 8004288:	f7fb ffee 	bl	8000268 <aci_gap_init_IDB04A1>
			&dev_name_char_handle, &appearance_char_handle);
	}


	aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 800428c:	89f8      	ldrh	r0, [r7, #14]
 800428e:	89b9      	ldrh	r1, [r7, #12]
 8004290:	f107 0310 	add.w	r3, r7, #16
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	2307      	movs	r3, #7
 8004298:	2200      	movs	r2, #0
 800429a:	f7fc fa26 	bl	80006ea <aci_gatt_update_char_value>
			sizeof(BoardName), (uint8_t *) BoardName);


	aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 800429e:	2301      	movs	r3, #1
 80042a0:	9303      	str	r3, [sp, #12]
 80042a2:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <ble_stack_init+0xb8>)
 80042a4:	9302      	str	r3, [sp, #8]
 80042a6:	2300      	movs	r3, #0
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	2310      	movs	r3, #16
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	2307      	movs	r3, #7
 80042b0:	2200      	movs	r2, #0
 80042b2:	2100      	movs	r1, #0
 80042b4:	2001      	movs	r0, #1
 80042b6:	f7fc f843 	bl	8000340 <aci_gap_set_auth_requirement>
	USE_FIXED_PIN_FOR_PAIRING, 123456,
	BONDING);


	/* Set output power level */
	aci_hal_set_tx_power_level(1, 4);
 80042ba:	2104      	movs	r1, #4
 80042bc:	2001      	movs	r0, #1
 80042be:	f7fc faad 	bl	800081c <aci_hal_set_tx_power_level>

	return;
 80042c2:	bf00      	nop

}
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	0800499c 	.word	0x0800499c
 80042d0:	0001e240 	.word	0x0001e240

080042d4 <ble_service_add>:

static void ble_service_add(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08c      	sub	sp, #48	; 0x30
 80042d8:	af06      	add	r7, sp, #24
	tBleStatus ret;

	uint8_t uuid[16];

	COPY_CONFIG_SERVICE_UUID(uuid);
 80042da:	231b      	movs	r3, #27
 80042dc:	713b      	strb	r3, [r7, #4]
 80042de:	23c5      	movs	r3, #197	; 0xc5
 80042e0:	717b      	strb	r3, [r7, #5]
 80042e2:	23d5      	movs	r3, #213	; 0xd5
 80042e4:	71bb      	strb	r3, [r7, #6]
 80042e6:	23a5      	movs	r3, #165	; 0xa5
 80042e8:	71fb      	strb	r3, [r7, #7]
 80042ea:	2302      	movs	r3, #2
 80042ec:	723b      	strb	r3, [r7, #8]
 80042ee:	2300      	movs	r3, #0
 80042f0:	727b      	strb	r3, [r7, #9]
 80042f2:	23b4      	movs	r3, #180	; 0xb4
 80042f4:	72bb      	strb	r3, [r7, #10]
 80042f6:	239a      	movs	r3, #154	; 0x9a
 80042f8:	72fb      	strb	r3, [r7, #11]
 80042fa:	23e1      	movs	r3, #225	; 0xe1
 80042fc:	733b      	strb	r3, [r7, #12]
 80042fe:	2311      	movs	r3, #17
 8004300:	737b      	strb	r3, [r7, #13]
 8004302:	230f      	movs	r3, #15
 8004304:	73bb      	strb	r3, [r7, #14]
 8004306:	2300      	movs	r3, #0
 8004308:	73fb      	strb	r3, [r7, #15]
 800430a:	2300      	movs	r3, #0
 800430c:	743b      	strb	r3, [r7, #16]
 800430e:	2300      	movs	r3, #0
 8004310:	747b      	strb	r3, [r7, #17]
 8004312:	2300      	movs	r3, #0
 8004314:	74bb      	strb	r3, [r7, #18]
 8004316:	2300      	movs	r3, #0
 8004318:	74fb      	strb	r3, [r7, #19]
	ret = aci_gatt_add_serv(UUID_TYPE_128, uuid, PRIMARY_SERVICE, 1 + 3,
 800431a:	1d39      	adds	r1, r7, #4
 800431c:	4b25      	ldr	r3, [pc, #148]	; (80043b4 <ble_service_add+0xe0>)
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	2304      	movs	r3, #4
 8004322:	2201      	movs	r2, #1
 8004324:	2002      	movs	r0, #2
 8004326:	f7fc f87f 	bl	8000428 <aci_gatt_add_serv>
 800432a:	4603      	mov	r3, r0
 800432c:	75fb      	strb	r3, [r7, #23]
			&bee_service_handle);

	if (ret != BLE_STATUS_SUCCESS)
 800432e:	7dfb      	ldrb	r3, [r7, #23]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d138      	bne.n	80043a6 <ble_service_add+0xd2>
		goto fail;

	COPY_CONFIG_W2ST_CHAR_UUID(uuid);
 8004334:	231b      	movs	r3, #27
 8004336:	713b      	strb	r3, [r7, #4]
 8004338:	23c5      	movs	r3, #197	; 0xc5
 800433a:	717b      	strb	r3, [r7, #5]
 800433c:	23d5      	movs	r3, #213	; 0xd5
 800433e:	71bb      	strb	r3, [r7, #6]
 8004340:	23a5      	movs	r3, #165	; 0xa5
 8004342:	71fb      	strb	r3, [r7, #7]
 8004344:	2302      	movs	r3, #2
 8004346:	723b      	strb	r3, [r7, #8]
 8004348:	2300      	movs	r3, #0
 800434a:	727b      	strb	r3, [r7, #9]
 800434c:	2336      	movs	r3, #54	; 0x36
 800434e:	72bb      	strb	r3, [r7, #10]
 8004350:	23ac      	movs	r3, #172	; 0xac
 8004352:	72fb      	strb	r3, [r7, #11]
 8004354:	23e1      	movs	r3, #225	; 0xe1
 8004356:	733b      	strb	r3, [r7, #12]
 8004358:	2311      	movs	r3, #17
 800435a:	737b      	strb	r3, [r7, #13]
 800435c:	230f      	movs	r3, #15
 800435e:	73bb      	strb	r3, [r7, #14]
 8004360:	2300      	movs	r3, #0
 8004362:	73fb      	strb	r3, [r7, #15]
 8004364:	2302      	movs	r3, #2
 8004366:	743b      	strb	r3, [r7, #16]
 8004368:	2300      	movs	r3, #0
 800436a:	747b      	strb	r3, [r7, #17]
 800436c:	2300      	movs	r3, #0
 800436e:	74bb      	strb	r3, [r7, #18]
 8004370:	2300      	movs	r3, #0
 8004372:	74fb      	strb	r3, [r7, #19]
	ret = aci_gatt_add_char(bee_service_handle, UUID_TYPE_128, uuid,
 8004374:	4b0f      	ldr	r3, [pc, #60]	; (80043b4 <ble_service_add+0xe0>)
 8004376:	8818      	ldrh	r0, [r3, #0]
 8004378:	1d3a      	adds	r2, r7, #4
 800437a:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <ble_service_add+0xe4>)
 800437c:	9305      	str	r3, [sp, #20]
 800437e:	2300      	movs	r3, #0
 8004380:	9304      	str	r3, [sp, #16]
 8004382:	2310      	movs	r3, #16
 8004384:	9303      	str	r3, [sp, #12]
 8004386:	2300      	movs	r3, #0
 8004388:	9302      	str	r3, [sp, #8]
 800438a:	2300      	movs	r3, #0
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	2310      	movs	r3, #16
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	2304      	movs	r3, #4
 8004394:	2102      	movs	r1, #2
 8004396:	f7fc f8d3 	bl	8000540 <aci_gatt_add_char>
 800439a:	4603      	mov	r3, r0
 800439c:	75fb      	strb	r3, [r7, #23]
			CHAR_PROP_NOTIFY,
			ATTR_PERMISSION_NONE,
			GATT_DONT_NOTIFY_EVENTS, 16, 0,
			&bee_char_aggro_handle);

	if (ret != BLE_STATUS_SUCCESS) {
 800439e:	7dfb      	ldrb	r3, [r7, #23]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <ble_service_add+0xd8>
		goto fail;
 80043a4:	e000      	b.n	80043a8 <ble_service_add+0xd4>
		goto fail;
 80043a6:	bf00      	nop
	}

	return BLE_STATUS_SUCCESS;

fail:
	return BLE_STATUS_ERROR;
 80043a8:	bf00      	nop
 80043aa:	e000      	b.n	80043ae <ble_service_add+0xda>
	return BLE_STATUS_SUCCESS;
 80043ac:	bf00      	nop
}
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	200002e0 	.word	0x200002e0
 80043b8:	200002e2 	.word	0x200002e2

080043bc <ble_stop_advertisement>:
								local_name, 0, NULL, 0, 0);

}

static void ble_stop_advertisement(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
	aci_gap_set_non_discoverable();
 80043c0:	f7fb ff9c 	bl	80002fc <aci_gap_set_non_discoverable>
}
 80043c4:	bf00      	nop
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <ble_update_aggro_level>:
				0,size,val);
	}
}

static void ble_update_aggro_level(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
}
 80043cc:	bf00      	nop
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <bee_ble_init>:

/** public functions */

void bee_ble_init(void)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	af00      	add	r7, sp, #0
	ble_stack_init();
 80043da:	f7ff ff1d 	bl	8004218 <ble_stack_init>
	ble_service_add();
 80043de:	f7ff ff79 	bl	80042d4 <ble_service_add>
	ble_stop_advertisement();
 80043e2:	f7ff ffeb 	bl	80043bc <ble_stop_advertisement>
}
 80043e6:	bf00      	nop
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <bee_ble_handler>:
{
	return(state);
}

void bee_ble_handler(system_event_t ev)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	4603      	mov	r3, r0
 80043f4:	71fb      	strb	r3, [r7, #7]
	switch(ev) {
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	2b05      	cmp	r3, #5
 80043fc:	d820      	bhi.n	8004440 <bee_ble_handler+0x54>
 80043fe:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <bee_ble_handler+0x18>)
 8004400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004404:	0800441d 	.word	0x0800441d
 8004408:	08004441 	.word	0x08004441
 800440c:	08004423 	.word	0x08004423
 8004410:	08004431 	.word	0x08004431
 8004414:	08004439 	.word	0x08004439
 8004418:	08004429 	.word	0x08004429
	case k_blehcievent:
		HCI_Process();
 800441c:	f7fc faba 	bl	8000994 <HCI_Process>
		break;
 8004420:	e00e      	b.n	8004440 <bee_ble_handler+0x54>

	case k_aggresivity_available:
		ble_update_aggro_level();
 8004422:	f7ff ffd1 	bl	80043c8 <ble_update_aggro_level>
		break;
 8004426:	e00b      	b.n	8004440 <bee_ble_handler+0x54>

	case k_bleadvertising:
		state = k_bee_advertising;
 8004428:	4b07      	ldr	r3, [pc, #28]	; (8004448 <bee_ble_handler+0x5c>)
 800442a:	2200      	movs	r2, #0
 800442c:	701a      	strb	r2, [r3, #0]
		break;
 800442e:	e007      	b.n	8004440 <bee_ble_handler+0x54>

	case k_bleconnected:
		state = k_bee_connected;
 8004430:	4b05      	ldr	r3, [pc, #20]	; (8004448 <bee_ble_handler+0x5c>)
 8004432:	2202      	movs	r2, #2
 8004434:	701a      	strb	r2, [r3, #0]
		break;
 8004436:	e003      	b.n	8004440 <bee_ble_handler+0x54>

	case k_bledisconnected:
		state = k_bee_disconnected;
 8004438:	4b03      	ldr	r3, [pc, #12]	; (8004448 <bee_ble_handler+0x5c>)
 800443a:	2201      	movs	r2, #1
 800443c:	701a      	strb	r2, [r3, #0]
		break;
 800443e:	bf00      	nop
	}
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	20000000 	.word	0x20000000

0800444c <HAL_GPIO_EXTI_Callback>:


/* external reserved functions */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin){
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	2b20      	cmp	r3, #32
 800445a:	d000      	beq.n	800445e <HAL_GPIO_EXTI_Callback+0x12>
    case BNRG_SPI_EXTI_PIN:
      HCI_Isr();
      event_queue_put(k_blehcievent);
    break;
  }
}
 800445c:	e005      	b.n	800446a <HAL_GPIO_EXTI_Callback+0x1e>
      HCI_Isr();
 800445e:	f7fc fad7 	bl	8000a10 <HCI_Isr>
      event_queue_put(k_blehcievent);
 8004462:	2001      	movs	r0, #1
 8004464:	f000 f894 	bl	8004590 <event_queue_put>
    break;
 8004468:	bf00      	nop
}
 800446a:	bf00      	nop
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HCI_Event_CB>:


void HCI_Event_CB(void *pckt)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b088      	sub	sp, #32
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
	hci_uart_pckt *hci_pckt = pckt;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	61fb      	str	r3, [r7, #28]
	hci_event_pckt *event_pckt = (hci_event_pckt*) hci_pckt->data;
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	3301      	adds	r3, #1
 8004482:	61bb      	str	r3, [r7, #24]
	evt_le_meta_event *evt = NULL;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
	evt_le_connection_complete *cc = NULL;
 8004488:	2300      	movs	r3, #0
 800448a:	613b      	str	r3, [r7, #16]
	evt_blue_aci *blue_evt = NULL;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]

	if (hci_pckt->type != HCI_EVENT_PKT) {
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b04      	cmp	r3, #4
 8004496:	d12c      	bne.n	80044f2 <HCI_Event_CB+0x80>
		return;
	}

	switch (event_pckt->evt) {
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b3e      	cmp	r3, #62	; 0x3e
 800449e:	d007      	beq.n	80044b0 <HCI_Event_CB+0x3e>
 80044a0:	2bff      	cmp	r3, #255	; 0xff
 80044a2:	d015      	beq.n	80044d0 <HCI_Event_CB+0x5e>
 80044a4:	2b05      	cmp	r3, #5
 80044a6:	d125      	bne.n	80044f4 <HCI_Event_CB+0x82>

	case EVT_DISCONN_COMPLETE:
		event_queue_put(k_bledisconnected);
 80044a8:	2005      	movs	r0, #5
 80044aa:	f000 f871 	bl	8004590 <event_queue_put>

		break;
 80044ae:	e021      	b.n	80044f4 <HCI_Event_CB+0x82>
	case EVT_LE_META_EVENT:
		evt = (void *) event_pckt->data;
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	3302      	adds	r3, #2
 80044b4:	617b      	str	r3, [r7, #20]

		switch (evt->subevent) {
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d000      	beq.n	80044c0 <HCI_Event_CB+0x4e>
			cc = (void *) evt->data;
			event_queue_put(k_bleconnected);
			break;
		}

		break;
 80044be:	e019      	b.n	80044f4 <HCI_Event_CB+0x82>
			cc = (void *) evt->data;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	3301      	adds	r3, #1
 80044c4:	613b      	str	r3, [r7, #16]
			event_queue_put(k_bleconnected);
 80044c6:	2004      	movs	r0, #4
 80044c8:	f000 f862 	bl	8004590 <event_queue_put>
			break;
 80044cc:	bf00      	nop
		break;
 80044ce:	e011      	b.n	80044f4 <HCI_Event_CB+0x82>
	case EVT_VENDOR:
		blue_evt = (void*) event_pckt->data;
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	3302      	adds	r3, #2
 80044d4:	60fb      	str	r3, [r7, #12]

		switch (blue_evt->ecode) {
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f640 4201 	movw	r2, #3073	; 0xc01
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d003      	beq.n	80044ec <HCI_Event_CB+0x7a>
 80044e4:	f640 4214 	movw	r2, #3092	; 0xc14
 80044e8:	4293      	cmp	r3, r2
		case EVT_BLUE_GATT_READ_PERMIT_REQ:

			break;
 80044ea:	e000      	b.n	80044ee <HCI_Event_CB+0x7c>
		case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
			break;
 80044ec:	bf00      	nop
		}

		break;
 80044ee:	bf00      	nop
 80044f0:	e000      	b.n	80044f4 <HCI_Event_CB+0x82>
		return;
 80044f2:	bf00      	nop
	}
}
 80044f4:	3720      	adds	r7, #32
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <event_queue_peek>:
{
   /* not needed */
   return 0;
}
system_event_t event_queue_peek(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
    system_event_t ret = (noof_elements == 0)? k_noevent : event_queue[get_index];
 8004502:	4b09      	ldr	r3, [pc, #36]	; (8004528 <event_queue_peek+0x2c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d004      	beq.n	8004514 <event_queue_peek+0x18>
 800450a:	4b08      	ldr	r3, [pc, #32]	; (800452c <event_queue_peek+0x30>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a08      	ldr	r2, [pc, #32]	; (8004530 <event_queue_peek+0x34>)
 8004510:	5cd3      	ldrb	r3, [r2, r3]
 8004512:	e000      	b.n	8004516 <event_queue_peek+0x1a>
 8004514:	2300      	movs	r3, #0
 8004516:	71fb      	strb	r3, [r7, #7]
    return(ret);
 8004518:	79fb      	ldrb	r3, [r7, #7]
}
 800451a:	4618      	mov	r0, r3
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	200002ec 	.word	0x200002ec
 800452c:	200002e8 	.word	0x200002e8
 8004530:	200002f0 	.word	0x200002f0

08004534 <event_queue_get>:
system_event_t event_queue_get(void)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
    system_event_t ret = (noof_elements == 0)? k_noevent : event_queue[get_index];
 800453a:	4b12      	ldr	r3, [pc, #72]	; (8004584 <event_queue_get+0x50>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d004      	beq.n	800454c <event_queue_get+0x18>
 8004542:	4b11      	ldr	r3, [pc, #68]	; (8004588 <event_queue_get+0x54>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a11      	ldr	r2, [pc, #68]	; (800458c <event_queue_get+0x58>)
 8004548:	5cd3      	ldrb	r3, [r2, r3]
 800454a:	e000      	b.n	800454e <event_queue_get+0x1a>
 800454c:	2300      	movs	r3, #0
 800454e:	71fb      	strb	r3, [r7, #7]
    if(ret != k_noevent) {
 8004550:	79fb      	ldrb	r3, [r7, #7]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00e      	beq.n	8004574 <event_queue_get+0x40>
        get_index = (get_index + 1) % EVENT_QUEUE_LEN;
 8004556:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <event_queue_get+0x54>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3301      	adds	r3, #1
 800455c:	425a      	negs	r2, r3
 800455e:	b2db      	uxtb	r3, r3
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	bf58      	it	pl
 8004564:	4253      	negpl	r3, r2
 8004566:	4a08      	ldr	r2, [pc, #32]	; (8004588 <event_queue_get+0x54>)
 8004568:	6013      	str	r3, [r2, #0]
        noof_elements--;
 800456a:	4b06      	ldr	r3, [pc, #24]	; (8004584 <event_queue_get+0x50>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3b01      	subs	r3, #1
 8004570:	4a04      	ldr	r2, [pc, #16]	; (8004584 <event_queue_get+0x50>)
 8004572:	6013      	str	r3, [r2, #0]
    }
    return(ret);
 8004574:	79fb      	ldrb	r3, [r7, #7]
}
 8004576:	4618      	mov	r0, r3
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	200002ec 	.word	0x200002ec
 8004588:	200002e8 	.word	0x200002e8
 800458c:	200002f0 	.word	0x200002f0

08004590 <event_queue_put>:
int event_queue_put(system_event_t ev)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]

    if(noof_elements < EVENT_QUEUE_LEN) {
 800459e:	4b11      	ldr	r3, [pc, #68]	; (80045e4 <event_queue_put+0x54>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2bff      	cmp	r3, #255	; 0xff
 80045a4:	dc14      	bgt.n	80045d0 <event_queue_put+0x40>
        /* send event to the most back position of queue */
        event_queue[put_index] = ev;
 80045a6:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <event_queue_put+0x58>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4910      	ldr	r1, [pc, #64]	; (80045ec <event_queue_put+0x5c>)
 80045ac:	79fa      	ldrb	r2, [r7, #7]
 80045ae:	54ca      	strb	r2, [r1, r3]
        put_index = (put_index + 1) % EVENT_QUEUE_LEN;
 80045b0:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <event_queue_put+0x58>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3301      	adds	r3, #1
 80045b6:	425a      	negs	r2, r3
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	bf58      	it	pl
 80045be:	4253      	negpl	r3, r2
 80045c0:	4a09      	ldr	r2, [pc, #36]	; (80045e8 <event_queue_put+0x58>)
 80045c2:	6013      	str	r3, [r2, #0]
        noof_elements++;
 80045c4:	4b07      	ldr	r3, [pc, #28]	; (80045e4 <event_queue_put+0x54>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3301      	adds	r3, #1
 80045ca:	4a06      	ldr	r2, [pc, #24]	; (80045e4 <event_queue_put+0x54>)
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	e002      	b.n	80045d6 <event_queue_put+0x46>
    } else {
        /* event queue full */
        ret = -1;
 80045d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045d4:	60fb      	str	r3, [r7, #12]
    }

    return(ret);
 80045d6:	68fb      	ldr	r3, [r7, #12]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	200002ec 	.word	0x200002ec
 80045e8:	200002e4 	.word	0x200002e4
 80045ec:	200002f0 	.word	0x200002f0

080045f0 <sysclk_config>:
#include "SensorTile_audio_in.h"
#include "bee_ble_service.h"


void sysclk_config(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b0ba      	sub	sp, #232	; 0xe8
 80045f4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	605a      	str	r2, [r3, #4]
 8004600:	609a      	str	r2, [r3, #8]
 8004602:	60da      	str	r2, [r3, #12]
 8004604:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004606:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800460a:	2244      	movs	r2, #68	; 0x44
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f000 f9af 	bl	8004972 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004614:	f107 0308 	add.w	r3, r7, #8
 8004618:	2288      	movs	r2, #136	; 0x88
 800461a:	2100      	movs	r1, #0
 800461c:	4618      	mov	r0, r3
 800461e:	f000 f9a8 	bl	8004972 <memset>

  __HAL_RCC_PWR_CLK_ENABLE();
 8004622:	4a39      	ldr	r2, [pc, #228]	; (8004708 <sysclk_config+0x118>)
 8004624:	4b38      	ldr	r3, [pc, #224]	; (8004708 <sysclk_config+0x118>)
 8004626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462c:	6593      	str	r3, [r2, #88]	; 0x58
 800462e:	4b36      	ldr	r3, [pc, #216]	; (8004708 <sysclk_config+0x118>)
 8004630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004636:	607b      	str	r3, [r7, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
  HAL_PWR_EnableBkUpAccess();
 800463a:	f7fd fba9 	bl	8001d90 <HAL_PWR_EnableBkUpAccess>

  /* Enable the LSE Oscilator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 800463e:	2304      	movs	r3, #4
 8004640:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004644:	2301      	movs	r3, #1
 8004646:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 800464a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800464e:	4618      	mov	r0, r3
 8004650:	f7fd fbbc 	bl	8001dcc <HAL_RCC_OscConfig>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d000      	beq.n	800465c <sysclk_config+0x6c>
    while(1);
 800465a:	e7fe      	b.n	800465a <sysclk_config+0x6a>
  }

  /* Enable the CSS interrupt in case LSE signal is corrupted or not present */
  HAL_RCCEx_DisableLSECSS();
 800465c:	f7fe fcfe 	bl	800305c <HAL_RCCEx_DisableLSECSS>

  /* Enable MSI Oscillator and activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8004660:	2310      	movs	r3, #16
 8004662:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8004666:	2301      	movs	r3, #1
 8004668:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800466c:	2300      	movs	r3, #0
 800466e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8004672:	23b0      	movs	r3, #176	; 0xb0
 8004674:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8004678:	2302      	movs	r3, #2
 800467a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 800467e:	2301      	movs	r3, #1
 8004680:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM            = 6;
 8004684:	2306      	movs	r3, #6
 8004686:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN            = 40;
 800468a:	2328      	movs	r3, #40	; 0x28
 800468c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP            = 7;
 8004690:	2307      	movs	r3, #7
 8004692:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8004696:	2304      	movs	r3, #4
 8004698:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLR            = 4;
 800469c:	2304      	movs	r3, #4
 800469e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 80046a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fd fb90 	bl	8001dcc <HAL_RCC_OscConfig>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d000      	beq.n	80046b4 <sysclk_config+0xc4>
    while(1);
 80046b2:	e7fe      	b.n	80046b2 <sysclk_config+0xc2>
  }

  /* Enable MSI Auto-calibration through LSE */
  HAL_RCCEx_EnableMSIPLLMode();
 80046b4:	f7fe fcea 	bl	800308c <HAL_RCCEx_EnableMSIPLLMode>

  /* Select MSI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80046b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 80046be:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 80046c2:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80046c4:	f107 0308 	add.w	r3, r7, #8
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fe f9e3 	bl	8002a94 <HAL_RCCEx_PeriphCLKConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80046ce:	230f      	movs	r3, #15
 80046d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046d4:	2303      	movs	r3, #3
 80046d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046da:	2300      	movs	r3, #0
 80046dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80046e0:	2300      	movs	r3, #0
 80046e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80046e6:	2300      	movs	r3, #0
 80046e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK){
 80046ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80046f0:	2104      	movs	r1, #4
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fd fef0 	bl	80024d8 <HAL_RCC_ClockConfig>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d000      	beq.n	8004700 <sysclk_config+0x110>
    while(1);
 80046fe:	e7fe      	b.n	80046fe <sysclk_config+0x10e>
  }
}
 8004700:	bf00      	nop
 8004702:	37e8      	adds	r7, #232	; 0xe8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40021000 	.word	0x40021000

0800470c <main>:


int main(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
	HAL_Init();
 8004712:	f7fc fff7 	bl	8001704 <HAL_Init>
	sysclk_config();
 8004716:	f7ff ff6b 	bl	80045f0 <sysclk_config>

	/* inits the sub applications */
	bee_ble_init();
 800471a:	f7ff fe5c 	bl	80043d6 <bee_ble_init>

	for(;;){
		system_event_t ev = event_queue_get();
 800471e:	f7ff ff09 	bl	8004534 <event_queue_get>
 8004722:	4603      	mov	r3, r0
 8004724:	71fb      	strb	r3, [r7, #7]

		bee_ble_handler(ev);
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff fe5f 	bl	80043ec <bee_ble_handler>

		if(event_queue_peek() == k_noevent) {
 800472e:	f7ff fee5 	bl	80044fc <event_queue_peek>
	for(;;){
 8004732:	e7f4      	b.n	800471e <main+0x12>

08004734 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800476c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004738:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800473a:	e003      	b.n	8004744 <LoopCopyDataInit>

0800473c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800473c:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800473e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004740:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004742:	3104      	adds	r1, #4

08004744 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004744:	480b      	ldr	r0, [pc, #44]	; (8004774 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004746:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004748:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800474a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800474c:	d3f6      	bcc.n	800473c <CopyDataInit>
	ldr	r2, =_sbss
 800474e:	4a0b      	ldr	r2, [pc, #44]	; (800477c <LoopForever+0x12>)
	b	LoopFillZerobss
 8004750:	e002      	b.n	8004758 <LoopFillZerobss>

08004752 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004752:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004754:	f842 3b04 	str.w	r3, [r2], #4

08004758 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004758:	4b09      	ldr	r3, [pc, #36]	; (8004780 <LoopForever+0x16>)
	cmp	r2, r3
 800475a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800475c:	d3f9      	bcc.n	8004752 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800475e:	f000 f8a3 	bl	80048a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004762:	f000 f8d7 	bl	8004914 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004766:	f7ff ffd1 	bl	800470c <main>

0800476a <LoopForever>:

LoopForever:
    b LoopForever
 800476a:	e7fe      	b.n	800476a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800476c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004770:	080049f8 	.word	0x080049f8
	ldr	r0, =_sdata
 8004774:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004778:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 800477c:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 8004780:	200004a4 	.word	0x200004a4

08004784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004784:	e7fe      	b.n	8004784 <ADC1_2_IRQHandler>
	...

08004788 <HAL_TIM_Base_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM4) {
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a1a      	ldr	r2, [pc, #104]	; (8004800 <HAL_TIM_Base_MspInit+0x78>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d114      	bne.n	80047c4 <HAL_TIM_Base_MspInit+0x3c>
    /* TIMx Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800479a:	4a1a      	ldr	r2, [pc, #104]	; (8004804 <HAL_TIM_Base_MspInit+0x7c>)
 800479c:	4b19      	ldr	r3, [pc, #100]	; (8004804 <HAL_TIM_Base_MspInit+0x7c>)
 800479e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a0:	f043 0304 	orr.w	r3, r3, #4
 80047a4:	6593      	str	r3, [r2, #88]	; 0x58
 80047a6:	4b17      	ldr	r3, [pc, #92]	; (8004804 <HAL_TIM_Base_MspInit+0x7c>)
 80047a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]

    /* Set Interrupt Group Priority */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0xF, 0);
 80047b2:	2200      	movs	r2, #0
 80047b4:	210f      	movs	r1, #15
 80047b6:	201e      	movs	r0, #30
 80047b8:	f7fd f8b6 	bl	8001928 <HAL_NVIC_SetPriority>

    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80047bc:	201e      	movs	r0, #30
 80047be:	f7fd f8cf 	bl	8001960 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0xF, 0);

    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  }
}
 80047c2:	e018      	b.n	80047f6 <HAL_TIM_Base_MspInit+0x6e>
  } else if (htim->Instance == TIM5) {
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a0f      	ldr	r2, [pc, #60]	; (8004808 <HAL_TIM_Base_MspInit+0x80>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d113      	bne.n	80047f6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80047ce:	4a0d      	ldr	r2, [pc, #52]	; (8004804 <HAL_TIM_Base_MspInit+0x7c>)
 80047d0:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <HAL_TIM_Base_MspInit+0x7c>)
 80047d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d4:	f043 0308 	orr.w	r3, r3, #8
 80047d8:	6593      	str	r3, [r2, #88]	; 0x58
 80047da:	4b0a      	ldr	r3, [pc, #40]	; (8004804 <HAL_TIM_Base_MspInit+0x7c>)
 80047dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	60bb      	str	r3, [r7, #8]
 80047e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0xF, 0);
 80047e6:	2200      	movs	r2, #0
 80047e8:	210f      	movs	r1, #15
 80047ea:	2032      	movs	r0, #50	; 0x32
 80047ec:	f7fd f89c 	bl	8001928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80047f0:	2032      	movs	r0, #50	; 0x32
 80047f2:	f7fd f8b5 	bl	8001960 <HAL_NVIC_EnableIRQ>
}
 80047f6:	bf00      	nop
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40000800 	.word	0x40000800
 8004804:	40021000 	.word	0x40021000
 8004808:	40000c00 	.word	0x40000c00

0800480c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
}
 8004810:	bf00      	nop
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800481a:	b480      	push	{r7}
 800481c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800481e:	e7fe      	b.n	800481e <HardFault_Handler+0x4>

08004820 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004824:	e7fe      	b.n	8004824 <MemManage_Handler+0x4>

08004826 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004826:	b480      	push	{r7}
 8004828:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800482a:	e7fe      	b.n	800482a <BusFault_Handler+0x4>

0800482c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004830:	e7fe      	b.n	8004830 <UsageFault_Handler+0x4>

08004832 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8004832:	b480      	push	{r7}
 8004834:	af00      	add	r7, sp, #0
}
 8004836:	bf00      	nop
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
}
 8004844:	bf00      	nop
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800484e:	b480      	push	{r7}
 8004850:	af00      	add	r7, sp, #0
}
 8004852:	bf00      	nop
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8004860:	f7fc ff5e 	bl	8001720 <HAL_IncTick>
}
 8004864:	bf00      	nop
 8004866:	bd80      	pop	{r7, pc}

08004868 <TIM1_CC_IRQHandler>:
  * @brief  This function handles TIM1 Interrupt request
  * @param  None
  * @retval None
  */
void TIM1_CC_IRQHandler(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
}
 800486c:	bf00      	nop
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <EXTI9_5_IRQHandler>:
  *         interrupt request for BlueNRG.
  * @param  None
  * @retval None
  */
void BNRG_SPI_EXTI_IRQHandler(void)
{       
 8004876:	b580      	push	{r7, lr}
 8004878:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BNRG_SPI_EXTI_PIN);
 800487a:	2020      	movs	r0, #32
 800487c:	f7fd fa68 	bl	8001d50 <HAL_GPIO_EXTI_IRQHandler>
}
 8004880:	bf00      	nop
 8004882:	bd80      	pop	{r7, pc}

08004884 <OTG_FS_IRQHandler>:
  * @brief  This function handles USB-On-The-Go FS global interrupt request.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0

}
 8004888:	bf00      	nop
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8004898:	4802      	ldr	r0, [pc, #8]	; (80048a4 <TIM3_IRQHandler+0x10>)
 800489a:	f7ff fa6e 	bl	8003d7a <HAL_TIM_IRQHandler>
}
 800489e:	bf00      	nop
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000468 	.word	0x20000468

080048a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048ac:	4a17      	ldr	r2, [pc, #92]	; (800490c <SystemInit+0x64>)
 80048ae:	4b17      	ldr	r3, [pc, #92]	; (800490c <SystemInit+0x64>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80048bc:	4a14      	ldr	r2, [pc, #80]	; (8004910 <SystemInit+0x68>)
 80048be:	4b14      	ldr	r3, [pc, #80]	; (8004910 <SystemInit+0x68>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f043 0301 	orr.w	r3, r3, #1
 80048c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80048c8:	4b11      	ldr	r3, [pc, #68]	; (8004910 <SystemInit+0x68>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80048ce:	4a10      	ldr	r2, [pc, #64]	; (8004910 <SystemInit+0x68>)
 80048d0:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <SystemInit+0x68>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80048d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80048dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80048de:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <SystemInit+0x68>)
 80048e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80048e6:	4a0a      	ldr	r2, [pc, #40]	; (8004910 <SystemInit+0x68>)
 80048e8:	4b09      	ldr	r3, [pc, #36]	; (8004910 <SystemInit+0x68>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80048f2:	4b07      	ldr	r3, [pc, #28]	; (8004910 <SystemInit+0x68>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80048f8:	4b04      	ldr	r3, [pc, #16]	; (800490c <SystemInit+0x64>)
 80048fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80048fe:	609a      	str	r2, [r3, #8]
#endif
}
 8004900:	bf00      	nop
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	e000ed00 	.word	0xe000ed00
 8004910:	40021000 	.word	0x40021000

08004914 <__libc_init_array>:
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	4e0d      	ldr	r6, [pc, #52]	; (800494c <__libc_init_array+0x38>)
 8004918:	4c0d      	ldr	r4, [pc, #52]	; (8004950 <__libc_init_array+0x3c>)
 800491a:	1ba4      	subs	r4, r4, r6
 800491c:	10a4      	asrs	r4, r4, #2
 800491e:	2500      	movs	r5, #0
 8004920:	42a5      	cmp	r5, r4
 8004922:	d109      	bne.n	8004938 <__libc_init_array+0x24>
 8004924:	4e0b      	ldr	r6, [pc, #44]	; (8004954 <__libc_init_array+0x40>)
 8004926:	4c0c      	ldr	r4, [pc, #48]	; (8004958 <__libc_init_array+0x44>)
 8004928:	f000 f82c 	bl	8004984 <_init>
 800492c:	1ba4      	subs	r4, r4, r6
 800492e:	10a4      	asrs	r4, r4, #2
 8004930:	2500      	movs	r5, #0
 8004932:	42a5      	cmp	r5, r4
 8004934:	d105      	bne.n	8004942 <__libc_init_array+0x2e>
 8004936:	bd70      	pop	{r4, r5, r6, pc}
 8004938:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800493c:	4798      	blx	r3
 800493e:	3501      	adds	r5, #1
 8004940:	e7ee      	b.n	8004920 <__libc_init_array+0xc>
 8004942:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004946:	4798      	blx	r3
 8004948:	3501      	adds	r5, #1
 800494a:	e7f2      	b.n	8004932 <__libc_init_array+0x1e>
 800494c:	080049f0 	.word	0x080049f0
 8004950:	080049f0 	.word	0x080049f0
 8004954:	080049f0 	.word	0x080049f0
 8004958:	080049f4 	.word	0x080049f4

0800495c <memcpy>:
 800495c:	b510      	push	{r4, lr}
 800495e:	1e43      	subs	r3, r0, #1
 8004960:	440a      	add	r2, r1
 8004962:	4291      	cmp	r1, r2
 8004964:	d100      	bne.n	8004968 <memcpy+0xc>
 8004966:	bd10      	pop	{r4, pc}
 8004968:	f811 4b01 	ldrb.w	r4, [r1], #1
 800496c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004970:	e7f7      	b.n	8004962 <memcpy+0x6>

08004972 <memset>:
 8004972:	4402      	add	r2, r0
 8004974:	4603      	mov	r3, r0
 8004976:	4293      	cmp	r3, r2
 8004978:	d100      	bne.n	800497c <memset+0xa>
 800497a:	4770      	bx	lr
 800497c:	f803 1b01 	strb.w	r1, [r3], #1
 8004980:	e7f9      	b.n	8004976 <memset+0x4>
	...

08004984 <_init>:
 8004984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004986:	bf00      	nop
 8004988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498a:	bc08      	pop	{r3}
 800498c:	469e      	mov	lr, r3
 800498e:	4770      	bx	lr

08004990 <_fini>:
 8004990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004992:	bf00      	nop
 8004994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004996:	bc08      	pop	{r3}
 8004998:	469e      	mov	lr, r3
 800499a:	4770      	bx	lr
