
/home/venturus/LilBee/Debug/LilBee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004ca4  08004ca4  00014ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004cf8  08004cf8  00014cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004cfc  08004cfc  00014cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08004d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ram2         00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  7 .bss          0000049c  20000008  20000008  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200004a4  200004a4  00020008  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024a60  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003f36  00000000  00000000  00044a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001560  00000000  00000000  000489d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000013b0  00000000  00000000  00049f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a9c9  00000000  00000000  0004b2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007bd0  00000000  00000000  00055ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005d879  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000056dc  00000000  00000000  0005d8f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c8c 	.word	0x08004c8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08004c8c 	.word	0x08004c8c

080001c8 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08c      	sub	sp, #48	; 0x30
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	603b      	str	r3, [r7, #0]
 80001d0:	4603      	mov	r3, r0
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	460b      	mov	r3, r1
 80001d6:	71bb      	strb	r3, [r7, #6]
 80001d8:	4613      	mov	r3, r2
 80001da:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80001e0:	79bb      	ldrb	r3, [r7, #6]
 80001e2:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80001e4:	797b      	ldrb	r3, [r7, #5]
 80001e6:	75bb      	strb	r3, [r7, #22]
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 80001e8:	f107 030c 	add.w	r3, r7, #12
 80001ec:	2207      	movs	r2, #7
 80001ee:	2100      	movs	r1, #0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f001 f8a6 	bl	8001342 <Osal_MemSet>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	2218      	movs	r2, #24
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 f89f 	bl	8001342 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8000204:	233f      	movs	r3, #63	; 0x3f
 8000206:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8000208:	238a      	movs	r3, #138	; 0x8a
 800020a:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800020c:	f107 0314 	add.w	r3, r7, #20
 8000210:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8000212:	2303      	movs	r3, #3
 8000214:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8000216:	f107 030c 	add.w	r3, r7, #12
 800021a:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800021c:	2307      	movs	r3, #7
 800021e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8000220:	f107 0318 	add.w	r3, r7, #24
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f000 fd96 	bl	8000d58 <hci_send_req>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	da01      	bge.n	8000236 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8000232:	23ff      	movs	r3, #255	; 0xff
 8000234:	e014      	b.n	8000260 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8000236:	7b3b      	ldrb	r3, [r7, #12]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800023c:	7b3b      	ldrb	r3, [r7, #12]
 800023e:	e00f      	b.n	8000260 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8000240:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8000244:	b29a      	uxth	r2, r3
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800024a:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800024e:	b29a      	uxth	r2, r3
 8000250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000252:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8000254:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8000258:	b29a      	uxth	r2, r3
 800025a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800025c:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800025e:	2300      	movs	r3, #0
}
 8000260:	4618      	mov	r0, r3
 8000262:	3730      	adds	r7, #48	; 0x30
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b08e      	sub	sp, #56	; 0x38
 800026c:	af00      	add	r7, sp, #0
 800026e:	60b9      	str	r1, [r7, #8]
 8000270:	607a      	str	r2, [r7, #4]
 8000272:	603b      	str	r3, [r7, #0]
 8000274:	4603      	mov	r3, r0
 8000276:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8000278:	7bfb      	ldrb	r3, [r7, #15]
 800027a:	773b      	strb	r3, [r7, #28]
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 800027c:	f107 0314 	add.w	r3, r7, #20
 8000280:	2207      	movs	r2, #7
 8000282:	2100      	movs	r1, #0
 8000284:	4618      	mov	r0, r3
 8000286:	f001 f85c 	bl	8001342 <Osal_MemSet>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 800028a:	f107 0320 	add.w	r3, r7, #32
 800028e:	2218      	movs	r2, #24
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f001 f855 	bl	8001342 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8000298:	233f      	movs	r3, #63	; 0x3f
 800029a:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 800029c:	238a      	movs	r3, #138	; 0x8a
 800029e:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 80002a0:	f107 031c 	add.w	r3, r7, #28
 80002a4:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 80002a6:	2301      	movs	r3, #1
 80002a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 80002aa:	f107 0314 	add.w	r3, r7, #20
 80002ae:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 80002b0:	2307      	movs	r3, #7
 80002b2:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80002b4:	f107 0320 	add.w	r3, r7, #32
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fd4c 	bl	8000d58 <hci_send_req>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	da01      	bge.n	80002ca <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 80002c6:	23ff      	movs	r3, #255	; 0xff
 80002c8:	e014      	b.n	80002f4 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 80002ca:	7d3b      	ldrb	r3, [r7, #20]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 80002d0:	7d3b      	ldrb	r3, [r7, #20]
 80002d2:	e00f      	b.n	80002f4 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 80002d4:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80002d8:	b29a      	uxth	r2, r3
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80002de:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 80002e2:	b29a      	uxth	r2, r3
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80002e8:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80002ec:	b29a      	uxth	r2, r3
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80002f2:	2300      	movs	r3, #0
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	3738      	adds	r7, #56	; 0x38
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80002fc:	b590      	push	{r4, r7, lr}
 80002fe:	b095      	sub	sp, #84	; 0x54
 8000300:	af00      	add	r7, sp, #0
 8000302:	4604      	mov	r4, r0
 8000304:	4608      	mov	r0, r1
 8000306:	4611      	mov	r1, r2
 8000308:	461a      	mov	r2, r3
 800030a:	4623      	mov	r3, r4
 800030c:	71fb      	strb	r3, [r7, #7]
 800030e:	4603      	mov	r3, r0
 8000310:	80bb      	strh	r3, [r7, #4]
 8000312:	460b      	mov	r3, r1
 8000314:	807b      	strh	r3, [r7, #2]
 8000316:	4613      	mov	r3, r2
 8000318:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800031a:	2300      	movs	r3, #0
 800031c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8000320:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8000324:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000328:	4413      	add	r3, r2
 800032a:	330e      	adds	r3, #14
 800032c:	2b28      	cmp	r3, #40	; 0x28
 800032e:	d901      	bls.n	8000334 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8000330:	2342      	movs	r3, #66	; 0x42
 8000332:	e0da      	b.n	80004ea <aci_gap_set_discoverable+0x1ee>

  buffer[indx] = AdvType;
 8000334:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000338:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800033c:	4413      	add	r3, r2
 800033e:	79fa      	ldrb	r2, [r7, #7]
 8000340:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8000344:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000348:	3301      	adds	r3, #1
 800034a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800034e:	88bb      	ldrh	r3, [r7, #4]
 8000350:	80bb      	strh	r3, [r7, #4]
  Osal_MemCpy(buffer + indx, &AdvIntervMin, 2);
 8000352:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000356:	f107 0208 	add.w	r2, r7, #8
 800035a:	4413      	add	r3, r2
 800035c:	1d39      	adds	r1, r7, #4
 800035e:	2202      	movs	r2, #2
 8000360:	4618      	mov	r0, r3
 8000362:	f000 ffde 	bl	8001322 <Osal_MemCpy>
  indx +=  2;
 8000366:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800036a:	3302      	adds	r3, #2
 800036c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8000370:	887b      	ldrh	r3, [r7, #2]
 8000372:	807b      	strh	r3, [r7, #2]
  Osal_MemCpy(buffer + indx, &AdvIntervMax, 2);
 8000374:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000378:	f107 0208 	add.w	r2, r7, #8
 800037c:	4413      	add	r3, r2
 800037e:	1cb9      	adds	r1, r7, #2
 8000380:	2202      	movs	r2, #2
 8000382:	4618      	mov	r0, r3
 8000384:	f000 ffcd 	bl	8001322 <Osal_MemCpy>
  indx +=  2;
 8000388:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800038c:	3302      	adds	r3, #2
 800038e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8000392:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000396:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800039a:	4413      	add	r3, r2
 800039c:	79ba      	ldrb	r2, [r7, #6]
 800039e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80003a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80003a6:	3301      	adds	r3, #1
 80003a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 80003ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80003b0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80003b4:	4413      	add	r3, r2
 80003b6:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80003ba:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80003be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80003c2:	3301      	adds	r3, #1
 80003c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 80003c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80003cc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80003d0:	4413      	add	r3, r2
 80003d2:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80003d6:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80003da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80003de:	3301      	adds	r3, #1
 80003e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 80003e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80003e8:	f107 0208 	add.w	r2, r7, #8
 80003ec:	4413      	add	r3, r2
 80003ee:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80003f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 ff94 	bl	8001322 <Osal_MemCpy>
  indx +=  LocalNameLen;
 80003fa:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80003fe:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000402:	4413      	add	r3, r2
 8000404:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8000408:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800040c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000410:	4413      	add	r3, r2
 8000412:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8000416:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800041a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800041e:	3301      	adds	r3, #1
 8000420:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  Osal_MemCpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8000424:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000428:	f107 0208 	add.w	r2, r7, #8
 800042c:	4413      	add	r3, r2
 800042e:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8000432:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000434:	4618      	mov	r0, r3
 8000436:	f000 ff74 	bl	8001322 <Osal_MemCpy>
  indx +=  ServiceUUIDLen;  
 800043a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800043e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000442:	4413      	add	r3, r2
 8000444:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8000448:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800044c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  Osal_MemCpy(buffer + indx, &SlaveConnIntervMin, 2);
 8000450:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000454:	f107 0208 	add.w	r2, r7, #8
 8000458:	4413      	add	r3, r2
 800045a:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800045e:	2202      	movs	r2, #2
 8000460:	4618      	mov	r0, r3
 8000462:	f000 ff5e 	bl	8001322 <Osal_MemCpy>
  indx +=  2;
 8000466:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800046a:	3302      	adds	r3, #2
 800046c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8000470:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000474:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  Osal_MemCpy(buffer + indx, &SlaveConnIntervMax, 2);
 8000478:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800047c:	f107 0208 	add.w	r2, r7, #8
 8000480:	4413      	add	r3, r2
 8000482:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000486:	2202      	movs	r2, #2
 8000488:	4618      	mov	r0, r3
 800048a:	f000 ff4a 	bl	8001322 <Osal_MemCpy>
  indx +=  2;    
 800048e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000492:	3302      	adds	r3, #2
 8000494:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000498:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800049c:	2218      	movs	r2, #24
 800049e:	2100      	movs	r1, #0
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 ff4e 	bl	8001342 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80004a6:	233f      	movs	r3, #63	; 0x3f
 80004a8:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 80004aa:	2383      	movs	r3, #131	; 0x83
 80004ac:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 80004ae:	f107 0308 	add.w	r3, r7, #8
 80004b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 80004b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80004b8:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 80004ba:	f107 0333 	add.w	r3, r7, #51	; 0x33
 80004be:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 80004c0:	2301      	movs	r3, #1
 80004c2:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 80004c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 fc44 	bl	8000d58 <hci_send_req>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	da01      	bge.n	80004da <aci_gap_set_discoverable+0x1de>
    return BLE_STATUS_TIMEOUT;
 80004d6:	23ff      	movs	r3, #255	; 0xff
 80004d8:	e007      	b.n	80004ea <aci_gap_set_discoverable+0x1ee>

  if (status) {
 80004da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d002      	beq.n	80004e8 <aci_gap_set_discoverable+0x1ec>
    return status;
 80004e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80004e6:	e000      	b.n	80004ea <aci_gap_set_discoverable+0x1ee>
  }

  return 0;
 80004e8:	2300      	movs	r3, #0
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3754      	adds	r7, #84	; 0x54
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd90      	pop	{r4, r7, pc}

080004f2 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b090      	sub	sp, #64	; 0x40
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	603a      	str	r2, [r7, #0]
 80004fa:	461a      	mov	r2, r3
 80004fc:	4603      	mov	r3, r0
 80004fe:	71fb      	strb	r3, [r7, #7]
 8000500:	460b      	mov	r3, r1
 8000502:	71bb      	strb	r3, [r7, #6]
 8000504:	4613      	mov	r3, r2
 8000506:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800050c:	79bb      	ldrb	r3, [r7, #6]
 800050e:	737b      	strb	r3, [r7, #13]
  Osal_MemCpy(cp.oob_data, oob_data, 16);
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	3302      	adds	r3, #2
 8000516:	2210      	movs	r2, #16
 8000518:	6839      	ldr	r1, [r7, #0]
 800051a:	4618      	mov	r0, r3
 800051c:	f000 ff01 	bl	8001322 <Osal_MemCpy>
  cp.min_encryption_key_size = min_encryption_key_size;
 8000520:	797b      	ldrb	r3, [r7, #5]
 8000522:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8000524:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000528:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800052a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800052e:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8000532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000534:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 8000538:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800053c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000540:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000544:	2218      	movs	r2, #24
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fefa 	bl	8001342 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800054e:	233f      	movs	r3, #63	; 0x3f
 8000550:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8000552:	2386      	movs	r3, #134	; 0x86
 8000554:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 800055c:	231a      	movs	r3, #26
 800055e:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8000560:	f107 030b 	add.w	r3, r7, #11
 8000564:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 8000566:	2301      	movs	r3, #1
 8000568:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800056a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fbf1 	bl	8000d58 <hci_send_req>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	da01      	bge.n	8000580 <aci_gap_set_auth_requirement+0x8e>
    return BLE_STATUS_TIMEOUT;
 800057c:	23ff      	movs	r3, #255	; 0xff
 800057e:	e005      	b.n	800058c <aci_gap_set_auth_requirement+0x9a>

  if (status) {
 8000580:	7afb      	ldrb	r3, [r7, #11]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <aci_gap_set_auth_requirement+0x98>
    return status;
 8000586:	7afb      	ldrb	r3, [r7, #11]
 8000588:	e000      	b.n	800058c <aci_gap_set_auth_requirement+0x9a>
  }
    
  return 0;
 800058a:	2300      	movs	r3, #0
}
 800058c:	4618      	mov	r0, r3
 800058e:	3740      	adds	r7, #64	; 0x40
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  Osal_MemSet(&rq, 0, sizeof(rq));
 800059a:	f107 0308 	add.w	r3, r7, #8
 800059e:	2218      	movs	r2, #24
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fecd 	bl	8001342 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80005a8:	233f      	movs	r3, #63	; 0x3f
 80005aa:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 80005ac:	f240 1301 	movw	r3, #257	; 0x101
 80005b0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80005b2:	1dfb      	adds	r3, r7, #7
 80005b4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fbc9 	bl	8000d58 <hci_send_req>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	da01      	bge.n	80005d0 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 80005cc:	23ff      	movs	r3, #255	; 0xff
 80005ce:	e000      	b.n	80005d2 <aci_gatt_init+0x3e>

  return status;
 80005d0:	79fb      	ldrb	r3, [r7, #7]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3720      	adds	r7, #32
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b090      	sub	sp, #64	; 0x40
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6039      	str	r1, [r7, #0]
 80005e2:	4611      	mov	r1, r2
 80005e4:	461a      	mov	r2, r3
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
 80005ea:	460b      	mov	r3, r1
 80005ec:	71bb      	strb	r3, [r7, #6]
 80005ee:	4613      	mov	r3, r2
 80005f0:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 80005f8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80005fc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000600:	4413      	add	r3, r2
 8000602:	79fa      	ldrb	r2, [r7, #7]
 8000604:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8000608:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800060c:	3301      	adds	r3, #1
 800060e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d103      	bne.n	8000620 <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 8000618:	2302      	movs	r3, #2
 800061a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800061e:	e002      	b.n	8000626 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 8000620:	2310      	movs	r3, #16
 8000622:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  Osal_MemCpy(buffer + indx, service_uuid, uuid_len);
 8000626:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800062a:	f107 020c 	add.w	r2, r7, #12
 800062e:	4413      	add	r3, r2
 8000630:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000634:	6839      	ldr	r1, [r7, #0]
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fe73 	bl	8001322 <Osal_MemCpy>
  indx +=  uuid_len;
 800063c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000640:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000644:	4413      	add	r3, r2
 8000646:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800064a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800064e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000652:	4413      	add	r3, r2
 8000654:	79ba      	ldrb	r2, [r7, #6]
 8000656:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800065a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800065e:	3301      	adds	r3, #1
 8000660:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8000664:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000668:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800066c:	4413      	add	r3, r2
 800066e:	797a      	ldrb	r2, [r7, #5]
 8000670:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8000674:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000678:	3301      	adds	r3, #1
 800067a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2203      	movs	r2, #3
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fe5b 	bl	8001342 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 800068c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000690:	2218      	movs	r2, #24
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fe54 	bl	8001342 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800069a:	233f      	movs	r3, #63	; 0x3f
 800069c:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800069e:	f44f 7381 	mov.w	r3, #258	; 0x102
 80006a2:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 80006aa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80006b6:	2303      	movs	r3, #3
 80006b8:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 80006ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fb49 	bl	8000d58 <hci_send_req>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	da01      	bge.n	80006d0 <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 80006cc:	23ff      	movs	r3, #255	; 0xff
 80006ce:	e00c      	b.n	80006ea <aci_gatt_add_serv+0x110>

  if (resp.status) {
 80006d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d002      	beq.n	80006de <aci_gatt_add_serv+0x104>
    return resp.status;
 80006d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006dc:	e005      	b.n	80006ea <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 80006de:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006e6:	801a      	strh	r2, [r3, #0]

  return 0;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3740      	adds	r7, #64	; 0x40
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b092      	sub	sp, #72	; 0x48
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	603a      	str	r2, [r7, #0]
 80006fa:	461a      	mov	r2, r3
 80006fc:	4603      	mov	r3, r0
 80006fe:	80fb      	strh	r3, [r7, #6]
 8000700:	460b      	mov	r3, r1
 8000702:	717b      	strb	r3, [r7, #5]
 8000704:	4613      	mov	r3, r2
 8000706:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	80fb      	strh	r3, [r7, #6]
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 8000712:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000716:	f107 020c 	add.w	r2, r7, #12
 800071a:	4413      	add	r3, r2
 800071c:	1db9      	adds	r1, r7, #6
 800071e:	2202      	movs	r2, #2
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fdfe 	bl	8001322 <Osal_MemCpy>
  indx += 2;
 8000726:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800072a:	3302      	adds	r3, #2
 800072c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 8000730:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000734:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000738:	4413      	add	r3, r2
 800073a:	797a      	ldrb	r2, [r7, #5]
 800073c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8000740:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000744:	3301      	adds	r3, #1
 8000746:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800074a:	797b      	ldrb	r3, [r7, #5]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d103      	bne.n	8000758 <aci_gatt_add_char+0x66>
    uuid_len = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000756:	e002      	b.n	800075e <aci_gatt_add_char+0x6c>
  }
  else {
    uuid_len = 16;
 8000758:	2310      	movs	r3, #16
 800075a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  Osal_MemCpy(buffer + indx, charUuid, uuid_len);
 800075e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000762:	f107 020c 	add.w	r2, r7, #12
 8000766:	4413      	add	r3, r2
 8000768:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800076c:	6839      	ldr	r1, [r7, #0]
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fdd7 	bl	8001322 <Osal_MemCpy>
  indx +=  uuid_len;
 8000774:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8000778:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800077c:	4413      	add	r3, r2
 800077e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 8000782:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000786:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800078a:	4413      	add	r3, r2
 800078c:	793a      	ldrb	r2, [r7, #4]
 800078e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8000792:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000796:	3301      	adds	r3, #1
 8000798:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 800079c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007a4:	4413      	add	r3, r2
 80007a6:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80007aa:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80007ae:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007b2:	3301      	adds	r3, #1
 80007b4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 80007b8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007c0:	4413      	add	r3, r2
 80007c2:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80007c6:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80007ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007ce:	3301      	adds	r3, #1
 80007d0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 80007d4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007dc:	4413      	add	r3, r2
 80007de:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80007e2:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80007e6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007ea:	3301      	adds	r3, #1
 80007ec:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 80007f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007f8:	4413      	add	r3, r2
 80007fa:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80007fe:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8000802:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000806:	3301      	adds	r3, #1
 8000808:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800080c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000810:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000814:	4413      	add	r3, r2
 8000816:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800081a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800081e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000822:	3301      	adds	r3, #1
 8000824:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 8000828:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082c:	2203      	movs	r2, #3
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fd86 	bl	8001342 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083a:	2218      	movs	r2, #24
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fd7f 	bl	8001342 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8000844:	233f      	movs	r3, #63	; 0x3f
 8000846:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8000848:	f44f 7382 	mov.w	r3, #260	; 0x104
 800084c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8000854:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000858:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 800085a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8000860:	2303      	movs	r3, #3
 8000862:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8000864:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fa74 	bl	8000d58 <hci_send_req>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	da01      	bge.n	800087a <aci_gatt_add_char+0x188>
    return BLE_STATUS_TIMEOUT;
 8000876:	23ff      	movs	r3, #255	; 0xff
 8000878:	e00c      	b.n	8000894 <aci_gatt_add_char+0x1a2>

  if (resp.status) {
 800087a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800087e:	2b00      	cmp	r3, #0
 8000880:	d002      	beq.n	8000888 <aci_gatt_add_char+0x196>
    return resp.status;
 8000882:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000886:	e005      	b.n	8000894 <aci_gatt_add_char+0x1a2>
  }
    
  *charHandle = btohs(resp.handle);
 8000888:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 800088c:	b29a      	uxth	r2, r3
 800088e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000890:	801a      	strh	r2, [r3, #0]

  return 0;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	3748      	adds	r7, #72	; 0x48
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b0ab      	sub	sp, #172	; 0xac
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4604      	mov	r4, r0
 80008a4:	4608      	mov	r0, r1
 80008a6:	4611      	mov	r1, r2
 80008a8:	461a      	mov	r2, r3
 80008aa:	4623      	mov	r3, r4
 80008ac:	80fb      	strh	r3, [r7, #6]
 80008ae:	4603      	mov	r3, r0
 80008b0:	80bb      	strh	r3, [r7, #4]
 80008b2:	460b      	mov	r3, r1
 80008b4:	70fb      	strb	r3, [r7, #3]
 80008b6:	4613      	mov	r3, r2
 80008b8:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80008c0:	78bb      	ldrb	r3, [r7, #2]
 80008c2:	3306      	adds	r3, #6
 80008c4:	2b80      	cmp	r3, #128	; 0x80
 80008c6:	dd01      	ble.n	80008cc <aci_gatt_update_char_value+0x30>
    return BLE_STATUS_INVALID_PARAMS;
 80008c8:	2342      	movs	r3, #66	; 0x42
 80008ca:	e07c      	b.n	80009c6 <aci_gatt_update_char_value+0x12a>

  servHandle = htobs(servHandle);
 80008cc:	88fb      	ldrh	r3, [r7, #6]
 80008ce:	80fb      	strh	r3, [r7, #6]
  Osal_MemCpy(buffer + indx, &servHandle, 2);
 80008d0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80008d4:	f107 0208 	add.w	r2, r7, #8
 80008d8:	4413      	add	r3, r2
 80008da:	1db9      	adds	r1, r7, #6
 80008dc:	2202      	movs	r2, #2
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 fd1f 	bl	8001322 <Osal_MemCpy>
  indx += 2;
 80008e4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80008e8:	3302      	adds	r3, #2
 80008ea:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 80008ee:	88bb      	ldrh	r3, [r7, #4]
 80008f0:	80bb      	strh	r3, [r7, #4]
  Osal_MemCpy(buffer + indx, &charHandle, 2);
 80008f2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80008f6:	f107 0208 	add.w	r2, r7, #8
 80008fa:	4413      	add	r3, r2
 80008fc:	1d39      	adds	r1, r7, #4
 80008fe:	2202      	movs	r2, #2
 8000900:	4618      	mov	r0, r3
 8000902:	f000 fd0e 	bl	8001322 <Osal_MemCpy>
  indx += 2;
 8000906:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800090a:	3302      	adds	r3, #2
 800090c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 8000910:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000914:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000918:	4413      	add	r3, r2
 800091a:	78fa      	ldrb	r2, [r7, #3]
 800091c:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8000920:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000924:	3301      	adds	r3, #1
 8000926:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 800092a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800092e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000932:	4413      	add	r3, r2
 8000934:	78ba      	ldrb	r2, [r7, #2]
 8000936:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800093a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800093e:	3301      	adds	r3, #1
 8000940:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 8000944:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000948:	f107 0208 	add.w	r2, r7, #8
 800094c:	4413      	add	r3, r2
 800094e:	78ba      	ldrb	r2, [r7, #2]
 8000950:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8000954:	4618      	mov	r0, r3
 8000956:	f000 fce4 	bl	8001322 <Osal_MemCpy>
  indx +=  charValueLen;
 800095a:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800095e:	78bb      	ldrb	r3, [r7, #2]
 8000960:	4413      	add	r3, r2
 8000962:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  Osal_MemSet(&rq, 0, sizeof(rq));
 8000966:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800096a:	2218      	movs	r2, #24
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f000 fce7 	bl	8001342 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 8000974:	233f      	movs	r3, #63	; 0x3f
 8000976:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800097a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800097e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800098a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800098e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8000992:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8000996:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800099a:	2301      	movs	r3, #1
 800099c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 80009a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f9d6 	bl	8000d58 <hci_send_req>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	da01      	bge.n	80009b6 <aci_gatt_update_char_value+0x11a>
    return BLE_STATUS_TIMEOUT;
 80009b2:	23ff      	movs	r3, #255	; 0xff
 80009b4:	e007      	b.n	80009c6 <aci_gatt_update_char_value+0x12a>

  if (status) {
 80009b6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d002      	beq.n	80009c4 <aci_gatt_update_char_value+0x128>
    return status;
 80009be:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80009c2:	e000      	b.n	80009c6 <aci_gatt_update_char_value+0x12a>
  }

  return 0;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	37ac      	adds	r7, #172	; 0xac
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd90      	pop	{r4, r7, pc}

080009ce <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b08a      	sub	sp, #40	; 0x28
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	4603      	mov	r3, r0
 80009d6:	460a      	mov	r2, r1
 80009d8:	71fb      	strb	r3, [r7, #7]
 80009da:	4613      	mov	r3, r2
 80009dc:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 80009e2:	79bb      	ldrb	r3, [r7, #6]
 80009e4:	737b      	strb	r3, [r7, #13]

  Osal_MemSet(&rq, 0, sizeof(rq));
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	2218      	movs	r2, #24
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 fca7 	bl	8001342 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 80009f4:	233f      	movs	r3, #63	; 0x3f
 80009f6:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 80009f8:	230f      	movs	r3, #15
 80009fa:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8000a02:	2302      	movs	r3, #2
 8000a04:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8000a06:	f107 030b 	add.w	r3, r7, #11
 8000a0a:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f99e 	bl	8000d58 <hci_send_req>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	da01      	bge.n	8000a26 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8000a22:	23ff      	movs	r3, #255	; 0xff
 8000a24:	e000      	b.n	8000a28 <aci_hal_set_tx_power_level+0x5a>

  return status;
 8000a26:	7afb      	ldrb	r3, [r7, #11]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3728      	adds	r7, #40	; 0x28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <getBlueNRGVersion>:
  
  return ret;
}

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b089      	sub	sp, #36	; 0x24
 8000a34:	af02      	add	r7, sp, #8
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8000a3a:	f107 0410 	add.w	r4, r7, #16
 8000a3e:	f107 0215 	add.w	r2, r7, #21
 8000a42:	f107 0112 	add.w	r1, r7, #18
 8000a46:	f107 0016 	add.w	r0, r7, #22
 8000a4a:	f107 030e 	add.w	r3, r7, #14
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	4623      	mov	r3, r4
 8000a52:	f000 faab 	bl	8000fac <hci_le_read_local_version>
 8000a56:	4603      	mov	r3, r0
 8000a58:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8000a5a:	7dfb      	ldrb	r3, [r7, #23]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d126      	bne.n	8000aae <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8000a60:	8a7b      	ldrh	r3, [r7, #18]
 8000a62:	0a1b      	lsrs	r3, r3, #8
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8000a6c:	8a7b      	ldrh	r3, [r7, #18]
 8000a6e:	021b      	lsls	r3, r3, #8
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	b21a      	sxth	r2, r3
 8000a7c:	89fb      	ldrh	r3, [r7, #14]
 8000a7e:	091b      	lsrs	r3, r3, #4
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	011b      	lsls	r3, r3, #4
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	b21b      	sxth	r3, r3
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	b21b      	sxth	r3, r3
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	b21a      	sxth	r2, r3
 8000a9a:	89fb      	ldrh	r3, [r7, #14]
 8000a9c:	b21b      	sxth	r3, r3
 8000a9e:	f003 030f 	and.w	r3, r3, #15
 8000aa2:	b21b      	sxth	r3, r3
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	b21b      	sxth	r3, r3
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	801a      	strh	r2, [r3, #0]
  }

  return status;
 8000aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	371c      	adds	r7, #28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd90      	pop	{r4, r7, pc}

08000ab8 <HCI_Init>:
  hci_timeout = 1;
  return;
}

void HCI_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  uint8_t index;
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head (&hciReadPktPool);
 8000abe:	480e      	ldr	r0, [pc, #56]	; (8000af8 <HCI_Init+0x40>)
 8000ac0:	f000 faff 	bl	80010c2 <list_init_head>
  list_init_head (&hciReadPktRxQueue);
 8000ac4:	480d      	ldr	r0, [pc, #52]	; (8000afc <HCI_Init+0x44>)
 8000ac6:	f000 fafc 	bl	80010c2 <list_init_head>
  
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8000aca:	2300      	movs	r3, #0
 8000acc:	71fb      	strb	r3, [r7, #7]
 8000ace:	e00c      	b.n	8000aea <HCI_Init+0x32>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	228c      	movs	r2, #140	; 0x8c
 8000ad4:	fb02 f303 	mul.w	r3, r2, r3
 8000ad8:	4a09      	ldr	r2, [pc, #36]	; (8000b00 <HCI_Init+0x48>)
 8000ada:	4413      	add	r3, r2
 8000adc:	4619      	mov	r1, r3
 8000ade:	4806      	ldr	r0, [pc, #24]	; (8000af8 <HCI_Init+0x40>)
 8000ae0:	f000 fb43 	bl	800116a <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	71fb      	strb	r3, [r7, #7]
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b04      	cmp	r3, #4
 8000aee:	d9ef      	bls.n	8000ad0 <HCI_Init+0x18>
  }
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200003f0 	.word	0x200003f0
 8000afc:	200003f8 	.word	0x200003f8
 8000b00:	20000024 	.word	0x20000024

08000b04 <HCI_verify>:
 *
 * @param[in] hciReadPacket    The packet that is received from HCI interface.
 * @return 0 if HCI packet is as expected
 */
int HCI_verify(const tHciDataPacket * hciReadPacket)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3308      	adds	r3, #8
 8000b10:	60fb      	str	r3, [r7, #12]
  
  if(hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	d001      	beq.n	8000b1e <HCI_verify+0x1a>
    return 1;  /* Incorrect type. */
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00c      	b.n	8000b38 <HCI_verify+0x34>
  
  if(hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3302      	adds	r3, #2
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d001      	beq.n	8000b36 <HCI_verify+0x32>
    return 2; /* Wrong length (packet truncated or too long). */
 8000b32:	2302      	movs	r3, #2
 8000b34:	e000      	b.n	8000b38 <HCI_verify+0x34>
  
  return 0;      
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <HCI_Process>:

void HCI_Process(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
  
  Disable_SPI_IRQ();
 8000b4e:	f000 fede 	bl	800190e <Disable_SPI_IRQ>
  uint8_t list_empty = list_is_empty(&hciReadPktRxQueue);        
 8000b52:	4814      	ldr	r0, [pc, #80]	; (8000ba4 <HCI_Process+0x60>)
 8000b54:	f000 fac5 	bl	80010e2 <list_is_empty>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	71fb      	strb	r3, [r7, #7]
  /* process any pending events read */
  while(list_empty == FALSE)
 8000b5c:	e017      	b.n	8000b8e <HCI_Process+0x4a>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8000b5e:	463b      	mov	r3, r7
 8000b60:	4619      	mov	r1, r3
 8000b62:	4810      	ldr	r0, [pc, #64]	; (8000ba4 <HCI_Process+0x60>)
 8000b64:	f000 fb44 	bl	80011f0 <list_remove_head>
    Enable_SPI_IRQ();
 8000b68:	f000 feca 	bl	8001900 <Enable_SPI_IRQ>
    HCI_Event_CB(hciReadPacket->dataBuff);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	3308      	adds	r3, #8
 8000b70:	4618      	mov	r0, r3
 8000b72:	f003 fdfe 	bl	8004772 <HCI_Event_CB>
    Disable_SPI_IRQ();
 8000b76:	f000 feca 	bl	800190e <Disable_SPI_IRQ>
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480a      	ldr	r0, [pc, #40]	; (8000ba8 <HCI_Process+0x64>)
 8000b80:	f000 faf3 	bl	800116a <list_insert_tail>
    list_empty = list_is_empty(&hciReadPktRxQueue);
 8000b84:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <HCI_Process+0x60>)
 8000b86:	f000 faac 	bl	80010e2 <list_is_empty>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
  while(list_empty == FALSE)
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d0e4      	beq.n	8000b5e <HCI_Process+0x1a>
  }
  /* Explicit call to HCI_Isr(), since it cannot be called by ISR if IRQ is kept high by
  BlueNRG. */
  HCI_Isr();
 8000b94:	f000 f814 	bl	8000bc0 <HCI_Isr>
  Enable_SPI_IRQ();    
 8000b98:	f000 feb2 	bl	8001900 <Enable_SPI_IRQ>
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200003f8 	.word	0x200003f8
 8000ba8:	200003f0 	.word	0x200003f0

08000bac <HCI_Queue_Empty>:

BOOL HCI_Queue_Empty(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  return list_is_empty(&hciReadPktRxQueue);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <HCI_Queue_Empty+0x10>)
 8000bb2:	f000 fa96 	bl	80010e2 <list_is_empty>
 8000bb6:	4603      	mov	r3, r0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200003f8 	.word	0x200003f8

08000bc0 <HCI_Isr>:

void HCI_Isr(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
  uint8_t data_len;
  
  Clear_SPI_EXTI_Flag();
 8000bca:	f000 fea7 	bl	800191c <Clear_SPI_EXTI_Flag>
  while(BlueNRG_DataPresent()){        
 8000bce:	e037      	b.n	8000c40 <HCI_Isr+0x80>
    if (list_is_empty (&hciReadPktPool) == FALSE){
 8000bd0:	481f      	ldr	r0, [pc, #124]	; (8000c50 <HCI_Isr+0x90>)
 8000bd2:	f000 fa86 	bl	80010e2 <list_is_empty>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d12c      	bne.n	8000c36 <HCI_Isr+0x76>
      
      /* enqueueing a packet for read */
      list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	481b      	ldr	r0, [pc, #108]	; (8000c50 <HCI_Isr+0x90>)
 8000be2:	f000 fb05 	bl	80011f0 <list_remove_head>
      
      data_len = BlueNRG_SPI_Read_All(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	3308      	adds	r3, #8
 8000bea:	2180      	movs	r1, #128	; 0x80
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fd1f 	bl	8001630 <BlueNRG_SPI_Read_All>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
      if(data_len > 0){                    
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d016      	beq.n	8000c2a <HCI_Isr+0x6a>
        hciReadPacket->data_len = data_len;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	79fa      	ldrb	r2, [r7, #7]
 8000c00:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if(HCI_verify(hciReadPacket) == 0)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff7c 	bl	8000b04 <HCI_verify>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d105      	bne.n	8000c1e <HCI_Isr+0x5e>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	480f      	ldr	r0, [pc, #60]	; (8000c54 <HCI_Isr+0x94>)
 8000c18:	f000 faa7 	bl	800116a <list_insert_tail>
 8000c1c:	e00e      	b.n	8000c3c <HCI_Isr+0x7c>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	480b      	ldr	r0, [pc, #44]	; (8000c50 <HCI_Isr+0x90>)
 8000c24:	f000 fa7d 	bl	8001122 <list_insert_head>
 8000c28:	e008      	b.n	8000c3c <HCI_Isr+0x7c>
      }
      else {
        // Insert the packet back into the pool.
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4808      	ldr	r0, [pc, #32]	; (8000c50 <HCI_Isr+0x90>)
 8000c30:	f000 fa77 	bl	8001122 <list_insert_head>
 8000c34:	e002      	b.n	8000c3c <HCI_Isr+0x7c>
      }
      
    }
    else{
      // HCI Read Packet Pool is empty, wait for a free packet.
      Clear_SPI_EXTI_Flag();
 8000c36:	f000 fe71 	bl	800191c <Clear_SPI_EXTI_Flag>
 8000c3a:	e006      	b.n	8000c4a <HCI_Isr+0x8a>
      return;
    }
    
    Clear_SPI_EXTI_Flag();
 8000c3c:	f000 fe6e 	bl	800191c <Clear_SPI_EXTI_Flag>
  while(BlueNRG_DataPresent()){        
 8000c40:	f000 fce6 	bl	8001610 <BlueNRG_DataPresent>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1c2      	bne.n	8000bd0 <HCI_Isr+0x10>
  }
}
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200003f0 	.word	0x200003f0
 8000c54:	200003f8 	.word	0x200003f8

08000c58 <hci_write>:

void hci_write(const void* data1, const void* data2, uint8_t n_bytes1, uint8_t n_bytes2){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	4611      	mov	r1, r2
 8000c64:	461a      	mov	r2, r3
 8000c66:	460b      	mov	r3, r1
 8000c68:	71fb      	strb	r3, [r7, #7]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	71bb      	strb	r3, [r7, #6]
  for(int i=0; i < n_bytes2; i++)
    PRINTF("%02X ", *((uint8_t*)data2 + i));
  PRINTF("\n");    
#endif
  
  Hal_Write_Serial(data1, data2, n_bytes1, n_bytes2);
 8000c6e:	79fa      	ldrb	r2, [r7, #7]
 8000c70:	79bb      	ldrb	r3, [r7, #6]
 8000c72:	68b9      	ldr	r1, [r7, #8]
 8000c74:	68f8      	ldr	r0, [r7, #12]
 8000c76:	f000 fc55 	bl	8001524 <Hal_Write_Serial>
}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <hci_send_cmd>:

void hci_send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	81fb      	strh	r3, [r7, #14]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	81bb      	strh	r3, [r7, #12]
 8000c92:	4613      	mov	r3, r2
 8000c94:	72fb      	strb	r3, [r7, #11]
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8000c96:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	89fb      	ldrh	r3, [r7, #14]
 8000ca2:	029b      	lsls	r3, r3, #10
 8000ca4:	b21b      	sxth	r3, r3
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	82bb      	strh	r3, [r7, #20]
  hc.plen= plen;
 8000cae:	7afb      	ldrb	r3, [r7, #11]
 8000cb0:	75bb      	strb	r3, [r7, #22]
  
  uint8_t header[HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE];
  header[0] = HCI_COMMAND_PKT;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	743b      	strb	r3, [r7, #16]
  Osal_MemCpy(header+1, &hc, sizeof(hc));
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	3301      	adds	r3, #1
 8000cbc:	f107 0114 	add.w	r1, r7, #20
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 fb2d 	bl	8001322 <Osal_MemCpy>
  
  hci_write(header, param, sizeof(header), plen);
 8000cc8:	7afb      	ldrb	r3, [r7, #11]
 8000cca:	f107 0010 	add.w	r0, r7, #16
 8000cce:	2204      	movs	r2, #4
 8000cd0:	6879      	ldr	r1, [r7, #4]
 8000cd2:	f7ff ffc1 	bl	8000c58 <hci_write>
}
 8000cd6:	bf00      	nop
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <move_list>:

static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b084      	sub	sp, #16
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while(!list_is_empty(src_list)){
 8000ce8:	e00a      	b.n	8000d00 <move_list+0x22>
    list_remove_tail(src_list, &tmp_node);
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	4619      	mov	r1, r3
 8000cf0:	6838      	ldr	r0, [r7, #0]
 8000cf2:	f000 faa2 	bl	800123a <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f000 fa11 	bl	8001122 <list_insert_head>
  while(!list_is_empty(src_list)){
 8000d00:	6838      	ldr	r0, [r7, #0]
 8000d02:	f000 f9ee 	bl	80010e2 <list_is_empty>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d0ee      	beq.n	8000cea <move_list+0xc>
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <free_event_list>:

 /* It ensures that we have at least half of the free buffers in the pool. */
static void free_event_list(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;
    
  Disable_SPI_IRQ();
 8000d1a:	f000 fdf8 	bl	800190e <Disable_SPI_IRQ>
  
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8000d1e:	e00b      	b.n	8000d38 <free_event_list+0x24>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	4619      	mov	r1, r3
 8000d24:	480a      	ldr	r0, [pc, #40]	; (8000d50 <free_event_list+0x3c>)
 8000d26:	f000 fa63 	bl	80011f0 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4809      	ldr	r0, [pc, #36]	; (8000d54 <free_event_list+0x40>)
 8000d30:	f000 fa1b 	bl	800116a <list_insert_tail>
    /* Explicit call to HCI_Isr(), since it cannot be called by ISR if IRQ is kept high by
    BlueNRG */
    HCI_Isr();
 8000d34:	f7ff ff44 	bl	8000bc0 <HCI_Isr>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <free_event_list+0x40>)
 8000d3a:	f000 faa3 	bl	8001284 <list_get_size>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	dded      	ble.n	8000d20 <free_event_list+0xc>
  }
  
  Enable_SPI_IRQ();
 8000d44:	f000 fddc 	bl	8001900 <Enable_SPI_IRQ>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200003f8 	.word	0x200003f8
 8000d54:	200003f0 	.word	0x200003f0

08000d58 <hci_send_req>:

int hci_send_req(struct hci_request *r, BOOL async)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b090      	sub	sp, #64	; 0x40
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	885b      	ldrh	r3, [r3, #2]
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d6e:	b21a      	sxth	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	029b      	lsls	r3, r3, #10
 8000d76:	b21b      	sxth	r3, r3
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	877b      	strh	r3, [r7, #58]	; 0x3a
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;
  int to = DEFAULT_TIMEOUT;
 8000d7e:	2364      	movs	r3, #100	; 0x64
 8000d80:	63fb      	str	r3, [r7, #60]	; 0x3c
  struct timer t;
  tHciDataPacket * hciReadPacket = NULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f999 	bl	80010c2 <list_init_head>

  free_event_list();
 8000d90:	f7ff ffc0 	bl	8000d14 <free_event_list>
  
  hci_send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	8818      	ldrh	r0, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	8859      	ldrh	r1, [r3, #2]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f7ff ff6c 	bl	8000c82 <hci_send_cmd>
  
  if(async){
 8000daa:	78fb      	ldrb	r3, [r7, #3]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <hci_send_req+0x5c>
    return 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	e0f3      	b.n	8000f9c <hci_send_req+0x244>
  }
  
  /* Minimum timeout is 1. */
  if(to == 0)
 8000db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <hci_send_req+0x66>
    to = 1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  Timer_Set(&t, to);
 8000dbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 fa82 	bl	80012d0 <Timer_Set>
    evt_cmd_status *cs;
    evt_le_meta_event *me;
    int len;
      
    while(1){
      if(Timer_Expired(&t)){
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 fa8e 	bl	80012f2 <Timer_Expired>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f040 80b7 	bne.w	8000f4c <hci_send_req+0x1f4>
        goto failed;
      }
      if(!HCI_Queue_Empty()){
 8000dde:	f7ff fee5 	bl	8000bac <HCI_Queue_Empty>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d000      	beq.n	8000dea <hci_send_req+0x92>
      if(Timer_Expired(&t)){
 8000de8:	e7f0      	b.n	8000dcc <hci_send_req+0x74>
        break;
 8000dea:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    Disable_SPI_IRQ();
 8000dec:	f000 fd8f 	bl	800190e <Disable_SPI_IRQ>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4619      	mov	r1, r3
 8000df6:	486b      	ldr	r0, [pc, #428]	; (8000fa4 <hci_send_req+0x24c>)
 8000df8:	f000 f9fa 	bl	80011f0 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	3308      	adds	r3, #8
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34

    if(hci_hdr->type == HCI_EVENT_PKT){
 8000e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	d17e      	bne.n	8000f08 <hci_send_req+0x1b0>
    
    event_pckt = (void *) (hci_hdr->data);
 8000e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
    
    ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	3308      	adds	r3, #8
 8000e14:	3303      	adds	r3, #3
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8000e1e:	3b03      	subs	r3, #3
 8000e20:	62bb      	str	r3, [r7, #40]	; 0x28
    
    switch (event_pckt->evt) {
 8000e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b0f      	cmp	r3, #15
 8000e28:	d00a      	beq.n	8000e40 <hci_send_req+0xe8>
 8000e2a:	2b0f      	cmp	r3, #15
 8000e2c:	dc02      	bgt.n	8000e34 <hci_send_req+0xdc>
 8000e2e:	2b0e      	cmp	r3, #14
 8000e30:	d029      	beq.n	8000e86 <hci_send_req+0x12e>
      
    case EVT_HARDWARE_ERROR:            
      goto failed;
      
    default:      
      break;
 8000e32:	e069      	b.n	8000f08 <hci_send_req+0x1b0>
    switch (event_pckt->evt) {
 8000e34:	2b10      	cmp	r3, #16
 8000e36:	f000 808b 	beq.w	8000f50 <hci_send_req+0x1f8>
 8000e3a:	2b3e      	cmp	r3, #62	; 0x3e
 8000e3c:	d043      	beq.n	8000ec6 <hci_send_req+0x16e>
      break;
 8000e3e:	e063      	b.n	8000f08 <hci_send_req+0x1b0>
      cs = (void *) ptr;
 8000e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
      if (cs->opcode != opcode)
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e46:	885b      	ldrh	r3, [r3, #2]
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f040 8081 	bne.w	8000f54 <hci_send_req+0x1fc>
      if (r->event != EVT_CMD_STATUS) {
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b0f      	cmp	r3, #15
 8000e58:	d004      	beq.n	8000e64 <hci_send_req+0x10c>
        if (cs->status) {
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d04f      	beq.n	8000f02 <hci_send_req+0x1aa>
          goto failed;
 8000e62:	e07a      	b.n	8000f5a <hci_send_req+0x202>
      r->rlen = MIN(len, r->rlen);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	695a      	ldr	r2, [r3, #20]
 8000e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	bfa8      	it	ge
 8000e6e:	461a      	movge	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	615a      	str	r2, [r3, #20]
      Osal_MemCpy(r->rparam, ptr, r->rlen);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6918      	ldr	r0, [r3, #16]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e80:	f000 fa4f 	bl	8001322 <Osal_MemCpy>
      goto done;
 8000e84:	e07c      	b.n	8000f80 <hci_send_req+0x228>
      cc = (void *) ptr;
 8000e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e88:	61fb      	str	r3, [r7, #28]
      if (cc->opcode != opcode)
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d15f      	bne.n	8000f58 <hci_send_req+0x200>
      ptr += EVT_CMD_COMPLETE_SIZE;
 8000e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9a:	3303      	adds	r3, #3
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      len -= EVT_CMD_COMPLETE_SIZE;
 8000e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea0:	3b03      	subs	r3, #3
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
      r->rlen = MIN(len, r->rlen);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	695a      	ldr	r2, [r3, #20]
 8000ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	bfa8      	it	ge
 8000eae:	461a      	movge	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	615a      	str	r2, [r3, #20]
      Osal_MemCpy(r->rparam, ptr, r->rlen);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6918      	ldr	r0, [r3, #16]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ec0:	f000 fa2f 	bl	8001322 <Osal_MemCpy>
      goto done;
 8000ec4:	e05c      	b.n	8000f80 <hci_send_req+0x228>
      me = (void *) ptr;
 8000ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec8:	623b      	str	r3, [r7, #32]
      if (me->subevent != r->event)
 8000eca:	6a3b      	ldr	r3, [r7, #32]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d116      	bne.n	8000f06 <hci_send_req+0x1ae>
      len -= 1;
 8000ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eda:	3b01      	subs	r3, #1
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
      r->rlen = MIN(len, r->rlen);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	695a      	ldr	r2, [r3, #20]
 8000ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	bfa8      	it	ge
 8000ee8:	461a      	movge	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	615a      	str	r2, [r3, #20]
      Osal_MemCpy(r->rparam, me->data, r->rlen);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6918      	ldr	r0, [r3, #16]
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
 8000ef4:	1c59      	adds	r1, r3, #1
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	461a      	mov	r2, r3
 8000efc:	f000 fa11 	bl	8001322 <Osal_MemCpy>
      goto done;
 8000f00:	e03e      	b.n	8000f80 <hci_send_req+0x228>
        break;
 8000f02:	bf00      	nop
 8000f04:	e000      	b.n	8000f08 <hci_send_req+0x1b0>
        break;
 8000f06:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if(list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)){
 8000f08:	4827      	ldr	r0, [pc, #156]	; (8000fa8 <hci_send_req+0x250>)
 8000f0a:	f000 f8ea 	bl	80010e2 <list_is_empty>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00d      	beq.n	8000f30 <hci_send_req+0x1d8>
 8000f14:	4823      	ldr	r0, [pc, #140]	; (8000fa4 <hci_send_req+0x24c>)
 8000f16:	f000 f8e4 	bl	80010e2 <list_is_empty>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d007      	beq.n	8000f30 <hci_send_req+0x1d8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4619      	mov	r1, r3
 8000f24:	4820      	ldr	r0, [pc, #128]	; (8000fa8 <hci_send_req+0x250>)
 8000f26:	f000 f920 	bl	800116a <list_insert_tail>
      hciReadPacket=NULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	e008      	b.n	8000f42 <hci_send_req+0x1ea>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 f916 	bl	800116a <list_insert_tail>
      hciReadPacket=NULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
    }

    HCI_Isr();
 8000f42:	f7ff fe3d 	bl	8000bc0 <HCI_Isr>
    
    Enable_SPI_IRQ();
 8000f46:	f000 fcdb 	bl	8001900 <Enable_SPI_IRQ>
  while(1) {
 8000f4a:	e73f      	b.n	8000dcc <hci_send_req+0x74>
        goto failed;
 8000f4c:	bf00      	nop
 8000f4e:	e004      	b.n	8000f5a <hci_send_req+0x202>
      goto failed;
 8000f50:	bf00      	nop
 8000f52:	e002      	b.n	8000f5a <hci_send_req+0x202>
        goto failed;
 8000f54:	bf00      	nop
 8000f56:	e000      	b.n	8000f5a <hci_send_req+0x202>
        goto failed;
 8000f58:	bf00      	nop
    
  }
  
failed: 
  if(hciReadPacket!=NULL){
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d004      	beq.n	8000f6a <hci_send_req+0x212>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4619      	mov	r1, r3
 8000f64:	4810      	ldr	r0, [pc, #64]	; (8000fa8 <hci_send_req+0x250>)
 8000f66:	f000 f8dc 	bl	8001122 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <hci_send_req+0x24c>)
 8000f72:	f7ff feb4 	bl	8000cde <move_list>
  Enable_SPI_IRQ();
 8000f76:	f000 fcc3 	bl	8001900 <Enable_SPI_IRQ>
  return -1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f7e:	e00d      	b.n	8000f9c <hci_send_req+0x244>
  
done:
  // Insert the packet back into the pool.
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4619      	mov	r1, r3
 8000f84:	4808      	ldr	r0, [pc, #32]	; (8000fa8 <hci_send_req+0x250>)
 8000f86:	f000 f8cc 	bl	8001122 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <hci_send_req+0x24c>)
 8000f92:	f7ff fea4 	bl	8000cde <move_list>
  
  Enable_SPI_IRQ();
 8000f96:	f000 fcb3 	bl	8001900 <Enable_SPI_IRQ>
  return 0;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3740      	adds	r7, #64	; 0x40
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200003f8 	.word	0x200003f8
 8000fa8:	200003f0 	.word	0x200003f0

08000fac <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08e      	sub	sp, #56	; 0x38
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  Osal_MemSet(&resp, 0, sizeof(resp));
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	2209      	movs	r2, #9
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f9bd 	bl	8001342 <Osal_MemSet>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 8000fc8:	f107 0320 	add.w	r3, r7, #32
 8000fcc:	2218      	movs	r2, #24
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f9b6 	bl	8001342 <Osal_MemSet>
  rq.ogf = OGF_INFO_PARAM;
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8000fec:	2309      	movs	r3, #9
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8000ff0:	f107 0320 	add.w	r3, r7, #32
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff feae 	bl	8000d58 <hci_send_req>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	da01      	bge.n	8001006 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8001002:	23ff      	movs	r3, #255	; 0xff
 8001004:	e018      	b.n	8001038 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8001006:	7d3b      	ldrb	r3, [r7, #20]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <hci_le_read_local_version+0x64>
    return resp.status;
 800100c:	7d3b      	ldrb	r3, [r7, #20]
 800100e:	e013      	b.n	8001038 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8001010:	7d7a      	ldrb	r2, [r7, #21]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8001016:	8afa      	ldrh	r2, [r7, #22]
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800101c:	7e3a      	ldrb	r2, [r7, #24]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8001022:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8001026:	b29a      	uxth	r2, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800102c:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8001030:	b29a      	uxth	r2, r3
 8001032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001034:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	3738      	adds	r7, #56	; 0x38
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b092      	sub	sp, #72	; 0x48
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  Osal_MemSet(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	2220      	movs	r2, #32
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f974 	bl	8001342 <Osal_MemSet>
  scan_resp_cp.length = length;
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	743b      	strb	r3, [r7, #16]
  Osal_MemCpy(scan_resp_cp.data, data, MIN(31,length));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b1f      	cmp	r3, #31
 8001062:	d801      	bhi.n	8001068 <hci_le_set_scan_resp_data+0x28>
 8001064:	79fa      	ldrb	r2, [r7, #7]
 8001066:	e000      	b.n	800106a <hci_le_set_scan_resp_data+0x2a>
 8001068:	221f      	movs	r2, #31
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	3301      	adds	r3, #1
 8001070:	6839      	ldr	r1, [r7, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f955 	bl	8001322 <Osal_MemCpy>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 8001078:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800107c:	2218      	movs	r2, #24
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f000 f95e 	bl	8001342 <Osal_MemSet>
  rq.ogf = OGF_LE_CTL;
 8001086:	2308      	movs	r3, #8
 8001088:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800108a:	2309      	movs	r3, #9
 800108c:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8001094:	2320      	movs	r3, #32
 8001096:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 8001098:	f107 030f 	add.w	r3, r7, #15
 800109c:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800109e:	2301      	movs	r3, #1
 80010a0:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 80010a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fe55 	bl	8000d58 <hci_send_req>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	da01      	bge.n	80010b8 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 80010b4:	23ff      	movs	r3, #255	; 0xff
 80010b6:	e000      	b.n	80010ba <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3748      	adds	r7, #72	; 0x48
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	605a      	str	r2, [r3, #4]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b087      	sub	sp, #28
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80010ea:	f3ef 8310 	mrs	r3, PRIMASK
 80010ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80010f0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uint8_t return_value;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80010f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d102      	bne.n	8001106 <list_is_empty+0x24>
  {
    return_value = TRUE;
 8001100:	2301      	movs	r3, #1
 8001102:	75fb      	strb	r3, [r7, #23]
 8001104:	e001      	b.n	800110a <list_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8001106:	2300      	movs	r3, #0
 8001108:	75fb      	strb	r3, [r7, #23]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8001114:	7dfb      	ldrb	r3, [r7, #23]
}
 8001116:	4618      	mov	r0, r3
 8001118:	371c      	adds	r7, #28
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8001122:	b480      	push	{r7}
 8001124:	b087      	sub	sp, #28
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800112c:	f3ef 8310 	mrs	r3, PRIMASK
 8001130:	60fb      	str	r3, [r7, #12]
  return(result);
 8001132:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001134:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001136:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800115e:	bf00      	nop
 8001160:	371c      	adds	r7, #28
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800116a:	b480      	push	{r7}
 800116c:	b087      	sub	sp, #28
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001174:	f3ef 8310 	mrs	r3, PRIMASK
 8001178:	60fb      	str	r3, [r7, #12]
  return(result);
 800117a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800117c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800117e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80011a6:	bf00      	nop
 80011a8:	371c      	adds	r7, #28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80011ba:	f3ef 8310 	mrs	r3, PRIMASK
 80011be:	60fb      	str	r3, [r7, #12]
  return(result);
 80011c0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80011c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	6812      	ldr	r2, [r2, #0]
 80011ce:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	6852      	ldr	r2, [r2, #4]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80011e4:	bf00      	nop
 80011e6:	371c      	adds	r7, #28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80011fa:	f3ef 8310 	mrs	r3, PRIMASK
 80011fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8001200:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001202:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ffcd 	bl	80011b2 <list_remove_node>
  (*node)->next = NULL;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2200      	movs	r2, #0
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001244:	f3ef 8310 	mrs	r3, PRIMASK
 8001248:	60fb      	str	r3, [r7, #12]
  return(result);
 800124a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800124c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800124e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ffa8 	bl	80011b2 <list_remove_node>
  (*node)->next = NULL;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2200      	movs	r2, #0
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800127c:	bf00      	nop
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  int size = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001290:	f3ef 8310 	mrs	r3, PRIMASK
 8001294:	613b      	str	r3, [r7, #16]
  return(result);
 8001296:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001298:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800129a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80012a2:	e005      	b.n	80012b0 <list_get_size+0x2c>
  {
    size++;
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	3301      	adds	r3, #1
 80012a8:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d1f5      	bne.n	80012a4 <list_get_size+0x20>
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  return (size);
 80012c2:	69fb      	ldr	r3, [r7, #28]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3724      	adds	r7, #36	; 0x24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <Timer_Set>:
 * @param[in] interval  The interval before the timer expires.
 *
 */
void
Timer_Set(struct timer *t, tClockTime interval)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  t->interval = interval;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	605a      	str	r2, [r3, #4]
  t->start = Clock_Time();
 80012e0:	f000 fb44 	bl	800196c <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	601a      	str	r2, [r3, #0]
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <Timer_Expired>:
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
int
Timer_Expired(struct timer *t)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b084      	sub	sp, #16
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  /* Note: Can not return diff >= t->interval so we add 1 to diff and return
     t->interval < diff - required to avoid an internal error in mspgcc. */
  tClockTime diff = (Clock_Time() - t->start) + 1;
 80012fa:	f000 fb37 	bl	800196c <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	3301      	adds	r3, #1
 8001308:	60fb      	str	r3, [r7, #12]
  return t->interval < diff;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	429a      	cmp	r2, r3
 8001312:	bf34      	ite	cc
 8001314:	2301      	movcc	r3, #1
 8001316:	2300      	movcs	r3, #0
 8001318:	b2db      	uxtb	r3, r3

}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <Osal_MemCpy>:
 /**
 * Osal_MemCpy
 * 
 */
void* Osal_MemCpy(void *dest, const void *src, unsigned int size)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b084      	sub	sp, #16
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
    return(memcpy(dest,src,size)); 
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f003 fc96 	bl	8004c64 <memcpy>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <Osal_MemSet>:
/**
 * Osal_MemSet
 * 
 */
void* Osal_MemSet(void *ptr, int value, unsigned int size)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b084      	sub	sp, #16
 8001346:	af00      	add	r7, sp, #0
 8001348:	60f8      	str	r0, [r7, #12]
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
    return(memset(ptr,value,size));
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f003 fc91 	bl	8004c7a <memset>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_SPI_MspInit>:
*         communication with the BlueNRG Expansion Board.
* @param  hspi: SPI handle.
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08e      	sub	sp, #56	; 0x38
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==BNRG_SPI_INSTANCE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a66      	ldr	r2, [pc, #408]	; (800150c <HAL_SPI_MspInit+0x1a8>)
 8001372:	4293      	cmp	r3, r2
 8001374:	f040 80c6 	bne.w	8001504 <HAL_SPI_MspInit+0x1a0>
  {
    /* Enable peripherals clock */
    
    /* Enable GPIO Ports Clock */  
    BNRG_SPI_RESET_CLK_ENABLE();
 8001378:	4a65      	ldr	r2, [pc, #404]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 800137a:	4b65      	ldr	r3, [pc, #404]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001382:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001384:	4b62      	ldr	r3, [pc, #392]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 8001386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138c:	623b      	str	r3, [r7, #32]
 800138e:	6a3b      	ldr	r3, [r7, #32]
    BNRG_SPI_SCLK_CLK_ENABLE();
 8001390:	4a5f      	ldr	r2, [pc, #380]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 8001392:	4b5f      	ldr	r3, [pc, #380]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139c:	4b5c      	ldr	r3, [pc, #368]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	61fb      	str	r3, [r7, #28]
 80013a6:	69fb      	ldr	r3, [r7, #28]
    BNRG_SPI_MISO_CLK_ENABLE();
 80013a8:	4a59      	ldr	r2, [pc, #356]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 80013aa:	4b59      	ldr	r3, [pc, #356]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b4:	4b56      	ldr	r3, [pc, #344]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 80013b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	61bb      	str	r3, [r7, #24]
 80013be:	69bb      	ldr	r3, [r7, #24]
    BNRG_SPI_MOSI_CLK_ENABLE();
 80013c0:	4a53      	ldr	r2, [pc, #332]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 80013c2:	4b53      	ldr	r3, [pc, #332]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013cc:	4b50      	ldr	r3, [pc, #320]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 80013ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	697b      	ldr	r3, [r7, #20]
    BNRG_SPI_CS_CLK_ENABLE();
 80013d8:	4a4d      	ldr	r2, [pc, #308]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 80013da:	4b4d      	ldr	r3, [pc, #308]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	f043 0302 	orr.w	r3, r3, #2
 80013e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e4:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 80013e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	693b      	ldr	r3, [r7, #16]
    BNRG_SPI_IRQ_CLK_ENABLE();
 80013f0:	4a47      	ldr	r2, [pc, #284]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 80013f2:	4b47      	ldr	r3, [pc, #284]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fc:	4b44      	ldr	r3, [pc, #272]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable SPI clock */
    BNRG_SPI_CLK_ENABLE();
 8001408:	4a41      	ldr	r2, [pc, #260]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 800140a:	4b41      	ldr	r3, [pc, #260]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001412:	6613      	str	r3, [r2, #96]	; 0x60
 8001414:	4b3e      	ldr	r3, [pc, #248]	; (8001510 <HAL_SPI_MspInit+0x1ac>)
 8001416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
    
    /* Reset */
    GPIO_InitStruct.Pin = BNRG_SPI_RESET_PIN;
 8001420:	2301      	movs	r3, #1
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = BNRG_SPI_RESET_MODE;
 8001424:	2301      	movs	r3, #1
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = BNRG_SPI_RESET_PULL;
 8001428:	2301      	movs	r3, #1
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = BNRG_SPI_RESET_SPEED;
 800142c:	2300      	movs	r3, #0
 800142e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = BNRG_SPI_RESET_ALTERNATE;
 8001430:	2300      	movs	r3, #0
 8001432:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(BNRG_SPI_RESET_PORT, &GPIO_InitStruct);	
 8001434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001438:	4619      	mov	r1, r3
 800143a:	4836      	ldr	r0, [pc, #216]	; (8001514 <HAL_SPI_MspInit+0x1b0>)
 800143c:	f000 fbc4 	bl	8001bc8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);	/*Added to avoid spurious interrupt from the BlueNRG */
 8001440:	2200      	movs	r2, #0
 8001442:	2101      	movs	r1, #1
 8001444:	4833      	ldr	r0, [pc, #204]	; (8001514 <HAL_SPI_MspInit+0x1b0>)
 8001446:	f000 fd83 	bl	8001f50 <HAL_GPIO_WritePin>
    
    /* SCLK */
    GPIO_InitStruct.Pin = BNRG_SPI_SCLK_PIN;
 800144a:	2320      	movs	r3, #32
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = BNRG_SPI_SCLK_MODE;
 800144e:	2302      	movs	r3, #2
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = BNRG_SPI_SCLK_PULL;
 8001452:	2302      	movs	r3, #2
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = BNRG_SPI_SCLK_SPEED;
 8001456:	2303      	movs	r3, #3
 8001458:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = BNRG_SPI_SCLK_ALTERNATE;
 800145a:	2305      	movs	r3, #5
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001468:	f000 fbae 	bl	8001bc8 <HAL_GPIO_Init>
    
    /* MISO */
    GPIO_InitStruct.Pin = BNRG_SPI_MISO_PIN;
 800146c:	2340      	movs	r3, #64	; 0x40
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = BNRG_SPI_MISO_MODE;
 8001470:	2302      	movs	r3, #2
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = BNRG_SPI_MISO_PULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = BNRG_SPI_MISO_SPEED;
 8001478:	2303      	movs	r3, #3
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = BNRG_SPI_MISO_ALTERNATE;
 800147c:	2305      	movs	r3, #5
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
 8001480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001484:	4619      	mov	r1, r3
 8001486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148a:	f000 fb9d 	bl	8001bc8 <HAL_GPIO_Init>
    
    /* MOSI */
    GPIO_InitStruct.Pin = BNRG_SPI_MOSI_PIN;
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = BNRG_SPI_MOSI_MODE;
 8001492:	2302      	movs	r3, #2
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = BNRG_SPI_MOSI_PULL;
 8001496:	2300      	movs	r3, #0
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = BNRG_SPI_MOSI_SPEED;
 800149a:	2303      	movs	r3, #3
 800149c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = BNRG_SPI_MOSI_ALTERNATE;
 800149e:	2305      	movs	r3, #5
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ac:	f000 fb8c 	bl	8001bc8 <HAL_GPIO_Init>
    
    /* NSS/CSN/CS */
    GPIO_InitStruct.Pin = BNRG_SPI_CS_PIN;
 80014b0:	2304      	movs	r3, #4
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = BNRG_SPI_CS_MODE;
 80014b4:	2301      	movs	r3, #1
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = BNRG_SPI_CS_PULL;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = BNRG_SPI_CS_SPEED;
 80014bc:	2303      	movs	r3, #3
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = BNRG_SPI_CS_ALTERNATE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	4813      	ldr	r0, [pc, #76]	; (8001518 <HAL_SPI_MspInit+0x1b4>)
 80014cc:	f000 fb7c 	bl	8001bc8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 80014d0:	2201      	movs	r2, #1
 80014d2:	2104      	movs	r1, #4
 80014d4:	4810      	ldr	r0, [pc, #64]	; (8001518 <HAL_SPI_MspInit+0x1b4>)
 80014d6:	f000 fd3b 	bl	8001f50 <HAL_GPIO_WritePin>
    
    /* IRQ -- INPUT */
    GPIO_InitStruct.Pin = BNRG_SPI_IRQ_PIN;
 80014da:	2320      	movs	r3, #32
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = BNRG_SPI_IRQ_MODE;
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <HAL_SPI_MspInit+0x1b8>)
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = BNRG_SPI_IRQ_PULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = BNRG_SPI_IRQ_SPEED;
 80014e6:	2303      	movs	r3, #3
 80014e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = BNRG_SPI_IRQ_ALTERNATE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
 80014ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f2:	4619      	mov	r1, r3
 80014f4:	480a      	ldr	r0, [pc, #40]	; (8001520 <HAL_SPI_MspInit+0x1bc>)
 80014f6:	f000 fb67 	bl	8001bc8 <HAL_GPIO_Init>
    
    /* Configure the NVIC for SPI */  
    HAL_NVIC_SetPriority(BNRG_SPI_EXTI_IRQn, 3, 0);    
 80014fa:	2200      	movs	r2, #0
 80014fc:	2103      	movs	r1, #3
 80014fe:	2017      	movs	r0, #23
 8001500:	f000 fb2a 	bl	8001b58 <HAL_NVIC_SetPriority>
    //    HAL_NVIC_EnableIRQ(BNRG_SPI_EXTI_IRQn);
  }
}
 8001504:	bf00      	nop
 8001506:	3738      	adds	r7, #56	; 0x38
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40013000 	.word	0x40013000
 8001510:	40021000 	.word	0x40021000
 8001514:	48001c00 	.word	0x48001c00
 8001518:	48000400 	.word	0x48000400
 800151c:	10110000 	.word	0x10110000
 8001520:	48000800 	.word	0x48000800

08001524 <Hal_Write_Serial>:
* @param  n_bytes2: number of bytes in 2nd buffer
* @retval None
*/
void Hal_Write_Serial(const void* data1, const void* data2, int32_t n_bytes1,
                      int32_t n_bytes2)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af02      	add	r7, sp, #8
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	603b      	str	r3, [r7, #0]
  struct timer t;
  
  Timer_Set(&t, CLOCK_SECOND/10);
 8001532:	f107 0310 	add.w	r3, r7, #16
 8001536:	2164      	movs	r1, #100	; 0x64
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fec9 	bl	80012d0 <Timer_Set>
  }
  PRINT_CSV("\n");
#endif
  
  while(1){
    if(BlueNRG_SPI_Write(&SpiHandle, (uint8_t *)data1,(uint8_t *)data2, n_bytes1, n_bytes2)==0) break;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	4613      	mov	r3, r2
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	68f9      	ldr	r1, [r7, #12]
 800154e:	480b      	ldr	r0, [pc, #44]	; (800157c <Hal_Write_Serial+0x58>)
 8001550:	f000 f8dc 	bl	800170c <BlueNRG_SPI_Write>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d008      	beq.n	800156c <Hal_Write_Serial+0x48>
    if(Timer_Expired(&t)){
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fec7 	bl	80012f2 <Timer_Expired>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <Hal_Write_Serial+0x4c>
    if(BlueNRG_SPI_Write(&SpiHandle, (uint8_t *)data1,(uint8_t *)data2, n_bytes1, n_bytes2)==0) break;
 800156a:	e7e8      	b.n	800153e <Hal_Write_Serial+0x1a>
 800156c:	bf00      	nop
 800156e:	e000      	b.n	8001572 <Hal_Write_Serial+0x4e>
      break;
 8001570:	bf00      	nop
    }
  }
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000400 	.word	0x20000400

08001580 <BNRG_SPI_Init>:
*         Expansion Board.
* @param  None
* @retval None
*/
void BNRG_SPI_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  SpiHandle.Instance = BNRG_SPI_INSTANCE;
 8001584:	4b15      	ldr	r3, [pc, #84]	; (80015dc <BNRG_SPI_Init+0x5c>)
 8001586:	4a16      	ldr	r2, [pc, #88]	; (80015e0 <BNRG_SPI_Init+0x60>)
 8001588:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.Mode = BNRG_SPI_MODE;
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <BNRG_SPI_Init+0x5c>)
 800158c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001590:	605a      	str	r2, [r3, #4]
  SpiHandle.Init.Direction = BNRG_SPI_DIRECTION;
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <BNRG_SPI_Init+0x5c>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.DataSize = BNRG_SPI_DATASIZE;
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <BNRG_SPI_Init+0x5c>)
 800159a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800159e:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.CLKPolarity = BNRG_SPI_CLKPOLARITY;
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <BNRG_SPI_Init+0x5c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CLKPhase = BNRG_SPI_CLKPHASE;
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <BNRG_SPI_Init+0x5c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.NSS = BNRG_SPI_NSS;
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <BNRG_SPI_Init+0x5c>)
 80015ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b2:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.FirstBit = BNRG_SPI_FIRSTBIT;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <BNRG_SPI_Init+0x5c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.TIMode = BNRG_SPI_TIMODE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <BNRG_SPI_Init+0x5c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	625a      	str	r2, [r3, #36]	; 0x24
  SpiHandle.Init.CRCPolynomial = BNRG_SPI_CRCPOLYNOMIAL;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <BNRG_SPI_Init+0x5c>)
 80015c2:	2207      	movs	r2, #7
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.BaudRatePrescaler = BNRG_SPI_BAUDRATEPRESCALER;
 80015c6:	4b05      	ldr	r3, [pc, #20]	; (80015dc <BNRG_SPI_Init+0x5c>)
 80015c8:	2218      	movs	r2, #24
 80015ca:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.CRCCalculation = BNRG_SPI_CRCCALCULATION;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <BNRG_SPI_Init+0x5c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	629a      	str	r2, [r3, #40]	; 0x28
  
  HAL_SPI_Init(&SpiHandle);
 80015d2:	4802      	ldr	r0, [pc, #8]	; (80015dc <BNRG_SPI_Init+0x5c>)
 80015d4:	f002 f8fe 	bl	80037d4 <HAL_SPI_Init>
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000400 	.word	0x20000400
 80015e0:	40013000 	.word	0x40013000

080015e4 <BlueNRG_RST>:
* @brief  Resets the BlueNRG.
* @param  None
* @retval None
*/
void BlueNRG_RST(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2101      	movs	r1, #1
 80015ec:	4807      	ldr	r0, [pc, #28]	; (800160c <BlueNRG_RST+0x28>)
 80015ee:	f000 fcaf 	bl	8001f50 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80015f2:	2005      	movs	r0, #5
 80015f4:	f000 f9c6 	bl	8001984 <HAL_Delay>
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_SET);
 80015f8:	2201      	movs	r2, #1
 80015fa:	2101      	movs	r1, #1
 80015fc:	4803      	ldr	r0, [pc, #12]	; (800160c <BlueNRG_RST+0x28>)
 80015fe:	f000 fca7 	bl	8001f50 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001602:	2005      	movs	r0, #5
 8001604:	f000 f9be 	bl	8001984 <HAL_Delay>
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	48001c00 	.word	0x48001c00

08001610 <BlueNRG_DataPresent>:
* @param  None
* @retval 1 if data are present, 0 otherwise
*/
// FIXME: find a better way to handle this return value (bool type? TRUE and FALSE)
uint8_t BlueNRG_DataPresent(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  if (HAL_GPIO_ReadPin(BNRG_SPI_EXTI_PORT, BNRG_SPI_EXTI_PIN) == GPIO_PIN_SET)
 8001614:	2120      	movs	r1, #32
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <BlueNRG_DataPresent+0x1c>)
 8001618:	f000 fc82 	bl	8001f20 <HAL_GPIO_ReadPin>
 800161c:	4603      	mov	r3, r0
 800161e:	2b01      	cmp	r3, #1
 8001620:	d101      	bne.n	8001626 <BlueNRG_DataPresent+0x16>
    return 1;
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <BlueNRG_DataPresent+0x18>
  else  
    return 0;
 8001626:	2300      	movs	r3, #0
} /* end BlueNRG_DataPresent() */
 8001628:	4618      	mov	r0, r3
 800162a:	bd80      	pop	{r7, pc}
 800162c:	48000800 	.word	0x48000800

08001630 <BlueNRG_SPI_Read_All>:
* @param  buff_size: Buffer size
* @retval int32_t  : Number of read bytes
*/
int32_t BlueNRG_SPI_Read_All(uint8_t *buffer,
                             uint8_t buff_size)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af02      	add	r7, sp, #8
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	70fb      	strb	r3, [r7, #3]
  uint16_t byte_count;
  uint8_t len = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8001640:	23ff      	movs	r3, #255	; 0xff
 8001642:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;
  
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001644:	230b      	movs	r3, #11
 8001646:	753b      	strb	r3, [r7, #20]
 8001648:	2300      	movs	r3, #0
 800164a:	757b      	strb	r3, [r7, #21]
 800164c:	2300      	movs	r3, #0
 800164e:	75bb      	strb	r3, [r7, #22]
 8001650:	2300      	movs	r3, #0
 8001652:	75fb      	strb	r3, [r7, #23]
 8001654:	2300      	movs	r3, #0
 8001656:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];
  
  /* CS reset */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	2104      	movs	r1, #4
 800165c:	4829      	ldr	r0, [pc, #164]	; (8001704 <BlueNRG_SPI_Read_All+0xd4>)
 800165e:	f000 fc77 	bl	8001f50 <HAL_GPIO_WritePin>
  
  /* Read the header */  
  HAL_SPI_TransmitReceive(&SpiHandle, header_master, header_slave, HEADER_SIZE, TIMEOUT_DURATION);
 8001662:	f107 020c 	add.w	r2, r7, #12
 8001666:	f107 0114 	add.w	r1, r7, #20
 800166a:	230f      	movs	r3, #15
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2305      	movs	r3, #5
 8001670:	4825      	ldr	r0, [pc, #148]	; (8001708 <BlueNRG_SPI_Read_All+0xd8>)
 8001672:	f002 f937 	bl	80038e4 <HAL_SPI_TransmitReceive>
  
  if (header_slave[0] == 0x02) {
 8001676:	7b3b      	ldrb	r3, [r7, #12]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d12e      	bne.n	80016da <BlueNRG_SPI_Read_All+0xaa>
    /* device is ready */
    byte_count = (header_slave[4]<<8)|header_slave[3];
 800167c:	7c3b      	ldrb	r3, [r7, #16]
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	b21a      	sxth	r2, r3
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	b21b      	sxth	r3, r3
 8001686:	4313      	orrs	r3, r2
 8001688:	b21b      	sxth	r3, r3
 800168a:	83fb      	strh	r3, [r7, #30]
    if (byte_count > 0) {
 800168c:	8bfb      	ldrh	r3, [r7, #30]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d023      	beq.n	80016da <BlueNRG_SPI_Read_All+0xaa>
      
      /* avoid to read more data that size of the buffer */
      if (byte_count > buff_size){
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	b29b      	uxth	r3, r3
 8001696:	8bfa      	ldrh	r2, [r7, #30]
 8001698:	429a      	cmp	r2, r3
 800169a:	d901      	bls.n	80016a0 <BlueNRG_SPI_Read_All+0x70>
        byte_count = buff_size;
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	83fb      	strh	r3, [r7, #30]
      }
      
      for (len = 0; len < byte_count; len++){
 80016a0:	2300      	movs	r3, #0
 80016a2:	777b      	strb	r3, [r7, #29]
 80016a4:	e014      	b.n	80016d0 <BlueNRG_SPI_Read_All+0xa0>
  __ASM volatile ("cpsid i" : : : "memory");
 80016a6:	b672      	cpsid	i
        __disable_irq();
        HAL_SPI_TransmitReceive(&SpiHandle, &char_ff, (uint8_t*)&read_char, 1, TIMEOUT_DURATION);
 80016a8:	f107 021b 	add.w	r2, r7, #27
 80016ac:	f107 011c 	add.w	r1, r7, #28
 80016b0:	230f      	movs	r3, #15
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2301      	movs	r3, #1
 80016b6:	4814      	ldr	r0, [pc, #80]	; (8001708 <BlueNRG_SPI_Read_All+0xd8>)
 80016b8:	f002 f914 	bl	80038e4 <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 80016bc:	b662      	cpsie	i
        __enable_irq();
        buffer[len] = read_char;
 80016be:	7f7b      	ldrb	r3, [r7, #29]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	7efa      	ldrb	r2, [r7, #27]
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]
      for (len = 0; len < byte_count; len++){
 80016ca:	7f7b      	ldrb	r3, [r7, #29]
 80016cc:	3301      	adds	r3, #1
 80016ce:	777b      	strb	r3, [r7, #29]
 80016d0:	7f7b      	ldrb	r3, [r7, #29]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	8bfa      	ldrh	r2, [r7, #30]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d8e5      	bhi.n	80016a6 <BlueNRG_SPI_Read_All+0x76>
      }
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 80016da:	2201      	movs	r2, #1
 80016dc:	2104      	movs	r1, #4
 80016de:	4809      	ldr	r0, [pc, #36]	; (8001704 <BlueNRG_SPI_Read_All+0xd4>)
 80016e0:	f000 fc36 	bl	8001f50 <HAL_GPIO_WritePin>
  
  // Add a small delay to give time to the BlueNRG to set the IRQ pin low
  // to avoid a useless SPI read at the end of the transaction
  for(volatile int i = 0; i < 2; i++)__NOP();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	e003      	b.n	80016f2 <BlueNRG_SPI_Read_All+0xc2>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80016ea:	bf00      	nop
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	3301      	adds	r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	ddf8      	ble.n	80016ea <BlueNRG_SPI_Read_All+0xba>
    }
    PRINT_CSV("\n");
  }
#endif
  
  return len;   
 80016f8:	7f7b      	ldrb	r3, [r7, #29]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3720      	adds	r7, #32
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	48000400 	.word	0x48000400
 8001708:	20000400 	.word	0x20000400

0800170c <BlueNRG_SPI_Write>:
* @param  Nb_bytes2: Size of second data buffer to be written
* @retval Number of read bytes
*/
int32_t BlueNRG_SPI_Write(SPI_HandleTypeDef *hspi, uint8_t* data1,
                          uint8_t* data2, uint8_t Nb_bytes1, uint8_t Nb_bytes2)
{  
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b0cd      	sub	sp, #308	; 0x134
 8001710:	af02      	add	r7, sp, #8
 8001712:	f107 040c 	add.w	r4, r7, #12
 8001716:	6020      	str	r0, [r4, #0]
 8001718:	f107 0008 	add.w	r0, r7, #8
 800171c:	6001      	str	r1, [r0, #0]
 800171e:	1d39      	adds	r1, r7, #4
 8001720:	600a      	str	r2, [r1, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	1cfb      	adds	r3, r7, #3
 8001726:	701a      	strb	r2, [r3, #0]
  int32_t result = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  
  int32_t spi_fix_enabled = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  
#ifdef ENABLE_SPI_FIX
  spi_fix_enabled = 1;
#endif //ENABLE_SPI_FIX
  
  unsigned char header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001734:	230a      	movs	r3, #10
 8001736:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
 800173a:	2300      	movs	r3, #0
 800173c:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 8001740:	2300      	movs	r3, #0
 8001742:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 8001746:	2300      	movs	r3, #0
 8001748:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 800174c:	2300      	movs	r3, #0
 800174e:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
  unsigned char header_slave[HEADER_SIZE]  = {0xaa, 0x00, 0x00, 0x00, 0x00};
 8001752:	23aa      	movs	r3, #170	; 0xaa
 8001754:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
 8001758:	2300      	movs	r3, #0
 800175a:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
 800175e:	2300      	movs	r3, #0
 8001760:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
 8001764:	2300      	movs	r3, #0
 8001766:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
 800176a:	2300      	movs	r3, #0
 800176c:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
  
  unsigned char read_char_buf[MAX_BUFFER_SIZE];
  
  Disable_SPI_IRQ(); 
 8001770:	f000 f8cd 	bl	800190e <Disable_SPI_IRQ>
  If the SPI_FIX is enabled the IRQ is set in Output mode, then it is pulled
  high and, after a delay of at least 112us, the CS line is asserted and the
  header transmit/receive operations are started.
  After these transmit/receive operations the IRQ is reset in input mode.
  */
  if (spi_fix_enabled) {
 8001774:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <BlueNRG_SPI_Write+0x78>
    set_irq_as_output();
 800177c:	f000 f86e 	bl	800185c <set_irq_as_output>
    
    /* Assert CS line after at least 112us */
    us150Delay();
 8001780:	f000 f8aa 	bl	80018d8 <us150Delay>
  }
  
  /* CS reset */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	2104      	movs	r1, #4
 8001788:	4833      	ldr	r0, [pc, #204]	; (8001858 <BlueNRG_SPI_Write+0x14c>)
 800178a:	f000 fbe1 	bl	8001f50 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 800178e:	b672      	cpsid	i
  
  /* Exchange header */  
  __disable_irq();
  HAL_SPI_TransmitReceive(hspi, header_master, header_slave, HEADER_SIZE, TIMEOUT_DURATION);
 8001790:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001794:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001798:	f107 000c 	add.w	r0, r7, #12
 800179c:	230f      	movs	r3, #15
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2305      	movs	r3, #5
 80017a2:	6800      	ldr	r0, [r0, #0]
 80017a4:	f002 f89e 	bl	80038e4 <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 80017a8:	b662      	cpsie	i
  __enable_irq();
  
  if (spi_fix_enabled) {
 80017aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <BlueNRG_SPI_Write+0xaa>
    set_irq_as_input();
 80017b2:	f000 f86f 	bl	8001894 <set_irq_as_input>
  }
  
  if (header_slave[0] == 0x02) {
 80017b6:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d13a      	bne.n	8001834 <BlueNRG_SPI_Write+0x128>
    /* SPI is ready */
    if (header_slave[1] >= (Nb_bytes1+Nb_bytes2)) {
 80017be:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 80017c2:	4619      	mov	r1, r3
 80017c4:	1cfb      	adds	r3, r7, #3
 80017c6:	781a      	ldrb	r2, [r3, #0]
 80017c8:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 80017cc:	4413      	add	r3, r2
 80017ce:	4299      	cmp	r1, r3
 80017d0:	db2b      	blt.n	800182a <BlueNRG_SPI_Write+0x11e>
      
      /*  Buffer is big enough */
      if (Nb_bytes1 > 0) {
 80017d2:	1cfb      	adds	r3, r7, #3
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d011      	beq.n	80017fe <BlueNRG_SPI_Write+0xf2>
  __ASM volatile ("cpsid i" : : : "memory");
 80017da:	b672      	cpsid	i
        __disable_irq();
        HAL_SPI_TransmitReceive(hspi, data1, read_char_buf, Nb_bytes1, TIMEOUT_DURATION);
 80017dc:	1cfb      	adds	r3, r7, #3
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	b29c      	uxth	r4, r3
 80017e2:	f107 0210 	add.w	r2, r7, #16
 80017e6:	f107 0108 	add.w	r1, r7, #8
 80017ea:	f107 000c 	add.w	r0, r7, #12
 80017ee:	230f      	movs	r3, #15
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	4623      	mov	r3, r4
 80017f4:	6809      	ldr	r1, [r1, #0]
 80017f6:	6800      	ldr	r0, [r0, #0]
 80017f8:	f002 f874 	bl	80038e4 <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 80017fc:	b662      	cpsie	i
        __enable_irq();
        
      }
      if (Nb_bytes2 > 0) {
 80017fe:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8001802:	2b00      	cmp	r3, #0
 8001804:	d01a      	beq.n	800183c <BlueNRG_SPI_Write+0x130>
  __ASM volatile ("cpsid i" : : : "memory");
 8001806:	b672      	cpsid	i
        __disable_irq();
        HAL_SPI_TransmitReceive(hspi, data2, read_char_buf, Nb_bytes2, TIMEOUT_DURATION);
 8001808:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800180c:	b29c      	uxth	r4, r3
 800180e:	f107 0210 	add.w	r2, r7, #16
 8001812:	1d39      	adds	r1, r7, #4
 8001814:	f107 000c 	add.w	r0, r7, #12
 8001818:	230f      	movs	r3, #15
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	4623      	mov	r3, r4
 800181e:	6809      	ldr	r1, [r1, #0]
 8001820:	6800      	ldr	r0, [r0, #0]
 8001822:	f002 f85f 	bl	80038e4 <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 8001826:	b662      	cpsie	i
 8001828:	e008      	b.n	800183c <BlueNRG_SPI_Write+0x130>
        
      }
      
    } else {
      /* Buffer is too small */
      result = -2;
 800182a:	f06f 0301 	mvn.w	r3, #1
 800182e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001832:	e003      	b.n	800183c <BlueNRG_SPI_Write+0x130>
    }
  } else {
    /* SPI is not ready */
    result = -1;
 8001834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001838:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  }
  
  /* Release CS line */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 800183c:	2201      	movs	r2, #1
 800183e:	2104      	movs	r1, #4
 8001840:	4805      	ldr	r0, [pc, #20]	; (8001858 <BlueNRG_SPI_Write+0x14c>)
 8001842:	f000 fb85 	bl	8001f50 <HAL_GPIO_WritePin>
  
  
  Enable_SPI_IRQ();
 8001846:	f000 f85b 	bl	8001900 <Enable_SPI_IRQ>
  
  return result;
 800184a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
}
 800184e:	4618      	mov	r0, r3
 8001850:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8001854:	46bd      	mov	sp, r7
 8001856:	bd90      	pop	{r4, r7, pc}
 8001858:	48000400 	.word	0x48000400

0800185c <set_irq_as_output>:
* @brief  Set in Output mode the IRQ.
* @param  None
* @retval None
*/
void set_irq_as_output(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Pull IRQ high */
  GPIO_InitStructure.Pin = BNRG_SPI_IRQ_PIN;
 8001862:	2320      	movs	r3, #32
 8001864:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001866:	2301      	movs	r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = BNRG_SPI_IRQ_SPEED;
 800186a:	2303      	movs	r3, #3
 800186c:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStructure);
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <set_irq_as_output+0x34>)
 8001878:	f000 f9a6 	bl	8001bc8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	2120      	movs	r1, #32
 8001880:	4803      	ldr	r0, [pc, #12]	; (8001890 <set_irq_as_output+0x34>)
 8001882:	f000 fb65 	bl	8001f50 <HAL_GPIO_WritePin>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	48000800 	.word	0x48000800

08001894 <set_irq_as_input>:
* @brief  Set the IRQ in input mode.
* @param  None
* @retval None
*/
void set_irq_as_input(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* IRQ input */  
  GPIO_InitStructure.Pin = BNRG_SPI_IRQ_PIN;
 800189a:	2320      	movs	r3, #32
 800189c:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = BNRG_SPI_IRQ_MODE;
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <set_irq_as_input+0x3c>)
 80018a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 80018a2:	2302      	movs	r3, #2
 80018a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = BNRG_SPI_IRQ_SPEED;
 80018a6:	2303      	movs	r3, #3
 80018a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Alternate = BNRG_SPI_IRQ_ALTERNATE;    
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStructure);
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	4619      	mov	r1, r3
 80018b2:	4808      	ldr	r0, [pc, #32]	; (80018d4 <set_irq_as_input+0x40>)
 80018b4:	f000 f988 	bl	8001bc8 <HAL_GPIO_Init>
  
  GPIO_InitStructure.Pull = BNRG_SPI_IRQ_PULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStructure);
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	4619      	mov	r1, r3
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <set_irq_as_input+0x40>)
 80018c2:	f000 f981 	bl	8001bc8 <HAL_GPIO_Init>
}
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	10110000 	.word	0x10110000
 80018d4:	48000800 	.word	0x48000800

080018d8 <us150Delay>:
* @param  None
* @retval None
* NOTE: TODO: implement with clock-independent function.
*/
static void us150Delay(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
#if SYSCLK_FREQ == 4000000
  for(volatile int i = 0; i < 35; i++)__NOP();
#elif SYSCLK_FREQ == 32000000
  for(volatile int i = 0; i < 420; i++)__NOP();
#elif SYSCLK_FREQ == 80000000
  for(volatile int i = 0; i < 1072; i++)__NOP();
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	e003      	b.n	80018ec <us150Delay+0x14>
  __ASM volatile ("nop");
 80018e4:	bf00      	nop
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3301      	adds	r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80018f2:	dbf7      	blt.n	80018e4 <us150Delay+0xc>
#elif SYSCLK_FREQ == 168000000
  for(volatile int i = 0; i < 2250; i++)__NOP();
#else
#error Implement delay function.
#endif    
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <Enable_SPI_IRQ>:
* @brief  Enable SPI IRQ.
* @param  None
* @retval None
*/
void Enable_SPI_IRQ(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(BNRG_SPI_EXTI_IRQn);  
 8001904:	2017      	movs	r0, #23
 8001906:	f000 f943 	bl	8001b90 <HAL_NVIC_EnableIRQ>
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}

0800190e <Disable_SPI_IRQ>:
* @brief  Disable SPI IRQ.
* @param  None
* @retval None
*/
void Disable_SPI_IRQ(void)
{ 
 800190e:	b580      	push	{r7, lr}
 8001910:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 8001912:	2017      	movs	r0, #23
 8001914:	f000 f94a 	bl	8001bac <HAL_NVIC_DisableIRQ>
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <Clear_SPI_EXTI_Flag>:
* @brief  Clear EXTI (External Interrupt) line for SPI IRQ.
* @param  None
* @retval None
*/
void Clear_SPI_EXTI_Flag(void)
{  
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  __HAL_GPIO_EXTI_CLEAR_IT(BNRG_SPI_EXTI_PIN);  
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <Clear_SPI_EXTI_Flag+0x14>)
 8001922:	2220      	movs	r2, #32
 8001924:	615a      	str	r2, [r3, #20]
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	40010400 	.word	0x40010400

08001934 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001938:	2003      	movs	r0, #3
 800193a:	f000 f902 	bl	8001b42 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800193e:	200f      	movs	r0, #15
 8001940:	f002 fd0c 	bl	800435c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001944:	f000 fb34 	bl	8001fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  uwTick++;
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <HAL_IncTick+0x18>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3301      	adds	r3, #1
 800195a:	4a03      	ldr	r2, [pc, #12]	; (8001968 <HAL_IncTick+0x18>)
 800195c:	6013      	str	r3, [r2, #0]
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	20000464 	.word	0x20000464

0800196c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_GetTick+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000464 	.word	0x20000464

08001984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff ffee 	bl	800196c <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800199c:	d002      	beq.n	80019a4 <HAL_Delay+0x20>
  {
    wait++;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3301      	adds	r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
  } 

  while((HAL_GetTick() - tickstart) < wait)
 80019a4:	bf00      	nop
 80019a6:	f7ff ffe1 	bl	800196c <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	1ad2      	subs	r2, r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d3f7      	bcc.n	80019a6 <HAL_Delay+0x22>
  {
  }
}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a2e:	4909      	ldr	r1, [pc, #36]	; (8001a54 <NVIC_EnableIRQ+0x30>)
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	095b      	lsrs	r3, r3, #5
 8001a36:	79fa      	ldrb	r2, [r7, #7]
 8001a38:	f002 021f 	and.w	r2, r2, #31
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000e100 	.word	0xe000e100

08001a58 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a62:	4909      	ldr	r1, [pc, #36]	; (8001a88 <NVIC_DisableIRQ+0x30>)
 8001a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a68:	095b      	lsrs	r3, r3, #5
 8001a6a:	79fa      	ldrb	r2, [r7, #7]
 8001a6c:	f002 021f 	and.w	r2, r2, #31
 8001a70:	2001      	movs	r0, #1
 8001a72:	fa00 f202 	lsl.w	r2, r0, r2
 8001a76:	3320      	adds	r3, #32
 8001a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000e100 	.word	0xe000e100

08001a8c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	6039      	str	r1, [r7, #0]
 8001a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	da0b      	bge.n	8001ab8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa0:	490d      	ldr	r1, [pc, #52]	; (8001ad8 <NVIC_SetPriority+0x4c>)
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	3b04      	subs	r3, #4
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab6:	e009      	b.n	8001acc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	4908      	ldr	r1, [pc, #32]	; (8001adc <NVIC_SetPriority+0x50>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00
 8001adc:	e000e100 	.word	0xe000e100

08001ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b089      	sub	sp, #36	; 0x24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f1c3 0307 	rsb	r3, r3, #7
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	bf28      	it	cs
 8001afe:	2304      	movcs	r3, #4
 8001b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3304      	adds	r3, #4
 8001b06:	2b06      	cmp	r3, #6
 8001b08:	d902      	bls.n	8001b10 <NVIC_EncodePriority+0x30>
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3b03      	subs	r3, #3
 8001b0e:	e000      	b.n	8001b12 <NVIC_EncodePriority+0x32>
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	2201      	movs	r2, #1
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	1e5a      	subs	r2, r3, #1
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	401a      	ands	r2, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b26:	2101      	movs	r1, #1
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	1e59      	subs	r1, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	4313      	orrs	r3, r2
         );
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3724      	adds	r7, #36	; 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ff38 	bl	80019c0 <NVIC_SetPriorityGrouping>
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b6a:	f7ff ff4d 	bl	8001a08 <NVIC_GetPriorityGrouping>
 8001b6e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	68b9      	ldr	r1, [r7, #8]
 8001b74:	6978      	ldr	r0, [r7, #20]
 8001b76:	f7ff ffb3 	bl	8001ae0 <NVIC_EncodePriority>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b80:	4611      	mov	r1, r2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff ff82 	bl	8001a8c <NVIC_SetPriority>
}
 8001b88:	bf00      	nop
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff40 	bl	8001a24 <NVIC_EnableIRQ>
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff ff4c 	bl	8001a58 <NVIC_DisableIRQ>
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001bde:	e17f      	b.n	8001ee0 <HAL_GPIO_Init+0x318>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2101      	movs	r1, #1
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	4013      	ands	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 8171 	beq.w	8001eda <HAL_GPIO_Init+0x312>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x40>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b12      	cmp	r3, #18
 8001c06:	d123      	bne.n	8001c50 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	08da      	lsrs	r2, r3, #3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3208      	adds	r2, #8
 8001c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	220f      	movs	r2, #15
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	08da      	lsrs	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3208      	adds	r2, #8
 8001c4a:	6939      	ldr	r1, [r7, #16]
 8001c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0203 	and.w	r2, r3, #3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d00b      	beq.n	8001ca4 <HAL_GPIO_Init+0xdc>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d007      	beq.n	8001ca4 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c98:	2b11      	cmp	r3, #17
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b12      	cmp	r3, #18
 8001ca2:	d130      	bne.n	8001d06 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cda:	2201      	movs	r2, #1
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	091b      	lsrs	r3, r3, #4
 8001cf0:	f003 0201 	and.w	r2, r3, #1
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d118      	bne.n	8001d44 <HAL_GPIO_Init+0x17c>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d18:	2201      	movs	r2, #1
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	f003 0201 	and.w	r2, r3, #1
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80ac 	beq.w	8001eda <HAL_GPIO_Init+0x312>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d82:	4a5e      	ldr	r2, [pc, #376]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001d84:	4b5d      	ldr	r3, [pc, #372]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d8e:	4b5b      	ldr	r3, [pc, #364]	; (8001efc <HAL_GPIO_Init+0x334>)
 8001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d9a:	4a59      	ldr	r2, [pc, #356]	; (8001f00 <HAL_GPIO_Init+0x338>)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	220f      	movs	r2, #15
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dc4:	d025      	beq.n	8001e12 <HAL_GPIO_Init+0x24a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4e      	ldr	r2, [pc, #312]	; (8001f04 <HAL_GPIO_Init+0x33c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d01f      	beq.n	8001e0e <HAL_GPIO_Init+0x246>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a4d      	ldr	r2, [pc, #308]	; (8001f08 <HAL_GPIO_Init+0x340>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d019      	beq.n	8001e0a <HAL_GPIO_Init+0x242>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a4c      	ldr	r2, [pc, #304]	; (8001f0c <HAL_GPIO_Init+0x344>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d013      	beq.n	8001e06 <HAL_GPIO_Init+0x23e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4b      	ldr	r2, [pc, #300]	; (8001f10 <HAL_GPIO_Init+0x348>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00d      	beq.n	8001e02 <HAL_GPIO_Init+0x23a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4a      	ldr	r2, [pc, #296]	; (8001f14 <HAL_GPIO_Init+0x34c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d007      	beq.n	8001dfe <HAL_GPIO_Init+0x236>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a49      	ldr	r2, [pc, #292]	; (8001f18 <HAL_GPIO_Init+0x350>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d101      	bne.n	8001dfa <HAL_GPIO_Init+0x232>
 8001df6:	2306      	movs	r3, #6
 8001df8:	e00c      	b.n	8001e14 <HAL_GPIO_Init+0x24c>
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	e00a      	b.n	8001e14 <HAL_GPIO_Init+0x24c>
 8001dfe:	2305      	movs	r3, #5
 8001e00:	e008      	b.n	8001e14 <HAL_GPIO_Init+0x24c>
 8001e02:	2304      	movs	r3, #4
 8001e04:	e006      	b.n	8001e14 <HAL_GPIO_Init+0x24c>
 8001e06:	2303      	movs	r3, #3
 8001e08:	e004      	b.n	8001e14 <HAL_GPIO_Init+0x24c>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e002      	b.n	8001e14 <HAL_GPIO_Init+0x24c>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <HAL_GPIO_Init+0x24c>
 8001e12:	2300      	movs	r3, #0
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	f002 0203 	and.w	r2, r2, #3
 8001e1a:	0092      	lsls	r2, r2, #2
 8001e1c:	4093      	lsls	r3, r2
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e24:	4936      	ldr	r1, [pc, #216]	; (8001f00 <HAL_GPIO_Init+0x338>)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	089b      	lsrs	r3, r3, #2
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e32:	4b3a      	ldr	r3, [pc, #232]	; (8001f1c <HAL_GPIO_Init+0x354>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e56:	4a31      	ldr	r2, [pc, #196]	; (8001f1c <HAL_GPIO_Init+0x354>)
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e5c:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <HAL_GPIO_Init+0x354>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e80:	4a26      	ldr	r2, [pc, #152]	; (8001f1c <HAL_GPIO_Init+0x354>)
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e86:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <HAL_GPIO_Init+0x354>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x2e2>
        {
          temp |= iocurrent;
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eaa:	4a1c      	ldr	r2, [pc, #112]	; (8001f1c <HAL_GPIO_Init+0x354>)
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <HAL_GPIO_Init+0x354>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x30c>
        {
          temp |= iocurrent;
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ed4:	4a11      	ldr	r2, [pc, #68]	; (8001f1c <HAL_GPIO_Init+0x354>)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	3301      	adds	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f47f ae78 	bne.w	8001be0 <HAL_GPIO_Init+0x18>
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	371c      	adds	r7, #28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40010000 	.word	0x40010000
 8001f04:	48000400 	.word	0x48000400
 8001f08:	48000800 	.word	0x48000800
 8001f0c:	48000c00 	.word	0x48000c00
 8001f10:	48001000 	.word	0x48001000
 8001f14:	48001400 	.word	0x48001400
 8001f18:	48001800 	.word	0x48001800
 8001f1c:	40010400 	.word	0x40010400

08001f20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	887b      	ldrh	r3, [r7, #2]
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
 8001f3c:	e001      	b.n	8001f42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f60:	787b      	ldrb	r3, [r7, #1]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f6c:	e002      	b.n	8001f74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f6e:	887a      	ldrh	r2, [r7, #2]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d006      	beq.n	8001fa4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f96:	4a05      	ldr	r2, [pc, #20]	; (8001fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f002 fbd4 	bl	800474c <HAL_GPIO_EXTI_Callback>
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40010400 	.word	0x40010400

08001fb0 <HAL_MspInit>:
  * @brief  Initialize the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually  
            modified by the user
   */ 
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 8001fc4:	4a05      	ldr	r2, [pc, #20]	; (8001fdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fc6:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fce:	6013      	str	r3, [r2, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40007000 	.word	0x40007000

08001fe0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40007000 	.word	0x40007000

08001ffc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08c      	sub	sp, #48	; 0x30
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80db 	beq.w	80021cc <HAL_RCC_OscConfig+0x1d0>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8002016:	4ba2      	ldr	r3, [pc, #648]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 8084 	bne.w	800212c <HAL_RCC_OscConfig+0x130>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002024:	4b9e      	ldr	r3, [pc, #632]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_OscConfig+0x40>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_RCC_OscConfig+0x40>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e35f      	b.n	80026fc <HAL_RCC_OscConfig+0x700>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1a      	ldr	r2, [r3, #32]
 8002040:	4b97      	ldr	r3, [pc, #604]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d004      	beq.n	8002056 <HAL_RCC_OscConfig+0x5a>
 800204c:	4b94      	ldr	r3, [pc, #592]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002054:	e005      	b.n	8002062 <HAL_RCC_OscConfig+0x66>
 8002056:	4b92      	ldr	r3, [pc, #584]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 8002058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002062:	429a      	cmp	r2, r3
 8002064:	d923      	bls.n	80020ae <HAL_RCC_OscConfig+0xb2>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fdc8 	bl	8002c00 <RCC_SetFlashLatencyFromMSIRange>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e340      	b.n	80026fc <HAL_RCC_OscConfig+0x700>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800207a:	4a89      	ldr	r2, [pc, #548]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 800207c:	4b88      	ldr	r3, [pc, #544]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f043 0308 	orr.w	r3, r3, #8
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	4986      	ldr	r1, [pc, #536]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 8002088:	4b85      	ldr	r3, [pc, #532]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4313      	orrs	r3, r2
 8002096:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002098:	4981      	ldr	r1, [pc, #516]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 800209a:	4b81      	ldr	r3, [pc, #516]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
 80020ac:	e022      	b.n	80020f4 <HAL_RCC_OscConfig+0xf8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ae:	4a7c      	ldr	r2, [pc, #496]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 80020b0:	4b7b      	ldr	r3, [pc, #492]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f043 0308 	orr.w	r3, r3, #8
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4979      	ldr	r1, [pc, #484]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 80020bc:	4b78      	ldr	r3, [pc, #480]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020cc:	4974      	ldr	r1, [pc, #464]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 80020ce:	4b74      	ldr	r3, [pc, #464]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 fd8b 	bl	8002c00 <RCC_SetFlashLatencyFromMSIRange>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e303      	b.n	80026fc <HAL_RCC_OscConfig+0x700>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80020f4:	f000 fc2a 	bl	800294c <HAL_RCC_GetSysClockFreq>
 80020f8:	4601      	mov	r1, r0
 80020fa:	4b69      	ldr	r3, [pc, #420]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002102:	23f0      	movs	r3, #240	; 0xf0
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	fa93 f3a3 	rbit	r3, r3
 800210c:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	fab3 f383 	clz	r3, r3
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
 8002118:	4a62      	ldr	r2, [pc, #392]	; (80022a4 <HAL_RCC_OscConfig+0x2a8>)
 800211a:	5cd3      	ldrb	r3, [r2, r3]
 800211c:	fa21 f303 	lsr.w	r3, r1, r3
 8002120:	4a61      	ldr	r2, [pc, #388]	; (80022a8 <HAL_RCC_OscConfig+0x2ac>)
 8002122:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8002124:	200f      	movs	r0, #15
 8002126:	f002 f919 	bl	800435c <HAL_InitTick>
 800212a:	e04f      	b.n	80021cc <HAL_RCC_OscConfig+0x1d0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d032      	beq.n	800219a <HAL_RCC_OscConfig+0x19e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002134:	4a5a      	ldr	r2, [pc, #360]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 8002136:	4b5a      	ldr	r3, [pc, #360]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002140:	f7ff fc14 	bl	800196c <HAL_GetTick>
 8002144:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002148:	f7ff fc10 	bl	800196c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e2d0      	b.n	80026fc <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800215a:	4b51      	ldr	r3, [pc, #324]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0x14c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002166:	4a4e      	ldr	r2, [pc, #312]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 8002168:	4b4d      	ldr	r3, [pc, #308]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f043 0308 	orr.w	r3, r3, #8
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	494b      	ldr	r1, [pc, #300]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 8002174:	4b4a      	ldr	r3, [pc, #296]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4313      	orrs	r3, r2
 8002182:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002184:	4946      	ldr	r1, [pc, #280]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 8002186:	4b46      	ldr	r3, [pc, #280]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
 8002198:	e018      	b.n	80021cc <HAL_RCC_OscConfig+0x1d0>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800219a:	4a41      	ldr	r2, [pc, #260]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 800219c:	4b40      	ldr	r3, [pc, #256]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021a6:	f7ff fbe1 	bl	800196c <HAL_GetTick>
 80021aa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021ae:	f7ff fbdd 	bl	800196c <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e29d      	b.n	80026fc <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80021c0:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f0      	bne.n	80021ae <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d07a      	beq.n	80022ce <HAL_RCC_OscConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80021d8:	4b31      	ldr	r3, [pc, #196]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d00b      	beq.n	80021fc <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e4:	4b2e      	ldr	r3, [pc, #184]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80021ec:	2b0c      	cmp	r3, #12
 80021ee:	d111      	bne.n	8002214 <HAL_RCC_OscConfig+0x218>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021f0:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d10b      	bne.n	8002214 <HAL_RCC_OscConfig+0x218>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d061      	beq.n	80022cc <HAL_RCC_OscConfig+0x2d0>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d15d      	bne.n	80022cc <HAL_RCC_OscConfig+0x2d0>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e273      	b.n	80026fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221c:	d106      	bne.n	800222c <HAL_RCC_OscConfig+0x230>
 800221e:	4a20      	ldr	r2, [pc, #128]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 8002220:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e01d      	b.n	8002268 <HAL_RCC_OscConfig+0x26c>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002234:	d10c      	bne.n	8002250 <HAL_RCC_OscConfig+0x254>
 8002236:	4a1a      	ldr	r2, [pc, #104]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	4a17      	ldr	r2, [pc, #92]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 8002244:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e00b      	b.n	8002268 <HAL_RCC_OscConfig+0x26c>
 8002250:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 8002252:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	4a10      	ldr	r2, [pc, #64]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d013      	beq.n	8002298 <HAL_RCC_OscConfig+0x29c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7ff fb7c 	bl	800196c <HAL_GetTick>
 8002274:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x28e>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002278:	f7ff fb78 	bl	800196c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	; 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x28e>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e238      	b.n	80026fc <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_RCC_OscConfig+0x2a4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x27c>
 8002296:	e01a      	b.n	80022ce <HAL_RCC_OscConfig+0x2d2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7ff fb68 	bl	800196c <HAL_GetTick>
 800229c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800229e:	e00e      	b.n	80022be <HAL_RCC_OscConfig+0x2c2>
 80022a0:	40021000 	.word	0x40021000
 80022a4:	08004cb0 	.word	0x08004cb0
 80022a8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ac:	f7ff fb5e 	bl	800196c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b64      	cmp	r3, #100	; 0x64
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x2c2>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e21e      	b.n	80026fc <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80022be:	4bb0      	ldr	r3, [pc, #704]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x2b0>
 80022ca:	e000      	b.n	80022ce <HAL_RCC_OscConfig+0x2d2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d07f      	beq.n	80023da <HAL_RCC_OscConfig+0x3de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80022da:	4ba9      	ldr	r3, [pc, #676]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d00b      	beq.n	80022fe <HAL_RCC_OscConfig+0x302>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022e6:	4ba6      	ldr	r3, [pc, #664]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80022ee:	2b0c      	cmp	r3, #12
 80022f0:	d127      	bne.n	8002342 <HAL_RCC_OscConfig+0x346>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022f2:	4ba3      	ldr	r3, [pc, #652]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d121      	bne.n	8002342 <HAL_RCC_OscConfig+0x346>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022fe:	4ba0      	ldr	r3, [pc, #640]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_RCC_OscConfig+0x31a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e1f2      	b.n	80026fc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002316:	489a      	ldr	r0, [pc, #616]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 8002318:	4b99      	ldr	r3, [pc, #612]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6919      	ldr	r1, [r3, #16]
 8002324:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8002328:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	61bb      	str	r3, [r7, #24]
  return(result);
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	fa01 f303 	lsl.w	r3, r1, r3
 800233c:	4313      	orrs	r3, r2
 800233e:	6043      	str	r3, [r0, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002340:	e04b      	b.n	80023da <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d02e      	beq.n	80023a8 <HAL_RCC_OscConfig+0x3ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800234a:	4a8d      	ldr	r2, [pc, #564]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 800234c:	4b8c      	ldr	r3, [pc, #560]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7ff fb09 	bl	800196c <HAL_GetTick>
 800235a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235e:	f7ff fb05 	bl	800196c <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x374>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e1c5      	b.n	80026fc <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002370:	4b83      	ldr	r3, [pc, #524]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x362>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4880      	ldr	r0, [pc, #512]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 800237e:	4b80      	ldr	r3, [pc, #512]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6919      	ldr	r1, [r3, #16]
 800238a:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 800238e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	613b      	str	r3, [r7, #16]
  return(result);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	4313      	orrs	r3, r2
 80023a4:	6043      	str	r3, [r0, #4]
 80023a6:	e018      	b.n	80023da <HAL_RCC_OscConfig+0x3de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a8:	4a75      	ldr	r2, [pc, #468]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 80023aa:	4b75      	ldr	r3, [pc, #468]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7ff fada 	bl	800196c <HAL_GetTick>
 80023b8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023bc:	f7ff fad6 	bl	800196c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e196      	b.n	80026fc <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80023ce:	4b6c      	ldr	r3, [pc, #432]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d03c      	beq.n	8002460 <HAL_RCC_OscConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d01c      	beq.n	8002428 <HAL_RCC_OscConfig+0x42c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ee:	4a64      	ldr	r2, [pc, #400]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 80023f0:	4b63      	ldr	r3, [pc, #396]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 80023f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fe:	f7ff fab5 	bl	800196c <HAL_GetTick>
 8002402:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002406:	f7ff fab1 	bl	800196c <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e171      	b.n	80026fc <HAL_RCC_OscConfig+0x700>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8002418:	4b59      	ldr	r3, [pc, #356]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 800241a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0ef      	beq.n	8002406 <HAL_RCC_OscConfig+0x40a>
 8002426:	e01b      	b.n	8002460 <HAL_RCC_OscConfig+0x464>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002428:	4a55      	ldr	r2, [pc, #340]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 800242a:	4b55      	ldr	r3, [pc, #340]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 800242c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002438:	f7ff fa98 	bl	800196c <HAL_GetTick>
 800243c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002440:	f7ff fa94 	bl	800196c <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e154      	b.n	80026fc <HAL_RCC_OscConfig+0x700>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8002452:	4b4b      	ldr	r3, [pc, #300]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 8002454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1ef      	bne.n	8002440 <HAL_RCC_OscConfig+0x444>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80a9 	beq.w	80025c0 <HAL_RCC_OscConfig+0x5c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002474:	4b42      	ldr	r3, [pc, #264]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10e      	bne.n	800249e <HAL_RCC_OscConfig+0x4a2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002480:	4a3f      	ldr	r2, [pc, #252]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 8002482:	4b3f      	ldr	r3, [pc, #252]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248a:	6593      	str	r3, [r2, #88]	; 0x58
 800248c:	4b3c      	ldr	r3, [pc, #240]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 800248e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002498:	2301      	movs	r3, #1
 800249a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800249e:	4b39      	ldr	r3, [pc, #228]	; (8002584 <HAL_RCC_OscConfig+0x588>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d118      	bne.n	80024dc <HAL_RCC_OscConfig+0x4e0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024aa:	4a36      	ldr	r2, [pc, #216]	; (8002584 <HAL_RCC_OscConfig+0x588>)
 80024ac:	4b35      	ldr	r3, [pc, #212]	; (8002584 <HAL_RCC_OscConfig+0x588>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b6:	f7ff fa59 	bl	800196c <HAL_GetTick>
 80024ba:	62b8      	str	r0, [r7, #40]	; 0x28

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024be:	f7ff fa55 	bl	800196c <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e115      	b.n	80026fc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d0:	4b2c      	ldr	r3, [pc, #176]	; (8002584 <HAL_RCC_OscConfig+0x588>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x4c2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d108      	bne.n	80024f6 <HAL_RCC_OscConfig+0x4fa>
 80024e4:	4a26      	ldr	r2, [pc, #152]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 80024e6:	4b26      	ldr	r3, [pc, #152]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 80024e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024f4:	e024      	b.n	8002540 <HAL_RCC_OscConfig+0x544>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b05      	cmp	r3, #5
 80024fc:	d110      	bne.n	8002520 <HAL_RCC_OscConfig+0x524>
 80024fe:	4a20      	ldr	r2, [pc, #128]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 8002500:	4b1f      	ldr	r3, [pc, #124]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 8002502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002506:	f043 0304 	orr.w	r3, r3, #4
 800250a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800250e:	4a1c      	ldr	r2, [pc, #112]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 8002510:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 8002512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800251e:	e00f      	b.n	8002540 <HAL_RCC_OscConfig+0x544>
 8002520:	4a17      	ldr	r2, [pc, #92]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 8002522:	4b17      	ldr	r3, [pc, #92]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002530:	4a13      	ldr	r2, [pc, #76]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 8002532:	4b13      	ldr	r3, [pc, #76]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 8002534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002538:	f023 0304 	bic.w	r3, r3, #4
 800253c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d016      	beq.n	8002576 <HAL_RCC_OscConfig+0x57a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002548:	f7ff fa10 	bl	800196c <HAL_GetTick>
 800254c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800254e:	e00a      	b.n	8002566 <HAL_RCC_OscConfig+0x56a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002550:	f7ff fa0c 	bl	800196c <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	; 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x56a>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0ca      	b.n	80026fc <HAL_RCC_OscConfig+0x700>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_RCC_OscConfig+0x584>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0ed      	beq.n	8002550 <HAL_RCC_OscConfig+0x554>
 8002574:	e01a      	b.n	80025ac <HAL_RCC_OscConfig+0x5b0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002576:	f7ff f9f9 	bl	800196c <HAL_GetTick>
 800257a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800257c:	e00f      	b.n	800259e <HAL_RCC_OscConfig+0x5a2>
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002588:	f7ff f9f0 	bl	800196c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	; 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x5a2>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e0ae      	b.n	80026fc <HAL_RCC_OscConfig+0x700>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800259e:	4b59      	ldr	r3, [pc, #356]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 80025a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ed      	bne.n	8002588 <HAL_RCC_OscConfig+0x58c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d105      	bne.n	80025c0 <HAL_RCC_OscConfig+0x5c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b4:	4a53      	ldr	r2, [pc, #332]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 80025b6:	4b53      	ldr	r3, [pc, #332]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025be:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 8098 	beq.w	80026fa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ca:	4b4e      	ldr	r3, [pc, #312]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	f000 808f 	beq.w	80026f6 <HAL_RCC_OscConfig+0x6fa>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d156      	bne.n	800268e <HAL_RCC_OscConfig+0x692>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e0:	4a48      	ldr	r2, [pc, #288]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 80025e2:	4b48      	ldr	r3, [pc, #288]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7ff f9be 	bl	800196c <HAL_GetTick>
 80025f0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x60a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f4:	f7ff f9ba 	bl	800196c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x60a>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e07a      	b.n	80026fc <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002606:	4b3f      	ldr	r3, [pc, #252]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x5f8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002612:	493c      	ldr	r1, [pc, #240]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	3b01      	subs	r3, #1
 800261a:	011a      	lsls	r2, r3, #4
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	045b      	lsls	r3, r3, #17
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	3b01      	subs	r3, #1
 800263c:	055b      	lsls	r3, r3, #21
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	085b      	lsrs	r3, r3, #1
 8002646:	3b01      	subs	r3, #1
 8002648:	065b      	lsls	r3, r3, #25
 800264a:	4313      	orrs	r3, r2
 800264c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800264e:	4a2d      	ldr	r2, [pc, #180]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 8002650:	4b2c      	ldr	r3, [pc, #176]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002658:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800265a:	4a2a      	ldr	r2, [pc, #168]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 800265c:	4b29      	ldr	r3, [pc, #164]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002664:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7ff f981 	bl	800196c <HAL_GetTick>
 800266a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266e:	f7ff f97d 	bl	800196c <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e03d      	b.n	80026fc <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002680:	4b20      	ldr	r3, [pc, #128]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x672>
 800268c:	e035      	b.n	80026fa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268e:	4a1d      	ldr	r2, [pc, #116]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 8002690:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002698:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800269a:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10b      	bne.n	80026be <HAL_RCC_OscConfig+0x6c2>
#if defined(RCC_PLLSAI2_SUPPORT)
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 80026a6:	4b17      	ldr	r3, [pc, #92]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
           && 
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d105      	bne.n	80026be <HAL_RCC_OscConfig+0x6c2>
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80026b2:	4a14      	ldr	r2, [pc, #80]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 80026b4:	4b13      	ldr	r3, [pc, #76]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f023 0303 	bic.w	r3, r3, #3
 80026bc:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026be:	4a11      	ldr	r2, [pc, #68]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 80026c0:	4b10      	ldr	r3, [pc, #64]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026cc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7ff f94d 	bl	800196c <HAL_GetTick>
 80026d2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x6ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d6:	f7ff f949 	bl	800196c <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x6ec>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e009      	b.n	80026fc <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_RCC_OscConfig+0x708>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f0      	bne.n	80026d6 <HAL_RCC_OscConfig+0x6da>
 80026f4:	e001      	b.n	80026fa <HAL_RCC_OscConfig+0x6fe>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_RCC_OscConfig+0x700>
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3730      	adds	r7, #48	; 0x30
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000

08002708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002716:	4b89      	ldr	r3, [pc, #548]	; (800293c <HAL_RCC_ClockConfig+0x234>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0207 	and.w	r2, r3, #7
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d210      	bcs.n	8002746 <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002724:	4985      	ldr	r1, [pc, #532]	; (800293c <HAL_RCC_ClockConfig+0x234>)
 8002726:	4b85      	ldr	r3, [pc, #532]	; (800293c <HAL_RCC_ClockConfig+0x234>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 0207 	bic.w	r2, r3, #7
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002734:	4b81      	ldr	r3, [pc, #516]	; (800293c <HAL_RCC_ClockConfig+0x234>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0207 	and.w	r2, r3, #7
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d001      	beq.n	8002746 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0f6      	b.n	8002934 <HAL_RCC_ClockConfig+0x22c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d008      	beq.n	8002764 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002752:	497b      	ldr	r1, [pc, #492]	; (8002940 <HAL_RCC_ClockConfig+0x238>)
 8002754:	4b7a      	ldr	r3, [pc, #488]	; (8002940 <HAL_RCC_ClockConfig+0x238>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4313      	orrs	r3, r2
 8002762:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 808e 	beq.w	800288e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800277a:	4b71      	ldr	r3, [pc, #452]	; (8002940 <HAL_RCC_ClockConfig+0x238>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d121      	bne.n	80027ca <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e0d4      	b.n	8002934 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b03      	cmp	r3, #3
 8002790:	d107      	bne.n	80027a2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002792:	4b6b      	ldr	r3, [pc, #428]	; (8002940 <HAL_RCC_ClockConfig+0x238>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d115      	bne.n	80027ca <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e0c8      	b.n	8002934 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80027aa:	4b65      	ldr	r3, [pc, #404]	; (8002940 <HAL_RCC_ClockConfig+0x238>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d109      	bne.n	80027ca <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e0bc      	b.n	8002934 <HAL_RCC_ClockConfig+0x22c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80027ba:	4b61      	ldr	r3, [pc, #388]	; (8002940 <HAL_RCC_ClockConfig+0x238>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e0b4      	b.n	8002934 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027ca:	495d      	ldr	r1, [pc, #372]	; (8002940 <HAL_RCC_ClockConfig+0x238>)
 80027cc:	4b5c      	ldr	r3, [pc, #368]	; (8002940 <HAL_RCC_ClockConfig+0x238>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f023 0203 	bic.w	r2, r3, #3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4313      	orrs	r3, r2
 80027da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027dc:	f7ff f8c6 	bl	800196c <HAL_GetTick>
 80027e0:	6178      	str	r0, [r7, #20]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d112      	bne.n	8002810 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80027ea:	e00a      	b.n	8002802 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ec:	f7ff f8be 	bl	800196c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e098      	b.n	8002934 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8002802:	4b4f      	ldr	r3, [pc, #316]	; (8002940 <HAL_RCC_ClockConfig+0x238>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b08      	cmp	r3, #8
 800280c:	d1ee      	bne.n	80027ec <HAL_RCC_ClockConfig+0xe4>
 800280e:	e03e      	b.n	800288e <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b03      	cmp	r3, #3
 8002816:	d112      	bne.n	800283e <HAL_RCC_ClockConfig+0x136>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_ClockConfig+0x128>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281a:	f7ff f8a7 	bl	800196c <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	; 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_ClockConfig+0x128>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e081      	b.n	8002934 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002830:	4b43      	ldr	r3, [pc, #268]	; (8002940 <HAL_RCC_ClockConfig+0x238>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 030c 	and.w	r3, r3, #12
 8002838:	2b0c      	cmp	r3, #12
 800283a:	d1ee      	bne.n	800281a <HAL_RCC_ClockConfig+0x112>
 800283c:	e027      	b.n	800288e <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d11d      	bne.n	8002882 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8002846:	e00a      	b.n	800285e <HAL_RCC_ClockConfig+0x156>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002848:	f7ff f890 	bl	800196c <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f241 3288 	movw	r2, #5000	; 0x1388
 8002856:	4293      	cmp	r3, r2
 8002858:	d901      	bls.n	800285e <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e06a      	b.n	8002934 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800285e:	4b38      	ldr	r3, [pc, #224]	; (8002940 <HAL_RCC_ClockConfig+0x238>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1ee      	bne.n	8002848 <HAL_RCC_ClockConfig+0x140>
 800286a:	e010      	b.n	800288e <HAL_RCC_ClockConfig+0x186>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286c:	f7ff f87e 	bl	800196c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	; 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e058      	b.n	8002934 <HAL_RCC_ClockConfig+0x22c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8002882:	4b2f      	ldr	r3, [pc, #188]	; (8002940 <HAL_RCC_ClockConfig+0x238>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b04      	cmp	r3, #4
 800288c:	d1ee      	bne.n	800286c <HAL_RCC_ClockConfig+0x164>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800288e:	4b2b      	ldr	r3, [pc, #172]	; (800293c <HAL_RCC_ClockConfig+0x234>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0207 	and.w	r2, r3, #7
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d910      	bls.n	80028be <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289c:	4927      	ldr	r1, [pc, #156]	; (800293c <HAL_RCC_ClockConfig+0x234>)
 800289e:	4b27      	ldr	r3, [pc, #156]	; (800293c <HAL_RCC_ClockConfig+0x234>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 0207 	bic.w	r2, r3, #7
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028ac:	4b23      	ldr	r3, [pc, #140]	; (800293c <HAL_RCC_ClockConfig+0x234>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0207 	and.w	r2, r3, #7
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d001      	beq.n	80028be <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e03a      	b.n	8002934 <HAL_RCC_ClockConfig+0x22c>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d008      	beq.n	80028dc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ca:	491d      	ldr	r1, [pc, #116]	; (8002940 <HAL_RCC_ClockConfig+0x238>)
 80028cc:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <HAL_RCC_ClockConfig+0x238>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4313      	orrs	r3, r2
 80028da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d009      	beq.n	80028fc <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028e8:	4915      	ldr	r1, [pc, #84]	; (8002940 <HAL_RCC_ClockConfig+0x238>)
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <HAL_RCC_ClockConfig+0x238>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4313      	orrs	r3, r2
 80028fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80028fc:	f000 f826 	bl	800294c <HAL_RCC_GetSysClockFreq>
 8002900:	4601      	mov	r1, r0
 8002902:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <HAL_RCC_ClockConfig+0x238>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800290a:	23f0      	movs	r3, #240	; 0xf0
 800290c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	60fb      	str	r3, [r7, #12]
  return(result);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	fab3 f383 	clz	r3, r3
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
 8002920:	4a08      	ldr	r2, [pc, #32]	; (8002944 <HAL_RCC_ClockConfig+0x23c>)
 8002922:	5cd3      	ldrb	r3, [r2, r3]
 8002924:	fa21 f303 	lsr.w	r3, r1, r3
 8002928:	4a07      	ldr	r2, [pc, #28]	; (8002948 <HAL_RCC_ClockConfig+0x240>)
 800292a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800292c:	200f      	movs	r0, #15
 800292e:	f001 fd15 	bl	800435c <HAL_InitTick>

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40022000 	.word	0x40022000
 8002940:	40021000 	.word	0x40021000
 8002944:	08004cb0 	.word	0x08004cb0
 8002948:	20000004 	.word	0x20000004

0800294c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800294c:	b480      	push	{r7}
 800294e:	b095      	sub	sp, #84	; 0x54
 8002950:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8002952:	2300      	movs	r3, #0
 8002954:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002956:	2300      	movs	r3, #0
 8002958:	64bb      	str	r3, [r7, #72]	; 0x48
 800295a:	2300      	movs	r3, #0
 800295c:	643b      	str	r3, [r7, #64]	; 0x40
 800295e:	2302      	movs	r3, #2
 8002960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002962:	2302      	movs	r3, #2
 8002964:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t sysclockfreq = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	647b      	str	r3, [r7, #68]	; 0x44

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800296a:	4b71      	ldr	r3, [pc, #452]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00b      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8002976:	4b6e      	ldr	r3, [pc, #440]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800297e:	2b0c      	cmp	r3, #12
 8002980:	d13c      	bne.n	80029fc <HAL_RCC_GetSysClockFreq+0xb0>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8002982:	4b6b      	ldr	r3, [pc, #428]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d136      	bne.n	80029fc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 800298e:	4b68      	ldr	r3, [pc, #416]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d112      	bne.n	80029c0 <HAL_RCC_GetSysClockFreq+0x74>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 800299a:	4b65      	ldr	r3, [pc, #404]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800299c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80029a4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80029a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	fab3 f383 	clz	r3, r3
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
 80029bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029be:	e00f      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 80029c0:	4b5b      	ldr	r3, [pc, #364]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029c8:	23f0      	movs	r3, #240	; 0xf0
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ce:	fa93 f3a3 	rbit	r3, r3
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	fa22 f303 	lsr.w	r3, r2, r3
 80029de:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029e0:	4a54      	ldr	r2, [pc, #336]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x1e8>)
 80029e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e8:	64fb      	str	r3, [r7, #76]	; 0x4c

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80029ea:	4b51      	ldr	r3, [pc, #324]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d113      	bne.n	8002a1e <HAL_RCC_GetSysClockFreq+0xd2>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f8:	647b      	str	r3, [r7, #68]	; 0x44
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80029fa:	e010      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0xd2>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80029fc:	4b4c      	ldr	r3, [pc, #304]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d102      	bne.n	8002a0e <HAL_RCC_GetSysClockFreq+0xc2>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a08:	4b4b      	ldr	r3, [pc, #300]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x1ec>)
 8002a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a0c:	e007      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0xd2>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a0e:	4b48      	ldr	r3, [pc, #288]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a1a:	4b48      	ldr	r3, [pc, #288]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a1c:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a1e:	4b44      	ldr	r3, [pc, #272]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b0c      	cmp	r3, #12
 8002a28:	d17b      	bne.n	8002b22 <HAL_RCC_GetSysClockFreq+0x1d6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002a2a:	4b41      	ldr	r3, [pc, #260]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	643b      	str	r3, [r7, #64]	; 0x40
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8002a34:	4b3e      	ldr	r3, [pc, #248]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a3c:	2370      	movs	r3, #112	; 0x70
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	623b      	str	r3, [r7, #32]
  return(result);
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (pllsource)
 8002a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d002      	beq.n	8002a62 <HAL_RCC_GetSysClockFreq+0x116>
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d018      	beq.n	8002a92 <HAL_RCC_GetSysClockFreq+0x146>
 8002a60:	e02f      	b.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x176>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8002a62:	4a35      	ldr	r2, [pc, #212]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x1ec>)
 8002a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6a:	4a31      	ldr	r2, [pc, #196]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002a6c:	68d2      	ldr	r2, [r2, #12]
 8002a6e:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8002a72:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002a76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	69fa      	ldr	r2, [r7, #28]
 8002a7a:	fa92 f2a2 	rbit	r2, r2
 8002a7e:	61ba      	str	r2, [r7, #24]
  return(result);
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	fab2 f282 	clz	r2, r2
 8002a86:	fa21 f202 	lsr.w	r2, r1, r2
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a90:	e02f      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8002a92:	4a2a      	ldr	r2, [pc, #168]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9a:	4a25      	ldr	r2, [pc, #148]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002a9c:	68d2      	ldr	r2, [r2, #12]
 8002a9e:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8002aa2:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002aa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	fa92 f2a2 	rbit	r2, r2
 8002aae:	613a      	str	r2, [r7, #16]
  return(result);
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	fab2 f282 	clz	r2, r2
 8002ab6:	fa21 f202 	lsr.w	r2, r1, r2
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ac0:	e017      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8002ac2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aca:	4a19      	ldr	r2, [pc, #100]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002acc:	68d2      	ldr	r2, [r2, #12]
 8002ace:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8002ad2:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002ad6:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	fa92 f2a2 	rbit	r2, r2
 8002ade:	60ba      	str	r2, [r7, #8]
  return(result);
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	fab2 f282 	clz	r2, r2
 8002ae6:	fa21 f202 	lsr.w	r2, r1, r2
 8002aea:	fb02 f303 	mul.w	r3, r2, r3
 8002aee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002af0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8002af2:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002afa:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8002afe:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	603b      	str	r3, [r7, #0]
  return(result);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b12:	3301      	adds	r3, #1
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	63fb      	str	r3, [r7, #60]	; 0x3c
    sysclockfreq = pllvco/pllr;
 8002b18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	647b      	str	r3, [r7, #68]	; 0x44
  }

  return sysclockfreq;
 8002b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3754      	adds	r7, #84	; 0x54
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	40021000 	.word	0x40021000
 8002b34:	08004cc8 	.word	0x08004cc8
 8002b38:	00f42400 	.word	0x00f42400
 8002b3c:	007a1200 	.word	0x007a1200

08002b40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b46:	681b      	ldr	r3, [r3, #0]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000004 	.word	0x20000004

08002b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002b5e:	f7ff ffef 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8002b62:	4601      	mov	r1, r0
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b6c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002b70:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	fa93 f3a3 	rbit	r3, r3
 8002b78:	603b      	str	r3, [r7, #0]
  return(result);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	fab3 f383 	clz	r3, r3
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
 8002b84:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b86:	5cd3      	ldrb	r3, [r2, r3]
 8002b88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40021000 	.word	0x40021000
 8002b98:	08004cc0 	.word	0x08004cc0

08002b9c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	220f      	movs	r2, #15
 8002baa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bac:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0203 	and.w	r2, r3, #3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	08db      	lsrs	r3, r3, #3
 8002bd6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bde:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <HAL_RCC_GetClockConfig+0x60>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0207 	and.w	r2, r3, #7
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	601a      	str	r2, [r3, #0]
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40022000 	.word	0x40022000

08002c00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c10:	4b2a      	ldr	r3, [pc, #168]	; (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c1c:	f7ff f9e0 	bl	8001fe0 <HAL_PWREx_GetVoltageRange>
 8002c20:	6178      	str	r0, [r7, #20]
 8002c22:	e014      	b.n	8002c4e <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c24:	4a25      	ldr	r2, [pc, #148]	; (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c26:	4b25      	ldr	r3, [pc, #148]	; (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c30:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c3c:	f7ff f9d0 	bl	8001fe0 <HAL_PWREx_GetVoltageRange>
 8002c40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c42:	4a1e      	ldr	r2, [pc, #120]	; (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c44:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c54:	d10b      	bne.n	8002c6e <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b80      	cmp	r3, #128	; 0x80
 8002c5a:	d919      	bls.n	8002c90 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2ba0      	cmp	r3, #160	; 0xa0
 8002c60:	d902      	bls.n	8002c68 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c62:	2302      	movs	r3, #2
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	e013      	b.n	8002c90 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c68:	2301      	movs	r3, #1
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	e010      	b.n	8002c90 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b80      	cmp	r3, #128	; 0x80
 8002c72:	d902      	bls.n	8002c7a <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c74:	2303      	movs	r3, #3
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	e00a      	b.n	8002c90 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b80      	cmp	r3, #128	; 0x80
 8002c7e:	d102      	bne.n	8002c86 <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c80:	2302      	movs	r3, #2
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	e004      	b.n	8002c90 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b70      	cmp	r3, #112	; 0x70
 8002c8a:	d101      	bne.n	8002c90 <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	613b      	str	r3, [r7, #16]
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8002c90:	490b      	ldr	r1, [pc, #44]	; (8002cc0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 0207 	bic.w	r2, r3, #7
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002ca0:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0207 	and.w	r2, r3, #7
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d001      	beq.n	8002cb2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40022000 	.word	0x40022000

08002cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cd8:	2300      	movs	r3, #0
 8002cda:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d03f      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf0:	d01c      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf6:	d802      	bhi.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00e      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002cfc:	e01f      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002cfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d02:	d003      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x48>
 8002d04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d08:	d01c      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8002d0a:	e018      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d0c:	4a82      	ldr	r2, [pc, #520]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002d0e:	4b82      	ldr	r3, [pc, #520]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d18:	e015      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x82>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 fadb 	bl	80032dc <RCCEx_PLLSAI1_Config>
 8002d26:	4603      	mov	r3, r0
 8002d28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d2a:	e00c      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x82>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3320      	adds	r3, #32
 8002d30:	2100      	movs	r1, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fc26 	bl	8003584 <RCCEx_PLLSAI2_Config>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d3c:	e003      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x82>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	74fb      	strb	r3, [r7, #19]
      break;
 8002d42:	e000      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x82>
      break;
 8002d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d46:	7cfb      	ldrb	r3, [r7, #19]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d4c:	4972      	ldr	r1, [pc, #456]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002d4e:	4b72      	ldr	r3, [pc, #456]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d62:	e001      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d03f      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d7c:	d01c      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d82:	d802      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00e      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d88:	e01f      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d8e:	d003      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d94:	d01c      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d96:	e018      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d98:	4a5f      	ldr	r2, [pc, #380]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002d9a:	4b5f      	ldr	r3, [pc, #380]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002da4:	e015      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3304      	adds	r3, #4
 8002daa:	2100      	movs	r1, #0
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fa95 	bl	80032dc <RCCEx_PLLSAI1_Config>
 8002db2:	4603      	mov	r3, r0
 8002db4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002db6:	e00c      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3320      	adds	r3, #32
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fbe0 	bl	8003584 <RCCEx_PLLSAI2_Config>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dc8:	e003      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    case RCC_SAI2CLKSOURCE_PIN:      /* External clock is used as source of SAI2 clock*/
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	74fb      	strb	r3, [r7, #19]
      break;
 8002dce:	e000      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dd2:	7cfb      	ldrb	r3, [r7, #19]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10b      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dd8:	494f      	ldr	r1, [pc, #316]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002dda:	4b4f      	ldr	r3, [pc, #316]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002dee:	e001      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 809a 	beq.w	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e02:	2300      	movs	r3, #0
 8002e04:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e06:	4b44      	ldr	r3, [pc, #272]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10d      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e12:	4a41      	ldr	r2, [pc, #260]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002e14:	4b40      	ldr	r3, [pc, #256]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e1e:	4b3e      	ldr	r3, [pc, #248]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e2e:	4a3b      	ldr	r2, [pc, #236]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e30:	4b3a      	ldr	r3, [pc, #232]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e3a:	f7fe fd97 	bl	800196c <HAL_GetTick>
 8002e3e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e40:	e009      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e42:	f7fe fd93 	bl	800196c <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d902      	bls.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x192>
      {
        ret = HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	74fb      	strb	r3, [r7, #19]
        break;
 8002e54:	e005      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e56:	4b31      	ldr	r3, [pc, #196]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0ef      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x17e>
      }
    }

    if(ret == HAL_OK)
 8002e62:	7cfb      	ldrb	r3, [r7, #19]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d15b      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e68:	4b2b      	ldr	r3, [pc, #172]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e72:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d01f      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d019      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e86:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e90:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e92:	4a21      	ldr	r2, [pc, #132]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002e94:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea2:	4a1d      	ldr	r2, [pc, #116]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ea4:	4b1c      	ldr	r3, [pc, #112]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002eb2:	4a19      	ldr	r2, [pc, #100]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d016      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x22e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7fe fd52 	bl	800196c <HAL_GetTick>
 8002ec8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x220>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ecc:	f7fe fd4e 	bl	800196c <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d902      	bls.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x220>
          {
            ret = HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	74fb      	strb	r3, [r7, #19]
            break;
 8002ee2:	e006      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x22e>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0ec      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x208>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002ef2:	7cfb      	ldrb	r3, [r7, #19]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10c      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x24e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ef8:	4907      	ldr	r1, [pc, #28]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002efa:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f10:	e008      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x260>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f12:	7cfb      	ldrb	r3, [r7, #19]
 8002f14:	74bb      	strb	r3, [r7, #18]
 8002f16:	e005      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f20:	7cfb      	ldrb	r3, [r7, #19]
 8002f22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f24:	7c7b      	ldrb	r3, [r7, #17]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d105      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2a:	4a9e      	ldr	r2, [pc, #632]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002f2c:	4b9d      	ldr	r3, [pc, #628]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f42:	4998      	ldr	r1, [pc, #608]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002f44:	4b97      	ldr	r3, [pc, #604]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	f023 0203 	bic.w	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f64:	498f      	ldr	r1, [pc, #572]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002f66:	4b8f      	ldr	r3, [pc, #572]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	f023 020c 	bic.w	r2, r3, #12
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f86:	4987      	ldr	r1, [pc, #540]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002f88:	4b86      	ldr	r3, [pc, #536]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fa8:	497e      	ldr	r1, [pc, #504]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002faa:	4b7e      	ldr	r3, [pc, #504]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fca:	4976      	ldr	r1, [pc, #472]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002fcc:	4b75      	ldr	r3, [pc, #468]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fec:	496d      	ldr	r1, [pc, #436]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002fee:	4b6d      	ldr	r3, [pc, #436]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800300e:	4965      	ldr	r1, [pc, #404]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003010:	4b64      	ldr	r3, [pc, #400]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003016:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003030:	495c      	ldr	r1, [pc, #368]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003032:	4b5c      	ldr	r3, [pc, #368]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003038:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003052:	4954      	ldr	r1, [pc, #336]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003054:	4b53      	ldr	r3, [pc, #332]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)  

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003074:	494b      	ldr	r1, [pc, #300]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003076:	4b4b      	ldr	r3, [pc, #300]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003096:	4943      	ldr	r1, [pc, #268]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003098:	4b42      	ldr	r3, [pc, #264]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d028      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030b8:	493a      	ldr	r1, [pc, #232]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80030ba:	4b3a      	ldr	r3, [pc, #232]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030d6:	d106      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d8:	4a32      	ldr	r2, [pc, #200]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80030da:	4b32      	ldr	r3, [pc, #200]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030e2:	60d3      	str	r3, [r2, #12]
 80030e4:	e011      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x446>
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030ee:	d10c      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x446>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3304      	adds	r3, #4
 80030f4:	2101      	movs	r1, #1
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f8f0 	bl	80032dc <RCCEx_PLLSAI1_Config>
 80030fc:	4603      	mov	r3, r0
 80030fe:	74fb      	strb	r3, [r7, #19]
      
        if(ret != HAL_OK)
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x446>
        {
          /* set overall return value */
          status = ret;
 8003106:	7cfb      	ldrb	r3, [r7, #19]
 8003108:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d028      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003116:	4923      	ldr	r1, [pc, #140]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003118:	4b22      	ldr	r3, [pc, #136]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800311a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003134:	d106      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003136:	4a1b      	ldr	r2, [pc, #108]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003138:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003140:	60d3      	str	r3, [r2, #12]
 8003142:	e011      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    }
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003148:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800314c:	d10c      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3304      	adds	r3, #4
 8003152:	2101      	movs	r1, #1
 8003154:	4618      	mov	r0, r3
 8003156:	f000 f8c1 	bl	80032dc <RCCEx_PLLSAI1_Config>
 800315a:	4603      	mov	r3, r0
 800315c:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 800315e:	7cfb      	ldrb	r3, [r7, #19]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* set overall return value */
        status = ret;
 8003164:	7cfb      	ldrb	r3, [r7, #19]
 8003166:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d02b      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003174:	490b      	ldr	r1, [pc, #44]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003192:	d109      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003194:	4a03      	ldr	r2, [pc, #12]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003196:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800319e:	60d3      	str	r3, [r2, #12]
 80031a0:	e014      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x508>
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031b0:	d10c      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3304      	adds	r3, #4
 80031b6:	2101      	movs	r1, #1
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 f88f 	bl	80032dc <RCCEx_PLLSAI1_Config>
 80031be:	4603      	mov	r3, r0
 80031c0:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 80031c2:	7cfb      	ldrb	r3, [r7, #19]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x508>
      {
        /* set overall return value */
        status = ret;
 80031c8:	7cfb      	ldrb	r3, [r7, #19]
 80031ca:	74bb      	strb	r3, [r7, #18]
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d02f      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x574>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031d8:	492b      	ldr	r1, [pc, #172]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80031da:	4b2b      	ldr	r3, [pc, #172]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031f6:	d10d      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3304      	adds	r3, #4
 80031fc:	2102      	movs	r1, #2
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 f86c 	bl	80032dc <RCCEx_PLLSAI1_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003208:	7cfb      	ldrb	r3, [r7, #19]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d014      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 800320e:	7cfb      	ldrb	r3, [r7, #19]
 8003210:	74bb      	strb	r3, [r7, #18]
 8003212:	e011      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x574>
      }
    }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800321c:	d10c      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3320      	adds	r3, #32
 8003222:	2102      	movs	r1, #2
 8003224:	4618      	mov	r0, r3
 8003226:	f000 f9ad 	bl	8003584 <RCCEx_PLLSAI2_Config>
 800322a:	4603      	mov	r3, r0
 800322c:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 800322e:	7cfb      	ldrb	r3, [r7, #19]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 8003234:	7cfb      	ldrb	r3, [r7, #19]
 8003236:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003244:	4910      	ldr	r1, [pc, #64]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003246:	4b10      	ldr	r3, [pc, #64]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003266:	4908      	ldr	r1, [pc, #32]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003268:	4b07      	ldr	r3, [pc, #28]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* DFSDM1_Filter0 */

  return status;
 800327e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40021000 	.word	0x40021000

0800328c <HAL_RCCEx_DisableLSECSS>:
  * @brief  Disable the LSE Clock Security System.
  * @note   LSE Clock Security System can only be disabled after a LSE failure detection.
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8003290:	4a09      	ldr	r2, [pc, #36]	; (80032b8 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8003292:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003298:	f023 0320 	bic.w	r3, r3, #32
 800329c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  
  /* Disable LSE CSS IT if any */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 80032a0:	4a05      	ldr	r2, [pc, #20]	; (80032b8 <HAL_RCCEx_DisableLSECSS+0x2c>)
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <HAL_RCCEx_DisableLSECSS+0x2c>)
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032aa:	6193      	str	r3, [r2, #24]
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000

080032bc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80032c0:	4a05      	ldr	r2, [pc, #20]	; (80032d8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80032c2:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f043 0304 	orr.w	r3, r3, #4
 80032ca:	6013      	str	r3, [r2, #0]
}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40021000 	.word	0x40021000

080032dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b095      	sub	sp, #84	; 0x54
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032f0:	4ba3      	ldr	r3, [pc, #652]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d023      	beq.n	8003344 <RCCEx_PLLSAI1_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032fc:	4ba0      	ldr	r3, [pc, #640]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0203 	and.w	r2, r3, #3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d117      	bne.n	800333c <RCCEx_PLLSAI1_Config+0x60>
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
       || 
 8003310:	2b00      	cmp	r3, #0
 8003312:	d013      	beq.n	800333c <RCCEx_PLLSAI1_Config+0x60>
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 8003314:	4b9a      	ldr	r3, [pc, #616]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800331c:	2370      	movs	r3, #112	; 0x70
 800331e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	fa22 f303 	lsr.w	r3, r2, r3
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
       || 
 8003338:	429a      	cmp	r2, r3
 800333a:	d054      	beq.n	80033e6 <RCCEx_PLLSAI1_Config+0x10a>
      )
    {
      status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003342:	e050      	b.n	80033e6 <RCCEx_PLLSAI1_Config+0x10a>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d00d      	beq.n	8003368 <RCCEx_PLLSAI1_Config+0x8c>
 800334c:	2b03      	cmp	r3, #3
 800334e:	d015      	beq.n	800337c <RCCEx_PLLSAI1_Config+0xa0>
 8003350:	2b01      	cmp	r3, #1
 8003352:	d123      	bne.n	800339c <RCCEx_PLLSAI1_Config+0xc0>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003354:	4b8a      	ldr	r3, [pc, #552]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d121      	bne.n	80033a4 <RCCEx_PLLSAI1_Config+0xc8>
      {
        status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8003366:	e01d      	b.n	80033a4 <RCCEx_PLLSAI1_Config+0xc8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003368:	4b85      	ldr	r3, [pc, #532]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003370:	2b00      	cmp	r3, #0
 8003372:	d119      	bne.n	80033a8 <RCCEx_PLLSAI1_Config+0xcc>
      {
        status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 800337a:	e015      	b.n	80033a8 <RCCEx_PLLSAI1_Config+0xcc>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800337c:	4b80      	ldr	r3, [pc, #512]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d111      	bne.n	80033ac <RCCEx_PLLSAI1_Config+0xd0>
 8003388:	4b7d      	ldr	r3, [pc, #500]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10b      	bne.n	80033ac <RCCEx_PLLSAI1_Config+0xd0>
      {
        status = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 800339a:	e007      	b.n	80033ac <RCCEx_PLLSAI1_Config+0xd0>
    default:
      status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      break;
 80033a2:	e004      	b.n	80033ae <RCCEx_PLLSAI1_Config+0xd2>
      break;
 80033a4:	bf00      	nop
 80033a6:	e002      	b.n	80033ae <RCCEx_PLLSAI1_Config+0xd2>
      break;
 80033a8:	bf00      	nop
 80033aa:	e000      	b.n	80033ae <RCCEx_PLLSAI1_Config+0xd2>
      break;
 80033ac:	bf00      	nop
    }
    
    if(status == HAL_OK)
 80033ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d117      	bne.n	80033e6 <RCCEx_PLLSAI1_Config+0x10a>
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 80033b6:	4c72      	ldr	r4, [pc, #456]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 80033b8:	4b71      	ldr	r3, [pc, #452]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6819      	ldr	r1, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	1e58      	subs	r0, r3, #1
 80033ca:	2370      	movs	r3, #112	; 0x70
 80033cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d0:	fa93 f3a3 	rbit	r3, r3
 80033d4:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80033d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d8:	fab3 f383 	clz	r3, r3
 80033dc:	fa00 f303 	lsl.w	r3, r0, r3
 80033e0:	430b      	orrs	r3, r1
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60e3      	str	r3, [r4, #12]
    }
  }
  
  if(status == HAL_OK)
 80033e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f040 80c2 	bne.w	8003574 <RCCEx_PLLSAI1_Config+0x298>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033f0:	4a63      	ldr	r2, [pc, #396]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 80033f2:	4b63      	ldr	r3, [pc, #396]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033fc:	f7fe fab6 	bl	800196c <HAL_GetTick>
 8003400:	64b8      	str	r0, [r7, #72]	; 0x48

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8003402:	e00a      	b.n	800341a <RCCEx_PLLSAI1_Config+0x13e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003404:	f7fe fab2 	bl	800196c <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d903      	bls.n	800341a <RCCEx_PLLSAI1_Config+0x13e>
      {
        status = HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        break;
 8003418:	e005      	b.n	8003426 <RCCEx_PLLSAI1_Config+0x14a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800341a:	4b59      	ldr	r3, [pc, #356]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ee      	bne.n	8003404 <RCCEx_PLLSAI1_Config+0x128>
      }
    }

    if(status == HAL_OK)    
 8003426:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800342a:	2b00      	cmp	r3, #0
 800342c:	f040 80a2 	bne.w	8003574 <RCCEx_PLLSAI1_Config+0x298>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d126      	bne.n	8003484 <RCCEx_PLLSAI1_Config+0x1a8>
        MODIFY_REG(RCC->PLLSAI1CFGR, 
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (PllSai1->PLLSAI1P << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1PDIV)));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8003436:	4c52      	ldr	r4, [pc, #328]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003438:	4b51      	ldr	r3, [pc, #324]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6891      	ldr	r1, [r2, #8]
 8003448:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800344c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003450:	fa92 f2a2 	rbit	r2, r2
 8003454:	62ba      	str	r2, [r7, #40]	; 0x28
  return(result);
 8003456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003458:	fab2 f282 	clz	r2, r2
 800345c:	4091      	lsls	r1, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68d2      	ldr	r2, [r2, #12]
 8003462:	0910      	lsrs	r0, r2, #4
 8003464:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003468:	637a      	str	r2, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800346c:	fa92 f2a2 	rbit	r2, r2
 8003470:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 8003472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003474:	fab2 f282 	clz	r2, r2
 8003478:	fa00 f202 	lsl.w	r2, r0, r2
 800347c:	430a      	orrs	r2, r1
 800347e:	4313      	orrs	r3, r2
 8003480:	6123      	str	r3, [r4, #16]
 8003482:	e051      	b.n	8003528 <RCCEx_PLLSAI1_Config+0x24c>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d127      	bne.n	80034da <RCCEx_PLLSAI1_Config+0x1fe>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 800348a:	4c3d      	ldr	r4, [pc, #244]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 800348c:	4b3c      	ldr	r3, [pc, #240]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003494:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6891      	ldr	r1, [r2, #8]
 800349c:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80034a0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	fa92 f2a2 	rbit	r2, r2
 80034a8:	61ba      	str	r2, [r7, #24]
  return(result);
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	fab2 f282 	clz	r2, r2
 80034b0:	4091      	lsls	r1, r2
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6912      	ldr	r2, [r2, #16]
 80034b6:	0852      	lsrs	r2, r2, #1
 80034b8:	1e50      	subs	r0, r2, #1
 80034ba:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80034be:	627a      	str	r2, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c2:	fa92 f2a2 	rbit	r2, r2
 80034c6:	623a      	str	r2, [r7, #32]
  return(result);
 80034c8:	6a3a      	ldr	r2, [r7, #32]
 80034ca:	fab2 f282 	clz	r2, r2
 80034ce:	fa00 f202 	lsl.w	r2, r0, r2
 80034d2:	430a      	orrs	r2, r1
 80034d4:	4313      	orrs	r3, r2
 80034d6:	6123      	str	r3, [r4, #16]
 80034d8:	e026      	b.n	8003528 <RCCEx_PLLSAI1_Config+0x24c>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80034da:	4c29      	ldr	r4, [pc, #164]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 80034dc:	4b28      	ldr	r3, [pc, #160]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6891      	ldr	r1, [r2, #8]
 80034ec:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80034f0:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	fa92 f2a2 	rbit	r2, r2
 80034f8:	60ba      	str	r2, [r7, #8]
  return(result);
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	fab2 f282 	clz	r2, r2
 8003500:	4091      	lsls	r1, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6952      	ldr	r2, [r2, #20]
 8003506:	0852      	lsrs	r2, r2, #1
 8003508:	1e50      	subs	r0, r2, #1
 800350a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800350e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	fa92 f2a2 	rbit	r2, r2
 8003516:	613a      	str	r2, [r7, #16]
  return(result);
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	fab2 f282 	clz	r2, r2
 800351e:	fa00 f202 	lsl.w	r2, r0, r2
 8003522:	430a      	orrs	r2, r1
 8003524:	4313      	orrs	r3, r2
 8003526:	6123      	str	r3, [r4, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003528:	4a15      	ldr	r2, [pc, #84]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 800352a:	4b15      	ldr	r3, [pc, #84]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003532:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003534:	f7fe fa1a 	bl	800196c <HAL_GetTick>
 8003538:	64b8      	str	r0, [r7, #72]	; 0x48

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800353a:	e00a      	b.n	8003552 <RCCEx_PLLSAI1_Config+0x276>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800353c:	f7fe fa16 	bl	800196c <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d903      	bls.n	8003552 <RCCEx_PLLSAI1_Config+0x276>
        {
          status = HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8003550:	e005      	b.n	800355e <RCCEx_PLLSAI1_Config+0x282>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8003552:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0ee      	beq.n	800353c <RCCEx_PLLSAI1_Config+0x260>
        }
      }

      if(status == HAL_OK)    
 800355e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <RCCEx_PLLSAI1_Config+0x298>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003566:	4906      	ldr	r1, [pc, #24]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <RCCEx_PLLSAI1_Config+0x2a4>)
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	4313      	orrs	r3, r2
 8003572:	610b      	str	r3, [r1, #16]
      }
    }
  }
  
  return status;
 8003574:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003578:	4618      	mov	r0, r3
 800357a:	3754      	adds	r7, #84	; 0x54
 800357c:	46bd      	mov	sp, r7
 800357e:	bd90      	pop	{r4, r7, pc}
 8003580:	40021000 	.word	0x40021000

08003584 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003584:	b590      	push	{r4, r7, lr}
 8003586:	b091      	sub	sp, #68	; 0x44
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
  
  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003598:	4b8d      	ldr	r3, [pc, #564]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d023      	beq.n	80035ec <RCCEx_PLLSAI2_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035a4:	4b8a      	ldr	r3, [pc, #552]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0203 	and.w	r2, r3, #3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d117      	bne.n	80035e4 <RCCEx_PLLSAI2_Config+0x60>
       || 
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
       || 
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d013      	beq.n	80035e4 <RCCEx_PLLSAI2_Config+0x60>
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai2->PLLSAI2M)
 80035bc:	4b84      	ldr	r3, [pc, #528]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035c4:	2370      	movs	r3, #112	; 0x70
 80035c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d2:	fab3 f383 	clz	r3, r3
 80035d6:	fa22 f303 	lsr.w	r3, r2, r3
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
       || 
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d054      	beq.n	800368e <RCCEx_PLLSAI2_Config+0x10a>
      )
    {
      status = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80035ea:	e050      	b.n	800368e <RCCEx_PLLSAI2_Config+0x10a>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d00d      	beq.n	8003610 <RCCEx_PLLSAI2_Config+0x8c>
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d015      	beq.n	8003624 <RCCEx_PLLSAI2_Config+0xa0>
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d123      	bne.n	8003644 <RCCEx_PLLSAI2_Config+0xc0>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035fc:	4b74      	ldr	r3, [pc, #464]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d121      	bne.n	800364c <RCCEx_PLLSAI2_Config+0xc8>
      {
        status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 800360e:	e01d      	b.n	800364c <RCCEx_PLLSAI2_Config+0xc8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003610:	4b6f      	ldr	r3, [pc, #444]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003618:	2b00      	cmp	r3, #0
 800361a:	d119      	bne.n	8003650 <RCCEx_PLLSAI2_Config+0xcc>
      {
        status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 8003622:	e015      	b.n	8003650 <RCCEx_PLLSAI2_Config+0xcc>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003624:	4b6a      	ldr	r3, [pc, #424]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d111      	bne.n	8003654 <RCCEx_PLLSAI2_Config+0xd0>
 8003630:	4b67      	ldr	r3, [pc, #412]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10b      	bne.n	8003654 <RCCEx_PLLSAI2_Config+0xd0>
      {
        status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 8003642:	e007      	b.n	8003654 <RCCEx_PLLSAI2_Config+0xd0>
    default:
      status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 800364a:	e004      	b.n	8003656 <RCCEx_PLLSAI2_Config+0xd2>
      break;
 800364c:	bf00      	nop
 800364e:	e002      	b.n	8003656 <RCCEx_PLLSAI2_Config+0xd2>
      break;
 8003650:	bf00      	nop
 8003652:	e000      	b.n	8003656 <RCCEx_PLLSAI2_Config+0xd2>
      break;
 8003654:	bf00      	nop
    }
    
    if(status == HAL_OK)
 8003656:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800365a:	2b00      	cmp	r3, #0
 800365c:	d117      	bne.n	800368e <RCCEx_PLLSAI2_Config+0x10a>
    {
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 800365e:	4c5c      	ldr	r4, [pc, #368]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 8003660:	4b5b      	ldr	r3, [pc, #364]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6819      	ldr	r1, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	1e58      	subs	r0, r3, #1
 8003672:	2370      	movs	r3, #112	; 0x70
 8003674:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003678:	fa93 f3a3 	rbit	r3, r3
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003680:	fab3 f383 	clz	r3, r3
 8003684:	fa00 f303 	lsl.w	r3, r0, r3
 8003688:	430b      	orrs	r3, r1
 800368a:	4313      	orrs	r3, r2
 800368c:	60e3      	str	r3, [r4, #12]
    }
  }
  
  if(status == HAL_OK)
 800368e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003692:	2b00      	cmp	r3, #0
 8003694:	f040 8096 	bne.w	80037c4 <RCCEx_PLLSAI2_Config+0x240>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003698:	4a4d      	ldr	r2, [pc, #308]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 800369a:	4b4d      	ldr	r3, [pc, #308]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a4:	f7fe f962 	bl	800196c <HAL_GetTick>
 80036a8:	63b8      	str	r0, [r7, #56]	; 0x38

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 80036aa:	e00a      	b.n	80036c2 <RCCEx_PLLSAI2_Config+0x13e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036ac:	f7fe f95e 	bl	800196c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d903      	bls.n	80036c2 <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        break;
 80036c0:	e005      	b.n	80036ce <RCCEx_PLLSAI2_Config+0x14a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 80036c2:	4b43      	ldr	r3, [pc, #268]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1ee      	bne.n	80036ac <RCCEx_PLLSAI2_Config+0x128>
      }
    }

    if(status == HAL_OK)    
 80036ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d176      	bne.n	80037c4 <RCCEx_PLLSAI2_Config+0x240>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d126      	bne.n	800372a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR, 
 80036dc:	4c3c      	ldr	r4, [pc, #240]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 80036de:	4b3c      	ldr	r3, [pc, #240]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6891      	ldr	r1, [r2, #8]
 80036ee:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80036f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	fa92 f2a2 	rbit	r2, r2
 80036fa:	61ba      	str	r2, [r7, #24]
  return(result);
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	fab2 f282 	clz	r2, r2
 8003702:	4091      	lsls	r1, r2
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	68d2      	ldr	r2, [r2, #12]
 8003708:	0910      	lsrs	r0, r2, #4
 800370a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800370e:	627a      	str	r2, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003712:	fa92 f2a2 	rbit	r2, r2
 8003716:	623a      	str	r2, [r7, #32]
  return(result);
 8003718:	6a3a      	ldr	r2, [r7, #32]
 800371a:	fab2 f282 	clz	r2, r2
 800371e:	fa00 f202 	lsl.w	r2, r0, r2
 8003722:	430a      	orrs	r2, r1
 8003724:	4313      	orrs	r3, r2
 8003726:	6163      	str	r3, [r4, #20]
 8003728:	e026      	b.n	8003778 <RCCEx_PLLSAI2_Config+0x1f4>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR, 
 800372a:	4c29      	ldr	r4, [pc, #164]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 800372c:	4b28      	ldr	r3, [pc, #160]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003734:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6891      	ldr	r1, [r2, #8]
 800373c:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003740:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	fa92 f2a2 	rbit	r2, r2
 8003748:	60ba      	str	r2, [r7, #8]
  return(result);
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	fab2 f282 	clz	r2, r2
 8003750:	4091      	lsls	r1, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6912      	ldr	r2, [r2, #16]
 8003756:	0852      	lsrs	r2, r2, #1
 8003758:	1e50      	subs	r0, r2, #1
 800375a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800375e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	fa92 f2a2 	rbit	r2, r2
 8003766:	613a      	str	r2, [r7, #16]
  return(result);
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	fab2 f282 	clz	r2, r2
 800376e:	fa00 f202 	lsl.w	r2, r0, r2
 8003772:	430a      	orrs	r2, r1
 8003774:	4313      	orrs	r3, r2
 8003776:	6163      	str	r3, [r4, #20]
                   (PllSai2->PLLSAI2N << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2N)) | 
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2R)));
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003778:	4a15      	ldr	r2, [pc, #84]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 800377a:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003782:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7fe f8f2 	bl	800196c <HAL_GetTick>
 8003788:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 800378a:	e00a      	b.n	80037a2 <RCCEx_PLLSAI2_Config+0x21e>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800378c:	f7fe f8ee 	bl	800196c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d903      	bls.n	80037a2 <RCCEx_PLLSAI2_Config+0x21e>
        {
          status = HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
          break;
 80037a0:	e005      	b.n	80037ae <RCCEx_PLLSAI2_Config+0x22a>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 80037a2:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0ee      	beq.n	800378c <RCCEx_PLLSAI2_Config+0x208>
        }
      }

      if(status == HAL_OK)    
 80037ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <RCCEx_PLLSAI2_Config+0x240>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037b6:	4906      	ldr	r1, [pc, #24]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <RCCEx_PLLSAI2_Config+0x24c>)
 80037ba:	695a      	ldr	r2, [r3, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	614b      	str	r3, [r1, #20]
      }
    }
  }
  
  return status;
 80037c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3744      	adds	r7, #68	; 0x44
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd90      	pop	{r4, r7, pc}
 80037d0:	40021000 	.word	0x40021000

080037d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e07a      	b.n	80038dc <HAL_SPI_Init+0x108>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d106      	bne.n	8003806 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7fd fdaf 	bl	8001364 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2202      	movs	r2, #2
 800380a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6812      	ldr	r2, [r2, #0]
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003826:	d902      	bls.n	800382e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e002      	b.n	8003834 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800382e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003832:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800383c:	d007      	beq.n	800384e <HAL_SPI_Init+0x7a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003846:	d002      	beq.n	800384e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10b      	bne.n	800386e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800385e:	d903      	bls.n	8003868 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
 8003866:	e002      	b.n	800386e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6851      	ldr	r1, [r2, #4]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6892      	ldr	r2, [r2, #8]
 800387a:	4311      	orrs	r1, r2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6912      	ldr	r2, [r2, #16]
 8003880:	4311      	orrs	r1, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6952      	ldr	r2, [r2, #20]
 8003886:	4311      	orrs	r1, r2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6992      	ldr	r2, [r2, #24]
 800388c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003890:	4311      	orrs	r1, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	69d2      	ldr	r2, [r2, #28]
 8003896:	4311      	orrs	r1, r2
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6a12      	ldr	r2, [r2, #32]
 800389c:	4311      	orrs	r1, r2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80038a2:	430a      	orrs	r2, r1
 80038a4:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6992      	ldr	r2, [r2, #24]
 80038ae:	0c12      	lsrs	r2, r2, #16
 80038b0:	f002 0104 	and.w	r1, r2, #4
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038b8:	4311      	orrs	r1, r2
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038be:	4311      	orrs	r1, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	68d2      	ldr	r2, [r2, #12]
 80038c4:	4311      	orrs	r1, r2
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08a      	sub	sp, #40	; 0x28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	2300      	movs	r3, #0
 80038f8:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80038fe:	2301      	movs	r3, #1
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_SPI_TransmitReceive+0x32>
 8003912:	2302      	movs	r3, #2
 8003914:	e1e1      	b.n	8003cda <HAL_SPI_TransmitReceive+0x3f6>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800391e:	f7fe f825 	bl	800196c <HAL_GetTick>
 8003922:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800392a:	b2db      	uxtb	r3, r3
 800392c:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d00e      	beq.n	8003958 <HAL_SPI_TransmitReceive+0x74>
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003940:	d106      	bne.n	8003950 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d102      	bne.n	8003950 <HAL_SPI_TransmitReceive+0x6c>
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d003      	beq.n	8003958 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8003950:	2302      	movs	r3, #2
 8003952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003956:	e1b6      	b.n	8003cc6 <HAL_SPI_TransmitReceive+0x3e2>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d005      	beq.n	800396a <HAL_SPI_TransmitReceive+0x86>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <HAL_SPI_TransmitReceive+0x86>
 8003964:	887b      	ldrh	r3, [r7, #2]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d103      	bne.n	8003972 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003970:	e1a9      	b.n	8003cc6 <HAL_SPI_TransmitReceive+0x3e2>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b04      	cmp	r3, #4
 800397c:	d003      	beq.n	8003986 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2205      	movs	r2, #5
 8003982:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	887a      	ldrh	r2, [r7, #2]
 8003996:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	887a      	ldrh	r2, [r7, #2]
 800399e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	887a      	ldrh	r2, [r7, #2]
 80039ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	887a      	ldrh	r2, [r7, #2]
 80039b2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039c8:	d805      	bhi.n	80039d6 <HAL_SPI_TransmitReceive+0xf2>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d908      	bls.n	80039e8 <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	6812      	ldr	r2, [r2, #0]
 80039de:	6852      	ldr	r2, [r2, #4]
 80039e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039e4:	605a      	str	r2, [r3, #4]
 80039e6:	e007      	b.n	80039f8 <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	6852      	ldr	r2, [r2, #4]
 80039f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039f6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a02:	2b40      	cmp	r3, #64	; 0x40
 8003a04:	d007      	beq.n	8003a16 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a1e:	d975      	bls.n	8003b0c <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d004      	beq.n	8003a32 <HAL_SPI_TransmitReceive+0x14e>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d160      	bne.n	8003af4 <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	8812      	ldrh	r2, [r2, #0]
 8003a3a:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	3302      	adds	r3, #2
 8003a40:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a50:	e050      	b.n	8003af4 <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01c      	beq.n	8003a92 <HAL_SPI_TransmitReceive+0x1ae>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d017      	beq.n	8003a92 <HAL_SPI_TransmitReceive+0x1ae>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d110      	bne.n	8003a92 <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	8812      	ldrh	r2, [r2, #0]
 8003a78:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	3302      	adds	r3, #2
 8003a7e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d01a      	beq.n	8003ad4 <HAL_SPI_TransmitReceive+0x1f0>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d113      	bne.n	8003ad4 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3302      	adds	r3, #2
 8003abc:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ada:	d00b      	beq.n	8003af4 <HAL_SPI_TransmitReceive+0x210>
 8003adc:	f7fd ff46 	bl	800196c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	1ad2      	subs	r2, r2, r3
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d303      	bcc.n	8003af4 <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003af2:	e0e8      	b.n	8003cc6 <HAL_SPI_TransmitReceive+0x3e2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1a9      	bne.n	8003a52 <HAL_SPI_TransmitReceive+0x16e>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1a3      	bne.n	8003a52 <HAL_SPI_TransmitReceive+0x16e>
 8003b0a:	e0ca      	b.n	8003ca2 <HAL_SPI_TransmitReceive+0x3be>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_SPI_TransmitReceive+0x23c>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	f040 80b4 	bne.w	8003c88 <HAL_SPI_TransmitReceive+0x3a4>
    {
      if (hspi->TxXferCount > 1U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d90f      	bls.n	8003b4a <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	8812      	ldrh	r2, [r2, #0]
 8003b32:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	3302      	adds	r3, #2
 8003b38:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b02      	subs	r3, #2
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b48:	e09e      	b.n	8003c88 <HAL_SPI_TransmitReceive+0x3a4>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f103 020c 	add.w	r2, r3, #12
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	1c59      	adds	r1, r3, #1
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b6a:	e08d      	b.n	8003c88 <HAL_SPI_TransmitReceive+0x3a4>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d032      	beq.n	8003bd8 <HAL_SPI_TransmitReceive+0x2f4>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d02d      	beq.n	8003bd8 <HAL_SPI_TransmitReceive+0x2f4>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d126      	bne.n	8003bd8 <HAL_SPI_TransmitReceive+0x2f4>
      {
        if (hspi->TxXferCount > 1U)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d90f      	bls.n	8003bb4 <HAL_SPI_TransmitReceive+0x2d0>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	8812      	ldrh	r2, [r2, #0]
 8003b9c:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b02      	subs	r3, #2
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bb2:	e00f      	b.n	8003bd4 <HAL_SPI_TransmitReceive+0x2f0>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f103 020c 	add.w	r2, r3, #12
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	1c59      	adds	r1, r3, #1
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d041      	beq.n	8003c68 <HAL_SPI_TransmitReceive+0x384>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d13a      	bne.n	8003c68 <HAL_SPI_TransmitReceive+0x384>
      {
        if (hspi->RxXferCount > 1U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d920      	bls.n	8003c40 <HAL_SPI_TransmitReceive+0x35c>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3302      	adds	r3, #2
 8003c0e:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b02      	subs	r3, #2
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d81a      	bhi.n	8003c64 <HAL_SPI_TransmitReceive+0x380>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	6812      	ldr	r2, [r2, #0]
 8003c36:	6852      	ldr	r2, [r2, #4]
 8003c38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c3c:	605a      	str	r2, [r3, #4]
 8003c3e:	e011      	b.n	8003c64 <HAL_SPI_TransmitReceive+0x380>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	607a      	str	r2, [r7, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	6812      	ldr	r2, [r2, #0]
 8003c4a:	320c      	adds	r2, #12
 8003c4c:	7812      	ldrb	r2, [r2, #0]
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c64:	2301      	movs	r3, #1
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c6e:	d00b      	beq.n	8003c88 <HAL_SPI_TransmitReceive+0x3a4>
 8003c70:	f7fd fe7c 	bl	800196c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	1ad2      	subs	r2, r2, r3
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d303      	bcc.n	8003c88 <HAL_SPI_TransmitReceive+0x3a4>
      {
        errorcode = HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003c86:	e01e      	b.n	8003cc6 <HAL_SPI_TransmitReceive+0x3e2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f47f af6c 	bne.w	8003b6c <HAL_SPI_TransmitReceive+0x288>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f47f af65 	bne.w	8003b6c <HAL_SPI_TransmitReceive+0x288>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f8f3 	bl	8003e92 <SPI_EndRxTxTransaction>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <HAL_SPI_TransmitReceive+0x3d4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003cd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3728      	adds	r7, #40	; 0x28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
 8003cee:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cf0:	e04c      	b.n	8003d8c <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cf8:	d048      	beq.n	8003d8c <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d007      	beq.n	8003d10 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003d00:	f7fd fe34 	bl	800196c <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	1ad2      	subs	r2, r2, r3
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d33d      	bcc.n	8003d8c <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	6812      	ldr	r2, [r2, #0]
 8003d18:	6852      	ldr	r2, [r2, #4]
 8003d1a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d28:	d111      	bne.n	8003d4e <SPI_WaitFlagStateUntilTimeout+0x6c>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d32:	d004      	beq.n	8003d3e <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3c:	d107      	bne.n	8003d4e <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	6812      	ldr	r2, [r2, #0]
 8003d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d56:	d10f      	bne.n	8003d78 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	6812      	ldr	r2, [r2, #0]
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e00e      	b.n	8003daa <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	401a      	ands	r2, r3
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d101      	bne.n	8003da0 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	e000      	b.n	8003da2 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8003da0:	2200      	movs	r2, #0
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d1a4      	bne.n	8003cf2 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b086      	sub	sp, #24
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
 8003dbe:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8003dc0:	e05a      	b.n	8003e78 <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003dc8:	d109      	bne.n	8003dde <SPI_WaitFifoStateUntilTimeout+0x2c>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d106      	bne.n	8003dde <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003de4:	d048      	beq.n	8003e78 <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <SPI_WaitFifoStateUntilTimeout+0x4a>
 8003dec:	f7fd fdbe 	bl	800196c <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	1ad2      	subs	r2, r2, r3
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d33d      	bcc.n	8003e78 <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	6812      	ldr	r2, [r2, #0]
 8003e04:	6852      	ldr	r2, [r2, #4]
 8003e06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e14:	d111      	bne.n	8003e3a <SPI_WaitFifoStateUntilTimeout+0x88>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1e:	d004      	beq.n	8003e2a <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e28:	d107      	bne.n	8003e3a <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e42:	d10f      	bne.n	8003e64 <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	6812      	ldr	r2, [r2, #0]
 8003e5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e008      	b.n	8003e8a <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	401a      	ands	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d19c      	bne.n	8003dc2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <SPI_EndRxTxTransaction>:
  * @param  Timeout: Timeout duration
  * @param  Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b086      	sub	sp, #24
 8003e96:	af02      	add	r7, sp, #8
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f7ff ff81 	bl	8003db2 <SPI_WaitFifoStateUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d007      	beq.n	8003ec6 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eba:	f043 0220 	orr.w	r2, r3, #32
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e027      	b.n	8003f16 <SPI_EndRxTxTransaction+0x84>
  }
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2180      	movs	r1, #128	; 0x80
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f7ff ff06 	bl	8003ce2 <SPI_WaitFlagStateUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d007      	beq.n	8003eec <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee0:	f043 0220 	orr.w	r2, r3, #32
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e014      	b.n	8003f16 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f7ff ff5a 	bl	8003db2 <SPI_WaitFifoStateUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f08:	f043 0220 	orr.w	r2, r3, #32
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e000      	b.n	8003f16 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e01d      	b.n	8003f6c <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d106      	bne.n	8003f4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fda3 	bl	8004a90 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3304      	adds	r3, #4
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	f000 f955 	bl	800420c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	68d2      	ldr	r2, [r2, #12]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d122      	bne.n	8004006 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d11b      	bne.n	8004006 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f06f 0202 	mvn.w	r2, #2
 8003fd6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f8ee 	bl	80041ce <HAL_TIM_IC_CaptureCallback>
 8003ff2:	e005      	b.n	8004000 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f8e0 	bl	80041ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f8f1 	bl	80041e2 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b04      	cmp	r3, #4
 8004012:	d122      	bne.n	800405a <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b04      	cmp	r3, #4
 8004020:	d11b      	bne.n	800405a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f06f 0204 	mvn.w	r2, #4
 800402a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f8c4 	bl	80041ce <HAL_TIM_IC_CaptureCallback>
 8004046:	e005      	b.n	8004054 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f8b6 	bl	80041ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f8c7 	bl	80041e2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f003 0308 	and.w	r3, r3, #8
 8004064:	2b08      	cmp	r3, #8
 8004066:	d122      	bne.n	80040ae <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b08      	cmp	r3, #8
 8004074:	d11b      	bne.n	80040ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f06f 0208 	mvn.w	r2, #8
 800407e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2204      	movs	r2, #4
 8004084:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f89a 	bl	80041ce <HAL_TIM_IC_CaptureCallback>
 800409a:	e005      	b.n	80040a8 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f88c 	bl	80041ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f89d 	bl	80041e2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f003 0310 	and.w	r3, r3, #16
 80040b8:	2b10      	cmp	r3, #16
 80040ba:	d122      	bne.n	8004102 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f003 0310 	and.w	r3, r3, #16
 80040c6:	2b10      	cmp	r3, #16
 80040c8:	d11b      	bne.n	8004102 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f06f 0210 	mvn.w	r2, #16
 80040d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2208      	movs	r2, #8
 80040d8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f870 	bl	80041ce <HAL_TIM_IC_CaptureCallback>
 80040ee:	e005      	b.n	80040fc <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f862 	bl	80041ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f873 	bl	80041e2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b01      	cmp	r3, #1
 800410e:	d10e      	bne.n	800412e <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b01      	cmp	r3, #1
 800411c:	d107      	bne.n	800412e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f06f 0201 	mvn.w	r2, #1
 8004126:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f979 	bl	8004420 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004138:	2b80      	cmp	r3, #128	; 0x80
 800413a:	d10e      	bne.n	800415a <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004146:	2b80      	cmp	r3, #128	; 0x80
 8004148:	d107      	bne.n	800415a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004152:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f8f7 	bl	8004348 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004164:	2b40      	cmp	r3, #64	; 0x40
 8004166:	d10e      	bne.n	8004186 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004172:	2b40      	cmp	r3, #64	; 0x40
 8004174:	d107      	bne.n	8004186 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800417e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f838 	bl	80041f6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b20      	cmp	r3, #32
 8004192:	d10e      	bne.n	80041b2 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b20      	cmp	r3, #32
 80041a0:	d107      	bne.n	80041b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f06f 0220 	mvn.w	r2, #32
 80041aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f8c1 	bl	8004334 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
	...

0800420c <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a3c      	ldr	r2, [pc, #240]	; (8004314 <TIM_Base_SetConfig+0x108>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d013      	beq.n	8004250 <TIM_Base_SetConfig+0x44>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422e:	d00f      	beq.n	8004250 <TIM_Base_SetConfig+0x44>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a39      	ldr	r2, [pc, #228]	; (8004318 <TIM_Base_SetConfig+0x10c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00b      	beq.n	8004250 <TIM_Base_SetConfig+0x44>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a38      	ldr	r2, [pc, #224]	; (800431c <TIM_Base_SetConfig+0x110>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d007      	beq.n	8004250 <TIM_Base_SetConfig+0x44>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a37      	ldr	r2, [pc, #220]	; (8004320 <TIM_Base_SetConfig+0x114>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d003      	beq.n	8004250 <TIM_Base_SetConfig+0x44>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a36      	ldr	r2, [pc, #216]	; (8004324 <TIM_Base_SetConfig+0x118>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d108      	bne.n	8004262 <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a2b      	ldr	r2, [pc, #172]	; (8004314 <TIM_Base_SetConfig+0x108>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d01f      	beq.n	80042aa <TIM_Base_SetConfig+0x9e>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004270:	d01b      	beq.n	80042aa <TIM_Base_SetConfig+0x9e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a28      	ldr	r2, [pc, #160]	; (8004318 <TIM_Base_SetConfig+0x10c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d017      	beq.n	80042aa <TIM_Base_SetConfig+0x9e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a27      	ldr	r2, [pc, #156]	; (800431c <TIM_Base_SetConfig+0x110>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d013      	beq.n	80042aa <TIM_Base_SetConfig+0x9e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a26      	ldr	r2, [pc, #152]	; (8004320 <TIM_Base_SetConfig+0x114>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00f      	beq.n	80042aa <TIM_Base_SetConfig+0x9e>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a25      	ldr	r2, [pc, #148]	; (8004324 <TIM_Base_SetConfig+0x118>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00b      	beq.n	80042aa <TIM_Base_SetConfig+0x9e>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a24      	ldr	r2, [pc, #144]	; (8004328 <TIM_Base_SetConfig+0x11c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d007      	beq.n	80042aa <TIM_Base_SetConfig+0x9e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a23      	ldr	r2, [pc, #140]	; (800432c <TIM_Base_SetConfig+0x120>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d003      	beq.n	80042aa <TIM_Base_SetConfig+0x9e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a22      	ldr	r2, [pc, #136]	; (8004330 <TIM_Base_SetConfig+0x124>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d108      	bne.n	80042bc <TIM_Base_SetConfig+0xb0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a0f      	ldr	r2, [pc, #60]	; (8004314 <TIM_Base_SetConfig+0x108>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00f      	beq.n	80042fa <TIM_Base_SetConfig+0xee>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a11      	ldr	r2, [pc, #68]	; (8004324 <TIM_Base_SetConfig+0x118>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00b      	beq.n	80042fa <TIM_Base_SetConfig+0xee>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a10      	ldr	r2, [pc, #64]	; (8004328 <TIM_Base_SetConfig+0x11c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d007      	beq.n	80042fa <TIM_Base_SetConfig+0xee>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a0f      	ldr	r2, [pc, #60]	; (800432c <TIM_Base_SetConfig+0x120>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d003      	beq.n	80042fa <TIM_Base_SetConfig+0xee>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a0e      	ldr	r2, [pc, #56]	; (8004330 <TIM_Base_SetConfig+0x124>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d103      	bne.n	8004302 <TIM_Base_SetConfig+0xf6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	615a      	str	r2, [r3, #20]
}
 8004308:	bf00      	nop
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40000400 	.word	0x40000400
 800431c:	40000800 	.word	0x40000800
 8004320:	40000c00 	.word	0x40000c00
 8004324:	40013400 	.word	0x40013400
 8004328:	40014000 	.word	0x40014000
 800432c:	40014400 	.word	0x40014400
 8004330:	40014800 	.word	0x40014800

08004334 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08c      	sub	sp, #48	; 0x30
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  
  /* Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800436c:	2200      	movs	r2, #0
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	2036      	movs	r0, #54	; 0x36
 8004372:	f7fd fbf1 	bl	8001b58 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004376:	2036      	movs	r0, #54	; 0x36
 8004378:	f7fd fc0a 	bl	8001b90 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800437c:	4a24      	ldr	r2, [pc, #144]	; (8004410 <HAL_InitTick+0xb4>)
 800437e:	4b24      	ldr	r3, [pc, #144]	; (8004410 <HAL_InitTick+0xb4>)
 8004380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004382:	f043 0310 	orr.w	r3, r3, #16
 8004386:	6593      	str	r3, [r2, #88]	; 0x58
 8004388:	4b21      	ldr	r3, [pc, #132]	; (8004410 <HAL_InitTick+0xb4>)
 800438a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004394:	f107 020c 	add.w	r2, r7, #12
 8004398:	f107 0310 	add.w	r3, r7, #16
 800439c:	4611      	mov	r1, r2
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fe fbfc 	bl	8002b9c <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d103      	bne.n	80043b6 <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80043ae:	f7fe fbd3 	bl	8002b58 <HAL_RCC_GetPCLK1Freq>
 80043b2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80043b4:	e004      	b.n	80043c0 <HAL_InitTick+0x64>
  }
  else
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80043b6:	f7fe fbcf 	bl	8002b58 <HAL_RCC_GetPCLK1Freq>
 80043ba:	4603      	mov	r3, r0
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	4a14      	ldr	r2, [pc, #80]	; (8004414 <HAL_InitTick+0xb8>)
 80043c4:	fba2 2303 	umull	r2, r3, r2, r3
 80043c8:	0c9b      	lsrs	r3, r3, #18
 80043ca:	3b01      	subs	r3, #1
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 80043ce:	4b12      	ldr	r3, [pc, #72]	; (8004418 <HAL_InitTick+0xbc>)
 80043d0:	4a12      	ldr	r2, [pc, #72]	; (800441c <HAL_InitTick+0xc0>)
 80043d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80043d4:	4b10      	ldr	r3, [pc, #64]	; (8004418 <HAL_InitTick+0xbc>)
 80043d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043da:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 80043dc:	4a0e      	ldr	r2, [pc, #56]	; (8004418 <HAL_InitTick+0xbc>)
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 80043e2:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <HAL_InitTick+0xbc>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <HAL_InitTick+0xbc>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80043ee:	480a      	ldr	r0, [pc, #40]	; (8004418 <HAL_InitTick+0xbc>)
 80043f0:	f7ff fd95 	bl	8003f1e <HAL_TIM_Base_Init>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d104      	bne.n	8004404 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 80043fa:	4807      	ldr	r0, [pc, #28]	; (8004418 <HAL_InitTick+0xbc>)
 80043fc:	f7ff fdba 	bl	8003f74 <HAL_TIM_Base_Start_IT>
 8004400:	4603      	mov	r3, r0
 8004402:	e000      	b.n	8004406 <HAL_InitTick+0xaa>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
}
 8004406:	4618      	mov	r0, r3
 8004408:	3730      	adds	r7, #48	; 0x30
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40021000 	.word	0x40021000
 8004414:	431bde83 	.word	0x431bde83
 8004418:	20000468 	.word	0x20000468
 800441c:	40001000 	.word	0x40001000

08004420 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 8004428:	f7fd fa92 	bl	8001950 <HAL_IncTick>
}
 800442c:	bf00      	nop
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8004438:	4802      	ldr	r0, [pc, #8]	; (8004444 <TIM6_DAC_IRQHandler+0x10>)
 800443a:	f7ff fdb6 	bl	8003faa <HAL_TIM_IRQHandler>
}
 800443e:	bf00      	nop
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20000468 	.word	0x20000468

08004448 <ble_stack_init>:
 *
 *  @param
 *  @return
 */
static void ble_stack_init(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	; 0x28
 800444c:	af04      	add	r7, sp, #16
	const char BoardName[] = { "LilBee" };
 800444e:	4a2b      	ldr	r2, [pc, #172]	; (80044fc <ble_stack_init+0xb4>)
 8004450:	f107 0310 	add.w	r3, r7, #16
 8004454:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004458:	6018      	str	r0, [r3, #0]
 800445a:	3304      	adds	r3, #4
 800445c:	8019      	strh	r1, [r3, #0]
 800445e:	3302      	adds	r3, #2
 8004460:	0c0a      	lsrs	r2, r1, #16
 8004462:	701a      	strb	r2, [r3, #0]
	uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
	uint8_t hwVersion;
	uint16_t fwVersion;

	/* Initialize the BlueNRG SPI driver */
	BNRG_SPI_Init();
 8004464:	f7fd f88c 	bl	8001580 <BNRG_SPI_Init>

	/* Initialize the BlueNRG HCI */
	HCI_Init();
 8004468:	f7fc fb26 	bl	8000ab8 <HCI_Init>

	/* Reset BlueNRG hardware */
	BlueNRG_RST();
 800446c:	f7fd f8ba 	bl	80015e4 <BlueNRG_RST>

	/* get the BlueNRG HW and FW versions */
	getBlueNRGVersion(&hwVersion, &fwVersion);
 8004470:	1dba      	adds	r2, r7, #6
 8004472:	f107 0309 	add.w	r3, r7, #9
 8004476:	4611      	mov	r1, r2
 8004478:	4618      	mov	r0, r3
 800447a:	f7fc fad9 	bl	8000a30 <getBlueNRGVersion>


	/*
	 * Reset BlueNRG again otherwise it will fail.
	 */
	BlueNRG_RST();
 800447e:	f7fd f8b1 	bl	80015e4 <BlueNRG_RST>

	/* inits the gatt server */
	aci_gatt_init();
 8004482:	f7fc f887 	bl	8000594 <aci_gatt_init>

	/* init the gap layer */
	if (hwVersion > 0x30) {
 8004486:	7a7b      	ldrb	r3, [r7, #9]
 8004488:	2b30      	cmp	r3, #48	; 0x30
 800448a:	d90e      	bls.n	80044aa <ble_stack_init+0x62>
		aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07,
 800448c:	f107 020e 	add.w	r2, r7, #14
 8004490:	f107 030a 	add.w	r3, r7, #10
 8004494:	9301      	str	r3, [sp, #4]
 8004496:	f107 030c 	add.w	r3, r7, #12
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	4613      	mov	r3, r2
 800449e:	2207      	movs	r2, #7
 80044a0:	2100      	movs	r1, #0
 80044a2:	2001      	movs	r0, #1
 80044a4:	f7fb fe90 	bl	80001c8 <aci_gap_init_IDB05A1>
 80044a8:	e008      	b.n	80044bc <ble_stack_init+0x74>
			&service_handle, &dev_name_char_handle,
			&appearance_char_handle);
	} else {
		aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle,
 80044aa:	f107 030a 	add.w	r3, r7, #10
 80044ae:	f107 020c 	add.w	r2, r7, #12
 80044b2:	f107 010e 	add.w	r1, r7, #14
 80044b6:	2001      	movs	r0, #1
 80044b8:	f7fb fed6 	bl	8000268 <aci_gap_init_IDB04A1>
			&dev_name_char_handle, &appearance_char_handle);
	}


	aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 80044bc:	89f8      	ldrh	r0, [r7, #14]
 80044be:	89b9      	ldrh	r1, [r7, #12]
 80044c0:	f107 0310 	add.w	r3, r7, #16
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	2307      	movs	r3, #7
 80044c8:	2200      	movs	r2, #0
 80044ca:	f7fc f9e7 	bl	800089c <aci_gatt_update_char_value>
			sizeof(BoardName), (uint8_t *) BoardName);


	/* set the security manager defaults */
	aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 80044ce:	2301      	movs	r3, #1
 80044d0:	9303      	str	r3, [sp, #12]
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <ble_stack_init+0xb8>)
 80044d4:	9302      	str	r3, [sp, #8]
 80044d6:	2300      	movs	r3, #0
 80044d8:	9301      	str	r3, [sp, #4]
 80044da:	2310      	movs	r3, #16
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	2307      	movs	r3, #7
 80044e0:	2200      	movs	r2, #0
 80044e2:	2100      	movs	r1, #0
 80044e4:	2001      	movs	r0, #1
 80044e6:	f7fc f804 	bl	80004f2 <aci_gap_set_auth_requirement>
	USE_FIXED_PIN_FOR_PAIRING, 123456,
	BONDING);


	/* Set output power level */
	aci_hal_set_tx_power_level(1, 4);
 80044ea:	2104      	movs	r1, #4
 80044ec:	2001      	movs	r0, #1
 80044ee:	f7fc fa6e 	bl	80009ce <aci_hal_set_tx_power_level>

	return;
 80044f2:	bf00      	nop

}
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	08004ca4 	.word	0x08004ca4
 8004500:	0001e240 	.word	0x0001e240

08004504 <ble_service_add>:
 *
 *  @param
 *  @return
 */
static void ble_service_add(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08c      	sub	sp, #48	; 0x30
 8004508:	af06      	add	r7, sp, #24
	tBleStatus ret;

	uint8_t uuid[16];

	/* creates the service  and add it to database */
	COPY_CONFIG_SERVICE_UUID(uuid);
 800450a:	231b      	movs	r3, #27
 800450c:	713b      	strb	r3, [r7, #4]
 800450e:	23c5      	movs	r3, #197	; 0xc5
 8004510:	717b      	strb	r3, [r7, #5]
 8004512:	23d5      	movs	r3, #213	; 0xd5
 8004514:	71bb      	strb	r3, [r7, #6]
 8004516:	23a5      	movs	r3, #165	; 0xa5
 8004518:	71fb      	strb	r3, [r7, #7]
 800451a:	2302      	movs	r3, #2
 800451c:	723b      	strb	r3, [r7, #8]
 800451e:	2300      	movs	r3, #0
 8004520:	727b      	strb	r3, [r7, #9]
 8004522:	23b4      	movs	r3, #180	; 0xb4
 8004524:	72bb      	strb	r3, [r7, #10]
 8004526:	239a      	movs	r3, #154	; 0x9a
 8004528:	72fb      	strb	r3, [r7, #11]
 800452a:	23e1      	movs	r3, #225	; 0xe1
 800452c:	733b      	strb	r3, [r7, #12]
 800452e:	2311      	movs	r3, #17
 8004530:	737b      	strb	r3, [r7, #13]
 8004532:	230f      	movs	r3, #15
 8004534:	73bb      	strb	r3, [r7, #14]
 8004536:	2300      	movs	r3, #0
 8004538:	73fb      	strb	r3, [r7, #15]
 800453a:	2300      	movs	r3, #0
 800453c:	743b      	strb	r3, [r7, #16]
 800453e:	2300      	movs	r3, #0
 8004540:	747b      	strb	r3, [r7, #17]
 8004542:	2300      	movs	r3, #0
 8004544:	74bb      	strb	r3, [r7, #18]
 8004546:	2300      	movs	r3, #0
 8004548:	74fb      	strb	r3, [r7, #19]
	ret = aci_gatt_add_serv(UUID_TYPE_128, uuid, PRIMARY_SERVICE, 1 + 3,
 800454a:	1d39      	adds	r1, r7, #4
 800454c:	4b20      	ldr	r3, [pc, #128]	; (80045d0 <ble_service_add+0xcc>)
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	2304      	movs	r3, #4
 8004552:	2201      	movs	r2, #1
 8004554:	2002      	movs	r0, #2
 8004556:	f7fc f840 	bl	80005da <aci_gatt_add_serv>
 800455a:	4603      	mov	r3, r0
 800455c:	75fb      	strb	r3, [r7, #23]
			&bee_service_handle);


	/* creates the characteristic and adds it to database*/
	COPY_CONFIG_W2ST_CHAR_UUID(uuid);
 800455e:	231b      	movs	r3, #27
 8004560:	713b      	strb	r3, [r7, #4]
 8004562:	23c5      	movs	r3, #197	; 0xc5
 8004564:	717b      	strb	r3, [r7, #5]
 8004566:	23d5      	movs	r3, #213	; 0xd5
 8004568:	71bb      	strb	r3, [r7, #6]
 800456a:	23a5      	movs	r3, #165	; 0xa5
 800456c:	71fb      	strb	r3, [r7, #7]
 800456e:	2302      	movs	r3, #2
 8004570:	723b      	strb	r3, [r7, #8]
 8004572:	2300      	movs	r3, #0
 8004574:	727b      	strb	r3, [r7, #9]
 8004576:	2336      	movs	r3, #54	; 0x36
 8004578:	72bb      	strb	r3, [r7, #10]
 800457a:	23ac      	movs	r3, #172	; 0xac
 800457c:	72fb      	strb	r3, [r7, #11]
 800457e:	23e1      	movs	r3, #225	; 0xe1
 8004580:	733b      	strb	r3, [r7, #12]
 8004582:	2311      	movs	r3, #17
 8004584:	737b      	strb	r3, [r7, #13]
 8004586:	230f      	movs	r3, #15
 8004588:	73bb      	strb	r3, [r7, #14]
 800458a:	2300      	movs	r3, #0
 800458c:	73fb      	strb	r3, [r7, #15]
 800458e:	2302      	movs	r3, #2
 8004590:	743b      	strb	r3, [r7, #16]
 8004592:	2300      	movs	r3, #0
 8004594:	747b      	strb	r3, [r7, #17]
 8004596:	2300      	movs	r3, #0
 8004598:	74bb      	strb	r3, [r7, #18]
 800459a:	2300      	movs	r3, #0
 800459c:	74fb      	strb	r3, [r7, #19]
	ret = aci_gatt_add_char(bee_service_handle, UUID_TYPE_128, uuid,
 800459e:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <ble_service_add+0xcc>)
 80045a0:	8818      	ldrh	r0, [r3, #0]
 80045a2:	1d3a      	adds	r2, r7, #4
 80045a4:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <ble_service_add+0xd0>)
 80045a6:	9305      	str	r3, [sp, #20]
 80045a8:	2300      	movs	r3, #0
 80045aa:	9304      	str	r3, [sp, #16]
 80045ac:	2310      	movs	r3, #16
 80045ae:	9303      	str	r3, [sp, #12]
 80045b0:	2300      	movs	r3, #0
 80045b2:	9302      	str	r3, [sp, #8]
 80045b4:	2300      	movs	r3, #0
 80045b6:	9301      	str	r3, [sp, #4]
 80045b8:	2310      	movs	r3, #16
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	2304      	movs	r3, #4
 80045be:	2102      	movs	r1, #2
 80045c0:	f7fc f897 	bl	80006f2 <aci_gatt_add_char>
 80045c4:	4603      	mov	r3, r0
 80045c6:	75fb      	strb	r3, [r7, #23]
			ATTR_PERMISSION_NONE,
			GATT_DONT_NOTIFY_EVENTS, 16, 0,
			&bee_char_aggro_handle);

	(void)ret;
}
 80045c8:	bf00      	nop
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	200002e0 	.word	0x200002e0
 80045d4:	200002e2 	.word	0x200002e2

080045d8 <ble_start_advertisement>:
 *
 *  @param
 *  @return
 */
static void ble_start_advertisement(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08a      	sub	sp, #40	; 0x28
 80045dc:	af08      	add	r7, sp, #32
	hci_le_set_scan_resp_data(0, NULL);
 80045de:	2100      	movs	r1, #0
 80045e0:	2000      	movs	r0, #0
 80045e2:	f7fc fd2d 	bl	8001040 <hci_le_set_scan_resp_data>

	char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'L','B'};
 80045e6:	4a11      	ldr	r2, [pc, #68]	; (800462c <ble_start_advertisement+0x54>)
 80045e8:	1d3b      	adds	r3, r7, #4
 80045ea:	6812      	ldr	r2, [r2, #0]
 80045ec:	4611      	mov	r1, r2
 80045ee:	8019      	strh	r1, [r3, #0]
 80045f0:	3302      	adds	r3, #2
 80045f2:	0c12      	lsrs	r2, r2, #16
 80045f4:	701a      	strb	r2, [r3, #0]
	aci_gap_set_discoverable(ADV_IND, 0, 0,
 80045f6:	2300      	movs	r3, #0
 80045f8:	9306      	str	r3, [sp, #24]
 80045fa:	2300      	movs	r3, #0
 80045fc:	9305      	str	r3, [sp, #20]
 80045fe:	2300      	movs	r3, #0
 8004600:	9304      	str	r3, [sp, #16]
 8004602:	2300      	movs	r3, #0
 8004604:	9303      	str	r3, [sp, #12]
 8004606:	1d3b      	adds	r3, r7, #4
 8004608:	9302      	str	r3, [sp, #8]
 800460a:	2303      	movs	r3, #3
 800460c:	9301      	str	r3, [sp, #4]
 800460e:	2300      	movs	r3, #0
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	2300      	movs	r3, #0
 8004614:	2200      	movs	r2, #0
 8004616:	2100      	movs	r1, #0
 8004618:	2000      	movs	r0, #0
 800461a:	f7fb fe6f 	bl	80002fc <aci_gap_set_discoverable>
								sizeof(local_name),
								local_name, 0, NULL, 0, 0);


	/* broadcast advertisement event */
	event_queue_put(k_bleadvertising);
 800461e:	2006      	movs	r0, #6
 8004620:	f000 f936 	bl	8004890 <event_queue_put>
}
 8004624:	bf00      	nop
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	08004cac 	.word	0x08004cac

08004630 <bee_char_update>:
 *
 *  @param
 *  @return
 */
static void bee_char_update(void *val, uint8_t size)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af02      	add	r7, sp, #8
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	460b      	mov	r3, r1
 800463a:	70fb      	strb	r3, [r7, #3]
	/* value and size must be valid */
	if(val && size) {
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00d      	beq.n	800465e <bee_char_update+0x2e>
 8004642:	78fb      	ldrb	r3, [r7, #3]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <bee_char_update+0x2e>

		/* send the new value through the gatt layer */
		aci_gatt_update_char_value(bee_service_handle, bee_char_aggro_handle,
 8004648:	4b07      	ldr	r3, [pc, #28]	; (8004668 <bee_char_update+0x38>)
 800464a:	8818      	ldrh	r0, [r3, #0]
 800464c:	4b07      	ldr	r3, [pc, #28]	; (800466c <bee_char_update+0x3c>)
 800464e:	8819      	ldrh	r1, [r3, #0]
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	4613      	mov	r3, r2
 8004658:	2200      	movs	r2, #0
 800465a:	f7fc f91f 	bl	800089c <aci_gatt_update_char_value>
				0,size,val);
	}
}
 800465e:	bf00      	nop
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	200002e0 	.word	0x200002e0
 800466c:	200002e2 	.word	0x200002e2

08004670 <bee_ble_on_hci>:
 *
 *  @param
 *  @return
 */
static void bee_ble_on_hci(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
	HCI_Process();
 8004674:	f7fc fa66 	bl	8000b44 <HCI_Process>
}
 8004678:	bf00      	nop
 800467a:	bd80      	pop	{r7, pc}

0800467c <bee_ble_on_aggro>:
 *
 *  @param
 *  @return
 */
static void bee_ble_on_aggro(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
	uint32_t aggro_value = 0;
 8004682:	2300      	movs	r3, #0
 8004684:	607b      	str	r3, [r7, #4]
	bee_char_update((uint8_t *)&aggro_value, sizeof(aggro_value));
 8004686:	1d3b      	adds	r3, r7, #4
 8004688:	2104      	movs	r1, #4
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff ffd0 	bl	8004630 <bee_char_update>
}
 8004690:	bf00      	nop
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <bee_ble_on_disconnected>:
 *
 *  @param
 *  @return
 */
static void bee_ble_on_disconnected(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
   state = k_bee_disconnected;
 800469c:	4b03      	ldr	r3, [pc, #12]	; (80046ac <bee_ble_on_disconnected+0x14>)
 800469e:	2201      	movs	r2, #1
 80046a0:	701a      	strb	r2, [r3, #0]
}
 80046a2:	bf00      	nop
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	20000000 	.word	0x20000000

080046b0 <bee_ble_on_connected>:
 *
 *  @param
 *  @return
 */
static void bee_ble_on_connected(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
	state = k_bee_connected;
 80046b4:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <bee_ble_on_connected+0x14>)
 80046b6:	2202      	movs	r2, #2
 80046b8:	701a      	strb	r2, [r3, #0]
}
 80046ba:	bf00      	nop
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	20000000 	.word	0x20000000

080046c8 <bee_ble_on_advertising>:
 *
 *  @param
 *  @return
 */
static void bee_ble_on_advertising(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
	state = k_bee_advertising;
 80046cc:	4b03      	ldr	r3, [pc, #12]	; (80046dc <bee_ble_on_advertising+0x14>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	701a      	strb	r2, [r3, #0]
}
 80046d2:	bf00      	nop
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	20000000 	.word	0x20000000

080046e0 <bee_ble_init>:


/** public functions */

void bee_ble_init(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
	 *  the HCI and GATT servers, which enables
	 *  the addiction of our custom Bee service
	 *  finally start the advertisement
	 *
	 */
	ble_stack_init();
 80046e4:	f7ff feb0 	bl	8004448 <ble_stack_init>
	ble_service_add();
 80046e8:	f7ff ff0c 	bl	8004504 <ble_service_add>
	ble_start_advertisement();
 80046ec:	f7ff ff74 	bl	80045d8 <ble_start_advertisement>
}
 80046f0:	bf00      	nop
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <bee_ble_handler>:
{
	return(state);
}

void bee_ble_handler(system_event_t ev)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	71fb      	strb	r3, [r7, #7]
	switch(ev) {
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	3b01      	subs	r3, #1
 8004702:	2b05      	cmp	r3, #5
 8004704:	d81d      	bhi.n	8004742 <bee_ble_handler+0x4e>
 8004706:	a201      	add	r2, pc, #4	; (adr r2, 800470c <bee_ble_handler+0x18>)
 8004708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470c:	08004725 	.word	0x08004725
 8004710:	08004743 	.word	0x08004743
 8004714:	0800472b 	.word	0x0800472b
 8004718:	08004737 	.word	0x08004737
 800471c:	0800473d 	.word	0x0800473d
 8004720:	08004731 	.word	0x08004731
	case k_blehcievent:
		bee_ble_on_hci();
 8004724:	f7ff ffa4 	bl	8004670 <bee_ble_on_hci>
		break;
 8004728:	e00b      	b.n	8004742 <bee_ble_handler+0x4e>

	case k_aggresivity_available:
		bee_ble_on_aggro();
 800472a:	f7ff ffa7 	bl	800467c <bee_ble_on_aggro>
		break;
 800472e:	e008      	b.n	8004742 <bee_ble_handler+0x4e>

	case k_bleadvertising:
		bee_ble_on_advertising();
 8004730:	f7ff ffca 	bl	80046c8 <bee_ble_on_advertising>
		break;
 8004734:	e005      	b.n	8004742 <bee_ble_handler+0x4e>

	case k_bleconnected:
		bee_ble_on_connected();
 8004736:	f7ff ffbb 	bl	80046b0 <bee_ble_on_connected>
		break;
 800473a:	e002      	b.n	8004742 <bee_ble_handler+0x4e>

	case k_bledisconnected:
		bee_ble_on_disconnected();
 800473c:	f7ff ffac 	bl	8004698 <bee_ble_on_disconnected>
		break;
 8004740:	bf00      	nop
	}
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop

0800474c <HAL_GPIO_EXTI_Callback>:
 *
 *  @param
 *  @return
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8004756:	88fb      	ldrh	r3, [r7, #6]
 8004758:	2b20      	cmp	r3, #32
 800475a:	d000      	beq.n	800475e <HAL_GPIO_EXTI_Callback+0x12>
	case BNRG_SPI_EXTI_PIN:
		HCI_Isr();
		event_queue_put(k_blehcievent);
		break;
	}
}
 800475c:	e005      	b.n	800476a <HAL_GPIO_EXTI_Callback+0x1e>
		HCI_Isr();
 800475e:	f7fc fa2f 	bl	8000bc0 <HCI_Isr>
		event_queue_put(k_blehcievent);
 8004762:	2001      	movs	r0, #1
 8004764:	f000 f894 	bl	8004890 <event_queue_put>
		break;
 8004768:	bf00      	nop
}
 800476a:	bf00      	nop
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HCI_Event_CB>:
 *
 *  @param
 *  @return
 */
void HCI_Event_CB(void *pckt)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b088      	sub	sp, #32
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]

	/* maps the packet to one of the
	 * specified HCI events
	 */
	hci_uart_pckt *hci_pckt = pckt;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	61fb      	str	r3, [r7, #28]
	hci_event_pckt *event_pckt = (hci_event_pckt*) hci_pckt->data;
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	3301      	adds	r3, #1
 8004782:	61bb      	str	r3, [r7, #24]
	evt_le_meta_event *evt = NULL;
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]
	evt_le_connection_complete *cc = NULL;
 8004788:	2300      	movs	r3, #0
 800478a:	613b      	str	r3, [r7, #16]
	evt_blue_aci *blue_evt = NULL;
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]

	(void)cc;
	(void)blue_evt;

	/* is not a HCI packet, ignore it */
	if (hci_pckt->type != HCI_EVENT_PKT) {
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b04      	cmp	r3, #4
 8004796:	d12c      	bne.n	80047f2 <HCI_Event_CB+0x80>
		return;
	}

	switch (event_pckt->evt) {
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b3e      	cmp	r3, #62	; 0x3e
 800479e:	d007      	beq.n	80047b0 <HCI_Event_CB+0x3e>
 80047a0:	2bff      	cmp	r3, #255	; 0xff
 80047a2:	d015      	beq.n	80047d0 <HCI_Event_CB+0x5e>
 80047a4:	2b05      	cmp	r3, #5
 80047a6:	d125      	bne.n	80047f4 <HCI_Event_CB+0x82>

	case EVT_DISCONN_COMPLETE:
		event_queue_put(k_bledisconnected);
 80047a8:	2005      	movs	r0, #5
 80047aa:	f000 f871 	bl	8004890 <event_queue_put>

		break;
 80047ae:	e021      	b.n	80047f4 <HCI_Event_CB+0x82>
	case EVT_LE_META_EVENT:
		evt = (void *) event_pckt->data;
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	3302      	adds	r3, #2
 80047b4:	617b      	str	r3, [r7, #20]

		switch (evt->subevent) {
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d000      	beq.n	80047c0 <HCI_Event_CB+0x4e>
			cc = (void *) evt->data;
			event_queue_put(k_bleconnected);
			break;
		}

		break;
 80047be:	e019      	b.n	80047f4 <HCI_Event_CB+0x82>
			cc = (void *) evt->data;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	3301      	adds	r3, #1
 80047c4:	613b      	str	r3, [r7, #16]
			event_queue_put(k_bleconnected);
 80047c6:	2004      	movs	r0, #4
 80047c8:	f000 f862 	bl	8004890 <event_queue_put>
			break;
 80047cc:	bf00      	nop
		break;
 80047ce:	e011      	b.n	80047f4 <HCI_Event_CB+0x82>
	case EVT_VENDOR:
		blue_evt = (void*) event_pckt->data;
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	3302      	adds	r3, #2
 80047d4:	60fb      	str	r3, [r7, #12]

		switch (blue_evt->ecode) {
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	f640 4201 	movw	r2, #3073	; 0xc01
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d003      	beq.n	80047ec <HCI_Event_CB+0x7a>
 80047e4:	f640 4214 	movw	r2, #3092	; 0xc14
 80047e8:	4293      	cmp	r3, r2
		case EVT_BLUE_GATT_READ_PERMIT_REQ:

			break;
 80047ea:	e000      	b.n	80047ee <HCI_Event_CB+0x7c>
		case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
			break;
 80047ec:	bf00      	nop
		}

		break;
 80047ee:	bf00      	nop
 80047f0:	e000      	b.n	80047f4 <HCI_Event_CB+0x82>
		return;
 80047f2:	bf00      	nop
	}
}
 80047f4:	3720      	adds	r7, #32
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <event_queue_peek>:
{
   /* not needed */
   return 0;
}
system_event_t event_queue_peek(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
    system_event_t ret = (noof_elements == 0)? k_noevent : event_queue[get_index];
 8004802:	4b09      	ldr	r3, [pc, #36]	; (8004828 <event_queue_peek+0x2c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d004      	beq.n	8004814 <event_queue_peek+0x18>
 800480a:	4b08      	ldr	r3, [pc, #32]	; (800482c <event_queue_peek+0x30>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a08      	ldr	r2, [pc, #32]	; (8004830 <event_queue_peek+0x34>)
 8004810:	5cd3      	ldrb	r3, [r2, r3]
 8004812:	e000      	b.n	8004816 <event_queue_peek+0x1a>
 8004814:	2300      	movs	r3, #0
 8004816:	71fb      	strb	r3, [r7, #7]
    return(ret);
 8004818:	79fb      	ldrb	r3, [r7, #7]
}
 800481a:	4618      	mov	r0, r3
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	200002ec 	.word	0x200002ec
 800482c:	200002e8 	.word	0x200002e8
 8004830:	200002f0 	.word	0x200002f0

08004834 <event_queue_get>:
system_event_t event_queue_get(void)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
    system_event_t ret = (noof_elements == 0)? k_noevent : event_queue[get_index];
 800483a:	4b12      	ldr	r3, [pc, #72]	; (8004884 <event_queue_get+0x50>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d004      	beq.n	800484c <event_queue_get+0x18>
 8004842:	4b11      	ldr	r3, [pc, #68]	; (8004888 <event_queue_get+0x54>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a11      	ldr	r2, [pc, #68]	; (800488c <event_queue_get+0x58>)
 8004848:	5cd3      	ldrb	r3, [r2, r3]
 800484a:	e000      	b.n	800484e <event_queue_get+0x1a>
 800484c:	2300      	movs	r3, #0
 800484e:	71fb      	strb	r3, [r7, #7]
    if(ret != k_noevent) {
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00e      	beq.n	8004874 <event_queue_get+0x40>
        get_index = (get_index + 1) % EVENT_QUEUE_LEN;
 8004856:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <event_queue_get+0x54>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3301      	adds	r3, #1
 800485c:	425a      	negs	r2, r3
 800485e:	b2db      	uxtb	r3, r3
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	bf58      	it	pl
 8004864:	4253      	negpl	r3, r2
 8004866:	4a08      	ldr	r2, [pc, #32]	; (8004888 <event_queue_get+0x54>)
 8004868:	6013      	str	r3, [r2, #0]
        noof_elements--;
 800486a:	4b06      	ldr	r3, [pc, #24]	; (8004884 <event_queue_get+0x50>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3b01      	subs	r3, #1
 8004870:	4a04      	ldr	r2, [pc, #16]	; (8004884 <event_queue_get+0x50>)
 8004872:	6013      	str	r3, [r2, #0]
    }
    return(ret);
 8004874:	79fb      	ldrb	r3, [r7, #7]
}
 8004876:	4618      	mov	r0, r3
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	200002ec 	.word	0x200002ec
 8004888:	200002e8 	.word	0x200002e8
 800488c:	200002f0 	.word	0x200002f0

08004890 <event_queue_put>:
int event_queue_put(system_event_t ev)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 800489a:	2300      	movs	r3, #0
 800489c:	60fb      	str	r3, [r7, #12]

    if(noof_elements < EVENT_QUEUE_LEN) {
 800489e:	4b11      	ldr	r3, [pc, #68]	; (80048e4 <event_queue_put+0x54>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2bff      	cmp	r3, #255	; 0xff
 80048a4:	dc14      	bgt.n	80048d0 <event_queue_put+0x40>
        /* send event to the most back position of queue */
        event_queue[put_index] = ev;
 80048a6:	4b10      	ldr	r3, [pc, #64]	; (80048e8 <event_queue_put+0x58>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4910      	ldr	r1, [pc, #64]	; (80048ec <event_queue_put+0x5c>)
 80048ac:	79fa      	ldrb	r2, [r7, #7]
 80048ae:	54ca      	strb	r2, [r1, r3]
        put_index = (put_index + 1) % EVENT_QUEUE_LEN;
 80048b0:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <event_queue_put+0x58>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3301      	adds	r3, #1
 80048b6:	425a      	negs	r2, r3
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	bf58      	it	pl
 80048be:	4253      	negpl	r3, r2
 80048c0:	4a09      	ldr	r2, [pc, #36]	; (80048e8 <event_queue_put+0x58>)
 80048c2:	6013      	str	r3, [r2, #0]
        noof_elements++;
 80048c4:	4b07      	ldr	r3, [pc, #28]	; (80048e4 <event_queue_put+0x54>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3301      	adds	r3, #1
 80048ca:	4a06      	ldr	r2, [pc, #24]	; (80048e4 <event_queue_put+0x54>)
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e002      	b.n	80048d6 <event_queue_put+0x46>
    } else {
        /* event queue full */
        ret = -1;
 80048d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048d4:	60fb      	str	r3, [r7, #12]
    }

    return(ret);
 80048d6:	68fb      	ldr	r3, [r7, #12]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	200002ec 	.word	0x200002ec
 80048e8:	200002e4 	.word	0x200002e4
 80048ec:	200002f0 	.word	0x200002f0

080048f0 <sysclk_config>:
 *  @return
 *
 *
 */
static void sysclk_config(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b0ba      	sub	sp, #232	; 0xe8
 80048f4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	605a      	str	r2, [r3, #4]
 8004900:	609a      	str	r2, [r3, #8]
 8004902:	60da      	str	r2, [r3, #12]
 8004904:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004906:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800490a:	2244      	movs	r2, #68	; 0x44
 800490c:	2100      	movs	r1, #0
 800490e:	4618      	mov	r0, r3
 8004910:	f000 f9b3 	bl	8004c7a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004914:	f107 0308 	add.w	r3, r7, #8
 8004918:	2288      	movs	r2, #136	; 0x88
 800491a:	2100      	movs	r1, #0
 800491c:	4618      	mov	r0, r3
 800491e:	f000 f9ac 	bl	8004c7a <memset>

  __HAL_RCC_PWR_CLK_ENABLE();
 8004922:	4a39      	ldr	r2, [pc, #228]	; (8004a08 <sysclk_config+0x118>)
 8004924:	4b38      	ldr	r3, [pc, #224]	; (8004a08 <sysclk_config+0x118>)
 8004926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492c:	6593      	str	r3, [r2, #88]	; 0x58
 800492e:	4b36      	ldr	r3, [pc, #216]	; (8004a08 <sysclk_config+0x118>)
 8004930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004936:	607b      	str	r3, [r7, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
  HAL_PWR_EnableBkUpAccess();
 800493a:	f7fd fb41 	bl	8001fc0 <HAL_PWR_EnableBkUpAccess>

  /* Enable the LSE Oscilator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 800493e:	2304      	movs	r3, #4
 8004940:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004944:	2301      	movs	r3, #1
 8004946:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 800494a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800494e:	4618      	mov	r0, r3
 8004950:	f7fd fb54 	bl	8001ffc <HAL_RCC_OscConfig>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d000      	beq.n	800495c <sysclk_config+0x6c>
    while(1);
 800495a:	e7fe      	b.n	800495a <sysclk_config+0x6a>
  }

  /* Enable the CSS interrupt in case LSE signal is corrupted or not present */
  HAL_RCCEx_DisableLSECSS();
 800495c:	f7fe fc96 	bl	800328c <HAL_RCCEx_DisableLSECSS>

  /* Enable MSI Oscillator and activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8004960:	2310      	movs	r3, #16
 8004962:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8004966:	2301      	movs	r3, #1
 8004968:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800496c:	2300      	movs	r3, #0
 800496e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8004972:	23b0      	movs	r3, #176	; 0xb0
 8004974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8004978:	2302      	movs	r3, #2
 800497a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 800497e:	2301      	movs	r3, #1
 8004980:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM            = 6;
 8004984:	2306      	movs	r3, #6
 8004986:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN            = 40;
 800498a:	2328      	movs	r3, #40	; 0x28
 800498c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP            = 7;
 8004990:	2307      	movs	r3, #7
 8004992:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8004996:	2304      	movs	r3, #4
 8004998:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLR            = 4;
 800499c:	2304      	movs	r3, #4
 800499e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 80049a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fd fb28 	bl	8001ffc <HAL_RCC_OscConfig>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d000      	beq.n	80049b4 <sysclk_config+0xc4>
    while(1);
 80049b2:	e7fe      	b.n	80049b2 <sysclk_config+0xc2>
  }

  /* Enable MSI Auto-calibration through LSE */
  HAL_RCCEx_EnableMSIPLLMode();
 80049b4:	f7fe fc82 	bl	80032bc <HAL_RCCEx_EnableMSIPLLMode>

  /* Select MSI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80049b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 80049be:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 80049c2:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80049c4:	f107 0308 	add.w	r3, r7, #8
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fe f97b 	bl	8002cc4 <HAL_RCCEx_PeriphCLKConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80049ce:	230f      	movs	r3, #15
 80049d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049d4:	2303      	movs	r3, #3
 80049d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049da:	2300      	movs	r3, #0
 80049dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80049e0:	2300      	movs	r3, #0
 80049e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80049e6:	2300      	movs	r3, #0
 80049e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK){
 80049ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80049f0:	2104      	movs	r1, #4
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fd fe88 	bl	8002708 <HAL_RCC_ClockConfig>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d000      	beq.n	8004a00 <sysclk_config+0x110>
    while(1);
 80049fe:	e7fe      	b.n	80049fe <sysclk_config+0x10e>
  }
}
 8004a00:	bf00      	nop
 8004a02:	37e8      	adds	r7, #232	; 0xe8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40021000 	.word	0x40021000

08004a0c <main>:
 *
 *  @param
 *  @return
 */
int main(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
	HAL_Init();
 8004a12:	f7fc ff8f 	bl	8001934 <HAL_Init>
	sysclk_config();
 8004a16:	f7ff ff6b 	bl	80048f0 <sysclk_config>

	/* inits the sub applications */
	bee_ble_init();
 8004a1a:	f7ff fe61 	bl	80046e0 <bee_ble_init>


	for(;;){
		system_event_t ev = event_queue_get();
 8004a1e:	f7ff ff09 	bl	8004834 <event_queue_get>
 8004a22:	4603      	mov	r3, r0
 8004a24:	71fb      	strb	r3, [r7, #7]

		bee_ble_handler(ev);
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff fe63 	bl	80046f4 <bee_ble_handler>

		if(event_queue_peek() == k_noevent) {
 8004a2e:	f7ff fee5 	bl	80047fc <event_queue_peek>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f2      	bne.n	8004a1e <main+0x12>
  __ASM volatile ("wfi");
 8004a38:	bf30      	wfi
	for(;;){
 8004a3a:	e7f0      	b.n	8004a1e <main+0x12>

08004a3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a74 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004a40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004a42:	e003      	b.n	8004a4c <LoopCopyDataInit>

08004a44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004a44:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004a46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004a48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004a4a:	3104      	adds	r1, #4

08004a4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004a4c:	480b      	ldr	r0, [pc, #44]	; (8004a7c <LoopForever+0xa>)
	ldr	r3, =_edata
 8004a4e:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004a50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004a52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004a54:	d3f6      	bcc.n	8004a44 <CopyDataInit>
	ldr	r2, =_sbss
 8004a56:	4a0b      	ldr	r2, [pc, #44]	; (8004a84 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004a58:	e002      	b.n	8004a60 <LoopFillZerobss>

08004a5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004a5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004a5c:	f842 3b04 	str.w	r3, [r2], #4

08004a60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004a60:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <LoopForever+0x16>)
	cmp	r2, r3
 8004a62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004a64:	d3f9      	bcc.n	8004a5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004a66:	f000 f8a3 	bl	8004bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a6a:	f000 f8d7 	bl	8004c1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004a6e:	f7ff ffcd 	bl	8004a0c <main>

08004a72 <LoopForever>:

LoopForever:
    b LoopForever
 8004a72:	e7fe      	b.n	8004a72 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004a74:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004a78:	08004d00 	.word	0x08004d00
	ldr	r0, =_sdata
 8004a7c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004a80:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8004a84:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 8004a88:	200004a4 	.word	0x200004a4

08004a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a8c:	e7fe      	b.n	8004a8c <ADC1_2_IRQHandler>
	...

08004a90 <HAL_TIM_Base_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM4) {
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1a      	ldr	r2, [pc, #104]	; (8004b08 <HAL_TIM_Base_MspInit+0x78>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d114      	bne.n	8004acc <HAL_TIM_Base_MspInit+0x3c>
    /* TIMx Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004aa2:	4a1a      	ldr	r2, [pc, #104]	; (8004b0c <HAL_TIM_Base_MspInit+0x7c>)
 8004aa4:	4b19      	ldr	r3, [pc, #100]	; (8004b0c <HAL_TIM_Base_MspInit+0x7c>)
 8004aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa8:	f043 0304 	orr.w	r3, r3, #4
 8004aac:	6593      	str	r3, [r2, #88]	; 0x58
 8004aae:	4b17      	ldr	r3, [pc, #92]	; (8004b0c <HAL_TIM_Base_MspInit+0x7c>)
 8004ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	68fb      	ldr	r3, [r7, #12]

    /* Set Interrupt Group Priority */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0xF, 0);
 8004aba:	2200      	movs	r2, #0
 8004abc:	210f      	movs	r1, #15
 8004abe:	201e      	movs	r0, #30
 8004ac0:	f7fd f84a 	bl	8001b58 <HAL_NVIC_SetPriority>

    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004ac4:	201e      	movs	r0, #30
 8004ac6:	f7fd f863 	bl	8001b90 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0xF, 0);

    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  }
}
 8004aca:	e018      	b.n	8004afe <HAL_TIM_Base_MspInit+0x6e>
  } else if (htim->Instance == TIM5) {
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a0f      	ldr	r2, [pc, #60]	; (8004b10 <HAL_TIM_Base_MspInit+0x80>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d113      	bne.n	8004afe <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004ad6:	4a0d      	ldr	r2, [pc, #52]	; (8004b0c <HAL_TIM_Base_MspInit+0x7c>)
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	; (8004b0c <HAL_TIM_Base_MspInit+0x7c>)
 8004ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004adc:	f043 0308 	orr.w	r3, r3, #8
 8004ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ae2:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <HAL_TIM_Base_MspInit+0x7c>)
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	60bb      	str	r3, [r7, #8]
 8004aec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0xF, 0);
 8004aee:	2200      	movs	r2, #0
 8004af0:	210f      	movs	r1, #15
 8004af2:	2032      	movs	r0, #50	; 0x32
 8004af4:	f7fd f830 	bl	8001b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004af8:	2032      	movs	r0, #50	; 0x32
 8004afa:	f7fd f849 	bl	8001b90 <HAL_NVIC_EnableIRQ>
}
 8004afe:	bf00      	nop
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40000800 	.word	0x40000800
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	40000c00 	.word	0x40000c00

08004b14 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
}
 8004b18:	bf00      	nop
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004b22:	b480      	push	{r7}
 8004b24:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004b26:	e7fe      	b.n	8004b26 <HardFault_Handler+0x4>

08004b28 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004b2c:	e7fe      	b.n	8004b2c <MemManage_Handler+0x4>

08004b2e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004b32:	e7fe      	b.n	8004b32 <BusFault_Handler+0x4>

08004b34 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004b38:	e7fe      	b.n	8004b38 <UsageFault_Handler+0x4>

08004b3a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	af00      	add	r7, sp, #0
}
 8004b3e:	bf00      	nop
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
}
 8004b4c:	bf00      	nop
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8004b56:	b480      	push	{r7}
 8004b58:	af00      	add	r7, sp, #0
}
 8004b5a:	bf00      	nop
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8004b68:	f7fc fef2 	bl	8001950 <HAL_IncTick>
}
 8004b6c:	bf00      	nop
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <TIM1_CC_IRQHandler>:
  * @brief  This function handles TIM1 Interrupt request
  * @param  None
  * @retval None
  */
void TIM1_CC_IRQHandler(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
}
 8004b74:	bf00      	nop
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <EXTI9_5_IRQHandler>:
  *         interrupt request for BlueNRG.
  * @param  None
  * @retval None
  */
void BNRG_SPI_EXTI_IRQHandler(void)
{       
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BNRG_SPI_EXTI_PIN);
 8004b82:	2020      	movs	r0, #32
 8004b84:	f7fd f9fc 	bl	8001f80 <HAL_GPIO_EXTI_IRQHandler>
}
 8004b88:	bf00      	nop
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <OTG_FS_IRQHandler>:
  * @brief  This function handles USB-On-The-Go FS global interrupt request.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0

}
 8004b90:	bf00      	nop
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
	...

08004b9c <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8004ba0:	4802      	ldr	r0, [pc, #8]	; (8004bac <TIM3_IRQHandler+0x10>)
 8004ba2:	f7ff fa02 	bl	8003faa <HAL_TIM_IRQHandler>
}
 8004ba6:	bf00      	nop
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000468 	.word	0x20000468

08004bb0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004bb4:	4a17      	ldr	r2, [pc, #92]	; (8004c14 <SystemInit+0x64>)
 8004bb6:	4b17      	ldr	r3, [pc, #92]	; (8004c14 <SystemInit+0x64>)
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004bc4:	4a14      	ldr	r2, [pc, #80]	; (8004c18 <SystemInit+0x68>)
 8004bc6:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <SystemInit+0x68>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004bd0:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <SystemInit+0x68>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8004bd6:	4a10      	ldr	r2, [pc, #64]	; (8004c18 <SystemInit+0x68>)
 8004bd8:	4b0f      	ldr	r3, [pc, #60]	; (8004c18 <SystemInit+0x68>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004be0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004be4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8004be6:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <SystemInit+0x68>)
 8004be8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004bee:	4a0a      	ldr	r2, [pc, #40]	; (8004c18 <SystemInit+0x68>)
 8004bf0:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <SystemInit+0x68>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bf8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004bfa:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <SystemInit+0x68>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004c00:	4b04      	ldr	r3, [pc, #16]	; (8004c14 <SystemInit+0x64>)
 8004c02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c06:	609a      	str	r2, [r3, #8]
#endif
}
 8004c08:	bf00      	nop
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	e000ed00 	.word	0xe000ed00
 8004c18:	40021000 	.word	0x40021000

08004c1c <__libc_init_array>:
 8004c1c:	b570      	push	{r4, r5, r6, lr}
 8004c1e:	4e0d      	ldr	r6, [pc, #52]	; (8004c54 <__libc_init_array+0x38>)
 8004c20:	4c0d      	ldr	r4, [pc, #52]	; (8004c58 <__libc_init_array+0x3c>)
 8004c22:	1ba4      	subs	r4, r4, r6
 8004c24:	10a4      	asrs	r4, r4, #2
 8004c26:	2500      	movs	r5, #0
 8004c28:	42a5      	cmp	r5, r4
 8004c2a:	d109      	bne.n	8004c40 <__libc_init_array+0x24>
 8004c2c:	4e0b      	ldr	r6, [pc, #44]	; (8004c5c <__libc_init_array+0x40>)
 8004c2e:	4c0c      	ldr	r4, [pc, #48]	; (8004c60 <__libc_init_array+0x44>)
 8004c30:	f000 f82c 	bl	8004c8c <_init>
 8004c34:	1ba4      	subs	r4, r4, r6
 8004c36:	10a4      	asrs	r4, r4, #2
 8004c38:	2500      	movs	r5, #0
 8004c3a:	42a5      	cmp	r5, r4
 8004c3c:	d105      	bne.n	8004c4a <__libc_init_array+0x2e>
 8004c3e:	bd70      	pop	{r4, r5, r6, pc}
 8004c40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c44:	4798      	blx	r3
 8004c46:	3501      	adds	r5, #1
 8004c48:	e7ee      	b.n	8004c28 <__libc_init_array+0xc>
 8004c4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c4e:	4798      	blx	r3
 8004c50:	3501      	adds	r5, #1
 8004c52:	e7f2      	b.n	8004c3a <__libc_init_array+0x1e>
 8004c54:	08004cf8 	.word	0x08004cf8
 8004c58:	08004cf8 	.word	0x08004cf8
 8004c5c:	08004cf8 	.word	0x08004cf8
 8004c60:	08004cfc 	.word	0x08004cfc

08004c64 <memcpy>:
 8004c64:	b510      	push	{r4, lr}
 8004c66:	1e43      	subs	r3, r0, #1
 8004c68:	440a      	add	r2, r1
 8004c6a:	4291      	cmp	r1, r2
 8004c6c:	d100      	bne.n	8004c70 <memcpy+0xc>
 8004c6e:	bd10      	pop	{r4, pc}
 8004c70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c78:	e7f7      	b.n	8004c6a <memcpy+0x6>

08004c7a <memset>:
 8004c7a:	4402      	add	r2, r0
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d100      	bne.n	8004c84 <memset+0xa>
 8004c82:	4770      	bx	lr
 8004c84:	f803 1b01 	strb.w	r1, [r3], #1
 8004c88:	e7f9      	b.n	8004c7e <memset+0x4>
	...

08004c8c <_init>:
 8004c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8e:	bf00      	nop
 8004c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c92:	bc08      	pop	{r3}
 8004c94:	469e      	mov	lr, r3
 8004c96:	4770      	bx	lr

08004c98 <_fini>:
 8004c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9a:	bf00      	nop
 8004c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9e:	bc08      	pop	{r3}
 8004ca0:	469e      	mov	lr, r3
 8004ca2:	4770      	bx	lr
